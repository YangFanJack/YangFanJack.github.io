<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JACK&#39;s BLOG</title>
  
  <subtitle>Blog about progress</subtitle>
  <link href="https://yangfanjack.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangfanjack.github.io/"/>
  <updated>2022-12-22T02:37:28.710Z</updated>
  <id>https://yangfanjack.github.io/</id>
  
  <author>
    <name>Jack1024</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win10壁纸bingtoday</title>
    <link href="https://yangfanjack.github.io/2022/03/30/win10%E5%A3%81%E7%BA%B8bingtoday/"/>
    <id>https://yangfanjack.github.io/2022/03/30/win10%E5%A3%81%E7%BA%B8bingtoday/</id>
    <published>2022-03-30T00:27:58.000Z</published>
    <updated>2022-12-22T02:37:28.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册表指定壁纸路径"><a href="#注册表指定壁纸路径" class="headerlink" title="注册表指定壁纸路径"></a>注册表指定壁纸路径</h2><ul><li>WIN+R打开运行对话框：输入regedit打开注册表</li><li>到达路径：<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System</code>下，一个叫Wallpaper的名称就是壁纸的指定路径，更换成你希望的壁纸路径：例如：<code>C:\wallpaper\wallpaper.jpg</code></li></ul><h2 id="每日bing壁纸下载"><a href="#每日bing壁纸下载" class="headerlink" title="每日bing壁纸下载"></a>每日bing壁纸下载</h2><ul><li><p>通过java代码实现下载每日bing壁纸到刚才注册表指定的壁纸路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String imgResource = getImgResource();</span><br><span class="line">        <span class="keyword">final</span> URL url = <span class="keyword">new</span> URL(imgResource);</span><br><span class="line">        <span class="keyword">final</span> URLConnection urlConnection = url.openConnection();</span><br><span class="line">        <span class="keyword">final</span> BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream());</span><br><span class="line">        <span class="keyword">final</span> BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\wallpaper\\wallpaper.jpg&quot;</span>));</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getImgResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://cn.bing.com/?mkt=zh-CN&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="keyword">final</span> Element vs_cont = document.getElementById(<span class="string">&quot;vs_cont&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Elements downloadLink = vs_cont.getElementsByClass(<span class="string">&quot;downloadLink&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> String[] split = downloadLink.toString().split(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://cn.bing.com/&quot;</span> + split[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bingDownload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 在这里指定入口类 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>DownloadMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打包java为jar包，只要电脑安装的jre环境，双击就能下载壁纸到指定路径</p></li></ul>]]></content>
    
    
    <summary type="html">公司电脑禁止了更换壁纸的权限，通过摸索，找到一条途径能实现每日更换bing壁纸。</summary>
    
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="Win10" scheme="https://yangfanjack.github.io/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>RPM打包初试</title>
    <link href="https://yangfanjack.github.io/2021/12/01/RPM%E6%89%93%E5%8C%85%E5%88%9D%E8%AF%95/"/>
    <id>https://yangfanjack.github.io/2021/12/01/RPM%E6%89%93%E5%8C%85%E5%88%9D%E8%AF%95/</id>
    <published>2021-12-01T02:44:01.000Z</published>
    <updated>2022-12-22T02:37:28.767Z</updated>
    
    <content type="html"><![CDATA[<p>1434</p><p>rpm打包需要一个独立的打包目录</p><ul><li>BUILD：编译rpm包的临时目录</li><li>BUILDROOT：编译后生成的软件临时安装目录</li><li>RPMS：最终生成的可安装rpm包存放目录</li><li>SOURCES：所有源文件和补丁文件存放目录</li><li>SPECS：存放SPEC文件的目录</li><li>SRPMS：软件最终的rpm源码格式存放路径</li></ul><p>打包需要从源码sources开始，将存放源码的目录打包压缩成tar.gz格式，放进SOURCES目录中</p><p>然后在SPECS目录中创建并编辑spec文件</p><p>最后根据spec文件进行打包<code>rpm -ba rpmbuild/SPECS/xxx.spec</code></p>]]></content>
    
    
    <summary type="html">从打包开始，为linux社区做贡献！</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Linux" scheme="https://yangfanjack.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>国庆北京独游</title>
    <link href="https://yangfanjack.github.io/2021/10/13/%E5%9B%BD%E5%BA%86%E5%8C%97%E4%BA%AC%E7%8B%AC%E6%B8%B8/"/>
    <id>https://yangfanjack.github.io/2021/10/13/%E5%9B%BD%E5%BA%86%E5%8C%97%E4%BA%AC%E7%8B%AC%E6%B8%B8/</id>
    <published>2021-10-13T00:13:19.000Z</published>
    <updated>2022-12-22T02:37:28.592Z</updated>
    
    <content type="html"><![CDATA[<p>在保定工作的这3个月里，从学校到工作过渡很平稳，学校里做的事和工作中差异不大，总体来说还是很快适应了工作环境。另外，和学校相比，假期确实太少啦，但是没办法，毕竟要挣钱的嘛。自己要想办法在一天8小时的工作中做更多有意义的事，否则就真的是浪费时间了。</p><p>好不容易等到国庆长假，早就计划趁着这次假期去北京走走看看，上一次去北京还是大二寒假返校利用转机空挡期在北京玩了一天，那次北京行印象深刻。但一天的行程，我即使用一天50000步的极限速度来搞，也不可能走完北京几个著名景点，况且还是走马观花式地在地铁线上往来于景点之间。</p><p>这次的北京行，我希望能尽量放慢时间，从底向上体会北京这座城的样貌。</p><h2 id="总体计划"><a href="#总体计划" class="headerlink" title="总体计划"></a>总体计划</h2><p>先说一下旅行前的大致安排：</p><p>第一天：天安门、故宫、北海公园、三里屯太古里、北京CBD核心区域、王府井</p><p>第二天：奥林匹克公园、圆明园、颐和园</p><p>第三天：八达岭长城</p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>9月30号下班后，备置些干粮，带上洗漱用品、充电宝、雨伞、充电器、钱包…。</p><p>由于是国庆节假日，可以预料到北京的拥挤程度。我提前预定了故宫和长城的门票。根据自己的行程安排预定好住宿旅馆：第一天的写在了王府井附近的一个胡同里；第二天的定在了鸟巢附近。</p><p>10月1号的高铁是6点40的班次——当天最早的一趟。保险起见，前一天晚上在滴滴就预约了凌晨4点的出租车，结果到了高铁站才知道高铁站6点开门，于是，我在高铁站外的一个尚未装修完的地下商场里等了1个小时…好在这地方还挺暖和。</p><p>坐上高铁，40分钟就到了北京。北京西站没有直达天安门广场附近的地铁。坐地铁最近能到天安门广场南几公里远，然后我骑着共享单车跟着导航穿越了传说中的北京胡同。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img13214733.jpg" alt="迷失于北京胡同"></p><p>所谓胡同，其实就是北京老式住房间的过道，算是北京最具本地特色的文化之一。骑一段路就要看看导航，最后总算是断断续续地走出来了，走出胡同最先入目的就是箭楼和正阳门，两个建筑非常端庄地前后有序地坐落在北京城的中轴线上。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img215019.jpg" alt="箭楼&amp;正阳门"></p><p>意料之中，人真的很多，毕竟时值国庆日，人再多都是能理解的。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_215306.jpg" alt="天安门广场"></p><p>排队安检后来到天安门广场，时隔3年再次来到天安门广场，和上次相比，10月1日的天安门广场自然有所不同。沿着中轴线摆放着巨型花篮和孙中山先生的画像。毛主席纪念堂、国家博物馆、人民大会堂、天安门从东南西北四四方方地围着广场，广场上竖立着国旗和人民英雄纪念碑。建筑整体看来非常大气壮观，倍显大国气象。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img215444.jpg" alt="孙文先生巨幅画像"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img215603.jpg" alt="五星红旗迎风飘扬"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img215713.jpg" alt="巨型花篮"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_215832.jpg" alt="天安门前华表"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_215852.jpg" alt="天安门正照"></p><p>从地下通道穿过长安大街来到天安门下，顺着故宫西墙往北走，就能看见后海。北京似乎有很多海，这些“海”有很重的人文色彩，大概就是明清时期的皇家湖泊吧。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220157.png" alt="北海公园前故宫西北角的角楼"></p><p>后海里的面积挺大，风景也很不错，值得一来。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220332.jpg" alt="后海荷花池"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img_220420.jpg" alt="湖边亭阁"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img_220445.jpg" alt="白塔"></p><p>逛完公园后后乘公交原路返回，从天安门进入，穿过端门，就能看见雄伟的故宫大门——午门了。故宫每天的游览人数是有限制的，所以需要提前在微信公众号预定门票，现场是不出售门票的。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220743.jpg" alt="故宫博物院"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220804.jpg" alt="特写"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220846.jpg" alt="午门"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220922.jpg" alt="太和门&amp;太和殿"></p><p>故宫虽然没有完全开放，但如果你想走完左右地方是不现实的，我选了一条公众号上推荐的路线：从午门进入，沿着中轴线经过太和门，太和殿、中和殿、保和殿，然后进入后宫，沿着乾清宫、交泰殿、坤宁宫、东六宫（钟粹宫、景阳宫、承乾宫、永和宫、延禧宫、景仁宫），最后，经过斋宫武备馆、宁寿宫，从神武门出去就算是出了宫😄。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img220954.jpg" alt="太和殿"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221016.jpg" alt="檐角"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221042.jpg" alt="三层白玉台阶"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221147.jpg" alt="乾清门"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221215.jpg" alt="金光"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221251.jpg" alt="红墙金瓦"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221309.jpg" alt="屋脊"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221354.jpg" alt="神武门"></p><p>从故宫出来，已经是下午4点过了，在神武门外搭乘双层大巴去南锣鼓巷换乘地铁前往三里屯。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221416.jpg" alt="三里屯"></p><p>北京三里屯太古里和成都那个太古里差球不多，满眼的外国牌子，一个都不认识，留下一张外景就拍屁股走人。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221441.jpg" alt="CCTV总部"></p><p>之后来到北京CBD核心区域，也是北京城最大的商业圈，“大裤衩”、国贸大楼…高楼林立，极具钢铁美感，作为共和国首都，经济自然不能太拉。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221456.jpg" alt="国贸大厦"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221512.jpg" alt="落日&amp;高楼"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221552.jpg" alt="错落有致"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221533.jpg" alt="旭日"></p><p>到王府井已经是晚上了，逛了会儿街。最后的晚饭在王府井街道末尾的APM吃的。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221640.jpg" alt="王府井大街"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221701.jpg" alt="王府井大街"></p><p>回到旅馆就睡了，太累了！哈哈，上一次50000步也是上一次的北京，不过有一说一，也是靠着北京世界级的城市交通网络我才能在十几个小时内在这么多地方往返。</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>第二天早上8点过才醒，收拾好后就去了奥林匹克公园。遗憾的是，北京这3天的天气真是一天比一天差。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221832.jpg" alt="鸟巢"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img223235.jpg" alt="鸟巢一角"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221903.jpg" alt="水立方一角"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img221941.jpg" alt="国家体育馆"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222001.jpg" alt="水立方一角"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img224046.jpg" alt="向着冬奥奔跑！"></p><p>来看鸟巢水立方的人明显较之其他地方的少，阴雨绵绵下的鸟巢少了运动的活力，添了几分忧郁的气质。玲珑塔上北京2022冬奥会的倒计时预示着3个月后这里又将迎来世界体育的目光。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222022.jpg" alt="圆明园-凤麟洲遗址"></p><p>圆明园上次就来过一次，这次去就随着人群走马观花了。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222040.jpg" alt="残存的西洋楼"></p><p>这次来北京的初衷就打算把颐和园和长城看了，结果到了颐和园才发现要提前预定门票，哎，没办法，以后有机会再来吧。圆明园旁边就是清华北大——中国两所巨无霸高校，一路上遇到的可能全是学霸…</p><p>计划里没了颐和园，之后去逛了逛牛街，这是条清真小吃街，几家名小吃门前排队的人也很多。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222122.jpg" alt="洪记小吃店"></p><p>最后回到鸟巢，在附近电影院里看了《长津湖》，这部主旋律电影优点很多，但是3个小时的电影剧情不连贯，也少有起伏。但总体来说还是推荐的。希望之后能多拍这种共和国历史重要节点的历史战争片。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img224442.jpg" alt="向志愿军致敬"></p><p>电影看完就11点了，第二天行程结束。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222214.jpg" alt="午夜的奥林匹克公园"></p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>由于前两天的高负荷奔走，第三天9点才从旅馆动身出发，一路上公交车、地铁、火车，到八达岭总共花了3个小时，本来时间都不太够了。到了八达岭脚下看见只见蛇头不见蛇尾的队伍心就凉了一半了，等坐缆车上了长城彻底绝望了。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222303.jpg" alt="朦胧的长城"></p><p>好家伙，百闻不如一见，果真是人海，一点不夸张。</p><p>我的感受是：长城应该像故宫、颐和园那样采取提前预约制，再加上长城本身只有极为狭窄的通道，这种摩肩擦踵的游览确实十分糟心。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222320.jpg" alt="人也忒多了"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img222344.jpg" alt="长城打卡"></p><p>然而我还是低估了，刚走一会儿又开始下雨，然后大部分游客又顺着原路返回，emmmmm，回去也堵上了，我真的服了。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img224619.jpg" alt="“雨”城"></p><p>此时应该安慰自己，至少还是“到此一游”了😭</p><p>回看旅行前的计划，没有完全实现，也没有很多从底向上细看北京城的机会。主要原因还是行程安排的太满，有得必有失，下次旅行总结经验。国庆北京行总体来说还是很不错的，很多地方都是第一次去，惊叹于故宫的红墙金瓦，震撼于长城的庄严磅礴，向往于CBD的高楼大厦；不知道下次到北京又是什么时候，希望能把这次的遗憾补足。</p>]]></content>
    
    
    <summary type="html">来保定工作有差不多仨月了，国庆是一年里难得的长假，去北京走走吧。</summary>
    
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="旅游" scheme="https://yangfanjack.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>摄影入门</title>
    <link href="https://yangfanjack.github.io/2021/10/10/%E6%91%84%E5%BD%B1%E5%85%A5%E9%97%A8/"/>
    <id>https://yangfanjack.github.io/2021/10/10/%E6%91%84%E5%BD%B1%E5%85%A5%E9%97%A8/</id>
    <published>2021-10-10T10:19:17.000Z</published>
    <updated>2022-12-22T02:37:28.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="曝光"><a href="#曝光" class="headerlink" title="曝光"></a>曝光</h2><ul><li>摄影就是用光线绘图，摄影是光与影的艺术！</li><li>曝光：胶片、底片、数码时代的CMOS通过光线产生影像的过程</li><li>曝光不足 &amp; 曝光过度(过曝)</li><li>曝光正常：亮有细节不过曝，暗有层次不漆黑</li><li>摄影的第一步是<strong>控制曝光</strong></li></ul><h2 id="光圈（f）"><a href="#光圈（f）" class="headerlink" title="光圈（f）"></a>光圈（f）</h2><ul><li>光圈用来控制进光量</li><li>f3.5、f5.6、f8、f11、f16、f22：数值和光圈大小成反比</li><li>大光圈：<strong>景深浅</strong>，主体清晰背景模糊</li><li>小光圈：<strong>景深长</strong>、主体和背景都很清晰</li></ul><h2 id="快门（以秒为单位）"><a href="#快门（以秒为单位）" class="headerlink" title="快门（以秒为单位）"></a>快门（以秒为单位）</h2><ul><li>用来控制光线进来的时间，时间越长曝光越多</li><li><strong>高速快门</strong>凝固瞬间</li><li><strong>低速快门</strong>记录轨迹（必须用三脚架）</li></ul><h2 id="感光度ISO"><a href="#感光度ISO" class="headerlink" title="感光度ISO"></a>感光度ISO</h2><ul><li>底片/胶片/CMOS感光元件 等硬件的感官能力</li><li>ISO越高，感光能力越强，画质越粗糙，噪点越多；反之亦然</li><li>但是：<strong>一张有噪点的照片比一张拍虚了的照片有价值</strong></li><li>当光圈和快门没有办法时，适当提高ISO增加亮度</li></ul><h2 id="重点：光圈、快门、ISO调节优先级：光圈-gt-快门-gt-ISO"><a href="#重点：光圈、快门、ISO调节优先级：光圈-gt-快门-gt-ISO" class="headerlink" title="重点：光圈、快门、ISO调节优先级：光圈 &gt; 快门 &gt; ISO"></a>重点：光圈、快门、ISO调节优先级：光圈 &gt; 快门 &gt; ISO</h2><ul><li><strong>暗处：</strong>首先增大光圈，如果不够再适当延长快门时间，如果此时光线还是不足，那么再调节ISO，增大感光能力</li><li><strong>亮处：</strong>首先缩小ISO，降低感光能力，如果还是太亮，就缩短快门时间，如果还是不行，再缩小光圈。</li></ul><h2 id="拍摄模式"><a href="#拍摄模式" class="headerlink" title="拍摄模式"></a>拍摄模式</h2><ul><li>拍摄模式种类：<ul><li><strong>M</strong>：手动曝光模式</li><li><strong>A（AV）</strong>：光圈优先模式</li><li><strong>S（TV）</strong>：快门优先模式</li><li><strong>P</strong>：程序自动模式（傻瓜模式）</li></ul></li><li>光圈、快门、ISO的组合关系<ul><li>光圈、快门、ISO共同决定了一张影像的曝光</li></ul></li></ul><h2 id="相机镜头"><a href="#相机镜头" class="headerlink" title="相机镜头"></a>相机镜头</h2><ul><li><p>定焦 &amp; 变焦</p><ul><li>定焦镜头：成像质量好，方便性差</li><li>变焦镜头：成像质量比定焦镜头略差，方便性好</li></ul></li><li><p><strong>焦距：</strong>决定了镜头能看到的范围大小</p><p>镜头越短看的范围广，镜头长看的范围窄</p><ul><li>广角：&lt;24mm，景深大</li><li>标准：≈55mm</li><li>中长焦：70-135mm</li><li>长焦：&gt;135mm，景深浅</li></ul><p>焦距越长，景深越浅；焦距越短，景深越深。</p></li><li><p><strong>对焦模式</strong></p><ul><li>手动对焦模式（MF）：<ul><li>变焦环：伸缩镜头，达到变焦目的</li><li>对焦环：手动对焦时用</li></ul></li><li>自动对焦模式（AF）：<ul><li>尼康：AF-S、AF-C、AF-A</li><li>佳能：ONE SHOT、AI SERVO、AI FOCUS</li></ul></li></ul></li><li><p><strong>对焦点的作用</strong></p><ul><li>单点对焦：一般用于拍摄静止物体（拍一个花瓶）</li><li>区域对焦：一般用于拍摄不规则运动的物体（拍一群鸟，一群人）</li></ul></li></ul><h2 id="白平衡"><a href="#白平衡" class="headerlink" title="白平衡"></a>白平衡</h2><ul><li>白平衡能对光线颜色进行补偿</li><li><strong>AWB：</strong>自动白平衡，类似人的眼睛，在不同光线下相机自动识别定义一个比较合适的白平衡保证拍摄物体尽可能地呈现自身的颜色</li><li>AWB只在一定的色温范围内是准确的</li><li>预设的几种白平衡可以选择集中预设的白平衡选项</li><li>用户自定义可以更加的自由（<strong>重点！重点！重点！</strong>）<ul><li>色温K值越大越冷，反之亦然；<strong>白平衡和色温恰好相反</strong>。但是很多人是把色温和白平衡弄反了</li><li>其实我们利用白平衡欺骗相机，你可以设置一个高的色温值，然后相机就会认为此时的画面色温很高，就会往画面中加入暖色调来中和</li></ul></li></ul><h2 id="光"><a href="#光" class="headerlink" title="光"></a>光</h2><ul><li><p><strong>光质：</strong></p><ul><li>直射光（硬光）：晴天，明暗反差大</li><li>散射光（柔光）：阴天，明暗反差小</li></ul></li><li><p><strong>光位：</strong></p><p>光位就是光源相对于相机和被拍摄物体的位置</p><ul><li>顺光：光线来自被摄物的正面；立体感差、缺乏明暗变化</li><li>侧光：光线来自被摄物侧面45-90°；立体感强、富有戏剧性</li><li>逆光：光线来自被摄物后面；用来塑造轮廓</li><li>顶光：光线来自被摄物正上方；阴影浓重，用来突出局部</li><li>底光：光线来自被摄物下方；使用较少，因为很恐怖，多和其他几种混合使用</li></ul></li><li><p><strong>光比：</strong></p><ul><li>光比是被摄物体主要亮部&amp;暗部受光量的差别</li><li>可以通过人造灯光进行<strong>补光</strong>来改变环境光造成的光比</li></ul></li></ul><h2 id="景别"><a href="#景别" class="headerlink" title="景别"></a>景别</h2><ul><li>远取其势，近取其神</li></ul><h2 id="视角"><a href="#视角" class="headerlink" title="视角"></a>视角</h2><ul><li>视角：景物水平线和相机所处的水平线不尽相同</li><li>高视角：适合宏大、宽广、遥远的大场面</li><li>低视角：适合表现主体（人物、建筑）的高大</li><li>平视角：最接近人眼，很稳，适合平淡的感觉</li></ul><h2 id="空间构图-amp-平面构图"><a href="#空间构图-amp-平面构图" class="headerlink" title="空间构图 &amp; 平面构图"></a>空间构图 &amp; 平面构图</h2><p>一定要主次分明</p><ul><li><p><strong>透视：</strong></p><p>用<strong>线条</strong> 或 <strong>影调</strong>在<strong>平面上表现立体空间</strong>的方法</p><p>近暗远亮、近大远小、立体图阴影、道路的走向引导视觉、近深远浅</p></li><li><p><strong>前景：</strong></p><p>作用：加强气氛、增强画面空间层次感、均衡画面</p></li><li><p><strong>背景：</strong></p><p>作用：突出主体、丰富主体的内涵、</p></li><li><p><strong>平面布局：</strong></p><p>平面构图就是如何把人、景、物安排在画面单中以获得最佳布局的方法，重点无非就是：<strong>点、线、面</strong></p><p><strong>黄金分割点</strong>：九宫格的中间四个交点就是黄金分割点（长宽各3等分）</p><p><strong>平行线、X交叉线、不规则线条</strong>：线条形式美、空间视觉衍生</p></li><li><p><strong>构图方法：</strong></p><ul><li>构图从观察和模仿开始</li><li>把经典的构图长记于胸</li><li>让构图方法自己跳出来</li><li>打破陈规寻求突破</li><li>摄影开心就好，不要纠结本末倒置</li></ul></li></ul><h2 id="常见题材的摄影技巧"><a href="#常见题材的摄影技巧" class="headerlink" title="常见题材的摄影技巧"></a>常见题材的摄影技巧</h2><ul><li><strong>日出/日落</strong>：（日出：更蓝一些；日落：更暖一些）<ul><li>拍摄<strong>地点</strong>：开阔地、地势高处</li><li>拍摄<strong>时间</strong>：不同季节、不同地点不同；春秋两季更好</li><li>如何<strong>测光</strong>：测中等亮度的位置</li><li>注意<strong>构图</strong>：将太阳放在画面的趣味点上，并注意前景的选择和处理；前景选择小树、小草、树枝、礁石等能增强纵深效果。</li></ul></li><li><strong>瀑布</strong>：（<strong>高速快门</strong>凝结飞溅水花；<strong>慢速快门</strong>拍摄雾状水流）<ul><li>合适天气：更长时间按下快门</li><li>滤镜（减光镜）：使得快门可延长</li><li>低ISO：减少噪点，提高清晰度，适应快门时间延长</li><li>构图动静结合：静石头 和 雾化动感水流</li></ul></li><li><strong>烟花</strong><ul><li>使用小光圈，景深大</li><li>手动对焦</li><li>注意按下快门的时机</li><li>使用三脚架保证稳定记录完美轨迹</li><li>选择顺风位置：烟花的烟吹走保证画面干净</li><li>使用湖面倒影 &amp; 城市夜景做衬托，避免画面单调</li></ul></li></ul><h2 id="夜景人像拍摄"><a href="#夜景人像拍摄" class="headerlink" title="夜景人像拍摄"></a>夜景人像拍摄</h2><ul><li>闪光灯（内置/外置闪光灯）<ul><li>逆光补光</li><li>夜景补光</li></ul></li><li>方法：<ul><li>控制好环境的光线（调整光圈和ISO，快门较快按下）</li><li>闪光灯打亮主体</li></ul></li></ul><h2 id="夜景风光拍摄"><a href="#夜景风光拍摄" class="headerlink" title="夜景风光拍摄"></a>夜景风光拍摄</h2><ul><li>时间：晴朗</li><li>附件：三脚架、快门线、手电筒、遮光板</li><li>夜景一般要深景深，用小光圈。ISO调小。快门曝光时间较长。</li><li>光斑怎么拍？浅景深，大光圈，虚焦</li></ul><h2 id="滤镜"><a href="#滤镜" class="headerlink" title="滤镜"></a>滤镜</h2><ul><li>保护镜：防污、防刮、防潮</li><li>UV镜：紫外线滤光镜，提供真实、艳丽画面</li><li>偏振镜：消除镜面反光，压暗天空表现蓝天白云，同时一定程度减光</li><li>ND中灰密度镜：减光，防止过曝，适合在光照强烈的白天长曝光作品</li><li>硬边GND中灰渐变镜：压低天空亮度，平衡天空和地面海洋的曝光</li><li>硬边GND中灰渐变镜：明暗渐变不明显</li><li>RGND反向中灰渐变镜：越靠中间越黑，有效阻挡画面中央的高光物体</li><li>彩色滤镜：用于改变画面颜色，已被数码时代的强大后期取代</li><li>冷暖滤镜：矫正白平衡</li><li>近摄镜：缩短镜头对焦距离，方法被拍摄物体</li><li>黑白滤镜：黄、绿、橙、红</li></ul><h2 id="人像摄影常用方法："><a href="#人像摄影常用方法：" class="headerlink" title="人像摄影常用方法："></a>人像摄影常用方法：</h2><ul><li><p><strong>顺光和测光使用方法</strong></p><p><strong>顺光：</strong>整个景物均匀受光，没有光影效果，缺乏立体感。例：证件照</p><p><strong>测光：</strong>景物显得层次丰富，立体感强，但拍摄时要控制光比的变化</p></li><li><p><strong>逆光和漫射光使用方法</strong></p><p><strong>逆光：</strong>景物有一道明亮的轮廓线，产生强烈的立体感，一定要注意补光（反光板、外置闪光灯、 内置闪光灯）的问题</p><p><strong>漫射光：</strong>景物周围都有光线照射到，光线比较柔和，景物没有明显的亮度和暗部，反差柔和，适合拍摄集体照。注意和顺光的区别：漫射光一般是在阴天/多云天气形成的，顺光是将更多的光照射正面。</p></li><li><p><strong>人像摄影构图</strong></p><p>主要是要注意两个方面：主体的位置，主体在画面中的比例</p><p>三种主要构图法：</p><ul><li>黄金分割点构图法：九宫格</li><li>中心构图法：拍大头照，人像</li><li>吊角构图法：将景物放在画面中的某个角落</li></ul><p>几种表现形式：</p><ul><li>虚实对比</li><li>大小对比</li><li>远近对比</li><li>色彩对比</li><li>剪影表示形式：逆光注重轮廓</li></ul></li></ul><h2 id="外景拍摄中不同拍摄角度的运用"><a href="#外景拍摄中不同拍摄角度的运用" class="headerlink" title="外景拍摄中不同拍摄角度的运用"></a>外景拍摄中不同拍摄角度的运用</h2><ul><li><strong>平拍：</strong>自然，客观，平等，亲切</li><li><strong>俯拍：</strong>低矮，身体压缩，额头夸大下巴窄小。自拍的时候一般都是俯拍</li><li><strong>仰拍：</strong>高大身体修长，腿长身短，高大挺拔</li></ul><h2 id="摄影的影调"><a href="#摄影的影调" class="headerlink" title="摄影的影调"></a>摄影的影调</h2><p>什么是影调？</p><p>线条是一张作品的骨架，而影调是一张作品的血与肉</p><p>定义：在不同强弱的光线照射下，被摄物体产生不同的明暗反差</p><p>分类：</p><ul><li><strong>高调：</strong>浅色背景，正光/顺光，光比不大于1：1.5，浅灰色背景将人和背景分离，一般以半身特写居多，背景亮度高于主体1.5倍数</li><li><strong>低调：</strong>背景服装以深色为主，侧光/逆光，光比大于1：3.5，用轮廓灯让主体与背景分离</li><li><strong>中间调：</strong>间于上面两个之间</li></ul>]]></content>
    
    
    <summary type="html">按下快门记录生活。</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="摄影" scheme="https://yangfanjack.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>工作流Activiti</title>
    <link href="https://yangfanjack.github.io/2021/09/23/%E5%B7%A5%E4%BD%9C%E6%B5%81Activiti/"/>
    <id>https://yangfanjack.github.io/2021/09/23/%E5%B7%A5%E4%BD%9C%E6%B5%81Activiti/</id>
    <published>2021-09-23T11:38:06.000Z</published>
    <updated>2022-12-22T02:37:28.688Z</updated>
    
    <content type="html"><![CDATA[<p>工作流的作用是：对系统的业务流程进行自动化管理。一个软件的系统核心是系统的业务流程，工作流只是协助进行业务流程管理。工作流能更好的管理业务流程，提高系统的可扩展性。</p><p>工作流的具体应用：</p><ul><li>关键业务流程</li><li>行政管理类</li><li>财务相关类</li><li>客户服务类</li><li>特殊服务类 </li></ul><p>在没有专门的<strong>工作流引擎</strong>前，要实现流程控制，通常的做法是采用状态字段的值类跟踪流程的变化情况。这样不用角色的用户，通过状态字段的取值来决定记录是否显示。但是这样做和业务代码的耦合性特别高。</p><h2 id="Activiti7概述"><a href="#Activiti7概述" class="headerlink" title="Activiti7概述"></a>Activiti7概述</h2><p>Activiti是一个工作流引擎，activiti可以将业务系统中复杂的业务流程抽取出来，使用专门的建模语言BPMN2.0进行定义，业务流程按照预先定义的流程进行执行。实现了系统的流程由activiti进行管理，<strong>减少业务系统由于流程变更进行系统升级改造的工作量</strong>，从而提高系统的健壮性，同时减少了系统开发维护成本。</p><p><strong>BPM</strong>：Business Process Management业务流程管理</p><p><strong>BPM软件</strong>：对企业内部及外部的业务流程的整个生命周期进行建模、自动化、管理监控和优化，使企业成本降低，利润得以大幅提升。</p><p><strong>BPMN</strong>：Business Process Model And Notation业务流程模型和符号，是由BPMI开发的一套标准的业务流程建模符号，使用BPMN提供的符号可以创建业务流程。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210923203846548.png" alt="image-20210923203846548"></p><p>BPMN图形其实是通过xml表示的业务逻辑，上面的.bpmn文件使用文本编辑器打开后是一个xml文件</p><h2 id="Activiti的使用"><a href="#Activiti的使用" class="headerlink" title="Activiti的使用"></a>Activiti的使用</h2><h3 id="Activiti的使用步骤"><a href="#Activiti的使用步骤" class="headerlink" title="Activiti的使用步骤"></a>Activiti的使用步骤</h3><p><strong>部署activiti</strong></p><p>Activiti是一个工作流引擎，业务系统访问activit的api接口，就能方便的操作流程相关数据，这样就可以把工作流环境与业务系统的环境集成在一起。</p><p><strong>流程定义</strong></p><p>使用activiti流程建模工具（activiti-designer）或者通过手写xml文件来定义业务流程（.bpmn文件）</p><p><strong>流程定义部署</strong></p><p>使用activiti提供的api把流程定义内容存储起来，在Activiti执行过程中可以查询定义的内容</p><p>Activiti执行把流程定义存储在数据库中</p><p><strong>启动一个流程实例</strong></p><p>启动一个流程实例表示开始一次业务流程的运行</p><p>For Example：在员工请假流程定义部署完成后，如果张三要请假就可以启动一个流程实例，如果李四要请假也启动一个流程实例，两个流程的执行互不干扰</p><p><strong>用户查询待办任务Task</strong></p><p>因为系统的业务流程已经交给了activiti管理，通过activiti就可以查询当前流程执行到哪了，当前用户需要办理什么任务了，这些东西activiti都帮我管理了</p><p><strong>用户办理任务</strong></p><p>用户查询待办任务后，就可以办理某个任务了，如果这个任务办理完成后还需要其他用户办理，比如：采购单创建后由部门经理审核，这些过程也是由activiti帮我们完成了。</p><p><strong>流程结束</strong></p><p>当任务办理完成后没有下一个任务节点了，这个流程实例就完成了</p><h3 id="Activiti环境"><a href="#Activiti环境" class="headerlink" title="Activiti环境"></a>Activiti环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.activiti/activiti-engine --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Activiti运行需要有数据库的支持，支持的数据库有：h2，<strong>mysql</strong>，oracle，postgres等。</p><h3 id="在IDEA中创建一个Activiti的Maven项目框架"><a href="#在IDEA中创建一个Activiti的Maven项目框架" class="headerlink" title="在IDEA中创建一个Activiti的Maven项目框架"></a>在IDEA中创建一个Activiti的Maven项目框架</h3><ul><li>导入Maven依赖包：<ul><li>Activiti相关的包：activiti-engine包，activiti依赖的jar包，activiti依赖的spring包</li><li>mysql的驱动包：mysql的数据库驱动包</li><li>mybatis的包：</li><li>log4j的包</li><li>数据库连接池的包：第三方数据库连接池包dbcp</li><li>单元测试包junit   </li></ul></li></ul>]]></content>
    
    
    <summary type="html">实际软件生产开发中，了解业务需求是非常重要的，在代码中可以使用工作流将业务需求的整个流程独立于代码外进行自动化的执行管理。</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Web" scheme="https://yangfanjack.github.io/tags/Web/"/>
    
    <category term="Activiti" scheme="https://yangfanjack.github.io/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>shiro权限管理</title>
    <link href="https://yangfanjack.github.io/2021/08/12/shiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://yangfanjack.github.io/2021/08/12/shiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
    <published>2021-08-12T13:30:04.000Z</published>
    <updated>2022-12-22T02:37:28.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shiro权限管理"><a href="#shiro权限管理" class="headerlink" title="shiro权限管理"></a>shiro权限管理</h1><p>Shiro的核心就是用来完成权限管理的。权限管理包括用户身份认证和授权两部分，简称认证授权。</p><p>只要有人参与的系统都需要进行权限管理。</p><h2 id="什么是Shiro？"><a href="#什么是Shiro？" class="headerlink" title="什么是Shiro？"></a>什么是Shiro？</h2><p>Shiro是apache旗下的一个开源框架，它将软件系统的安全认认证相关的功能抽取出来，实现用户身份认证、权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521225542.png" alt="Shiro核心架构图"></p><ul><li><strong>Security Manager：</strong>包含Authenticator认证器，Authorizer授权器，Session Manager会话管理器，Cache Manager缓存管理器，Session DAO会话数据访问对象，Pluggable Realms可插拔域</li><li><strong>cryptography：</strong>密码器（sha256，md5）</li><li><strong>subject：</strong>主体（Shiro集成的东西，宿主）</li></ul><h2 id="Shiro中用户的身份认证"><a href="#Shiro中用户的身份认证" class="headerlink" title="Shiro中用户的身份认证"></a>Shiro中用户的身份认证</h2><ul><li><p><strong>subject：主体</strong></p><p>访问系统的用户，主体可以是用户、程序等，进行认证都称为主体。主体在进行身份认证时需要身份信息Principal和凭证信息credential</p></li><li><p><strong>Principal：身份信息</strong></p><p>身份认证的标识，如用户名、手机号、邮箱地址等。一个主体可以有多个身份信息，但是只能有一个主身份信息。</p></li><li><p><strong>credential：凭证信息</strong></p><p>只有主体自己知道的安全信息，如密码、证书等</p></li></ul><p><strong>认证流程：</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521225641.png" alt="image-20210730101307429"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[users]</span><br><span class="line">zhangsan&#x3D;123</span><br><span class="line">lisi&#x3D;1234</span><br><span class="line">wangwu&#x3D;12345</span><br><span class="line">zhaoliu&#x3D;123456</span><br><span class="line">public class TestAuhenticator</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建安全管理器对象</span><br><span class="line">        DefaultSecurityManager securityManager &#x3D; new DefaultSecurityManager();</span><br><span class="line">        &#x2F;&#x2F;给安全管理器设置realm</span><br><span class="line">        securityManager.setRealm(new IniRealm(&quot;classpath:shiro.ini&quot;));</span><br><span class="line">        &#x2F;&#x2F;SecurityUtils安全工具类</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        &#x2F;&#x2F;拿到主体subject</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        &#x2F;&#x2F;模拟登录，创建令牌</span><br><span class="line">        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line">        &#x2F;&#x2F;用户登录</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，用户名不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码剖析</strong></p><ul><li><p>最终执行用户名校验，在 SimpleAccountRealm类（继承于AuthorizingRealm） doGetAuthenticationInfo() 这个方法中完成用户名校验：查看是否有这个用户</p></li><li><p>最终密码的校验，在 AuthenticatingRealm类 assertCredentialsMath() 这个方法中完成密码校验的</p></li><li><p>通过剖析源码可知，如果要把Realm放在数据库中，只需要继承AuthorizingRealm类，然后重写 doGetAuthenticationInfo() 方法即可</p></li><li><p>几个重要Realm类的继承关系图：</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521225652.png" alt="image-20210731093920423"></p></li><li><p>总结：</p><p>AuthenticatingRealm中有认证方法：doGetAuthenticationInfo()</p><p>AuthorizingRealm中有授权方法：doGetAuthorizationInfo()</p><p>所以，当实际上操作数据库时，我们自定义的Realm类实际上是继承AuthorizingRealm类，然后重写 doGetAuthenticationInfo() 和 doGetAuthorizationInfo() 两个方法。</p></li></ul><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class CustomRealm extends AuthorizingRealm &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 授权</span><br><span class="line">     * @param principalCollection</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 认证</span><br><span class="line">     * @param authenticationToken</span><br><span class="line">     * @return</span><br><span class="line">     * @throws AuthenticationException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        String principal &#x3D; (String) authenticationToken.getPrincipal();</span><br><span class="line">        String credentials &#x3D; new String((char[]) authenticationToken.getCredentials());</span><br><span class="line">        System.out.println(&quot;************************************&quot;);</span><br><span class="line">        System.out.println(principal);</span><br><span class="line">        System.out.println(credentials);</span><br><span class="line">        if(&quot;zhangsan&quot;.equals(principal))&#123;</span><br><span class="line">            return new SimpleAuthenticationInfo(&quot;zhangsan&quot;,&quot;123&quot;,this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class TestAuhenticator</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建安全管理器对象</span><br><span class="line">        DefaultSecurityManager securityManager &#x3D; new DefaultSecurityManager();</span><br><span class="line">        &#x2F;&#x2F;给安全管理器设置realm</span><br><span class="line">&#x2F;&#x2F;        securityManager.setRealm(new IniRealm(&quot;classpath:shiro.ini&quot;));</span><br><span class="line">        securityManager.setRealm(new CustomRealm());</span><br><span class="line">        &#x2F;&#x2F;SecurityUtils安全工具类</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        &#x2F;&#x2F;拿到主体subject</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        &#x2F;&#x2F;模拟登录，创建令牌</span><br><span class="line">        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line">        &#x2F;&#x2F;用户登录</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，用户名不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h2><p><strong>MD5算法</strong></p><ul><li>一般用来加密 &amp; 签名</li><li>MD5加密不可逆</li><li>MD5算法生成结果始终是一个16进、32位长度的字符串</li><li>一般在后端代码的业务层完成加密操作如果要进行用户名</li><li>使用MD5算法，输入只会有唯一输出。所以为了防止有人恶意穷举试探密码，我们需要给密码加盐后再MD5机密</li></ul><p><strong>Shiro中的MD5加密</strong></p><p>直接看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class CustomRealm extends AuthorizingRealm &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 授权</span><br><span class="line">     * @param principalCollection</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 认证</span><br><span class="line">     * @param authenticationToken</span><br><span class="line">     * @return</span><br><span class="line">     * @throws AuthenticationException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        String principal &#x3D; (String) authenticationToken.getPrincipal();</span><br><span class="line">        String credentials &#x3D; new String((char[]) authenticationToken.getCredentials());</span><br><span class="line">        System.out.println(&quot;************************************&quot;);</span><br><span class="line">        System.out.println(principal);</span><br><span class="line">        System.out.println(credentials);</span><br><span class="line">        if(&quot;zhangsan&quot;.equals(principal))&#123;</span><br><span class="line">            return new SimpleAuthenticationInfo(&quot;zhangsan&quot;,&quot;123&quot;, ByteSource.Util.bytes(&quot;abc*&quot;),this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class TestAuhenticator</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建安全管理器对象</span><br><span class="line">        DefaultSecurityManager securityManager &#x3D; new DefaultSecurityManager();</span><br><span class="line">        &#x2F;&#x2F;新建自定义realm对象</span><br><span class="line">        CustomRealm realm &#x3D; new CustomRealm();</span><br><span class="line">        &#x2F;&#x2F;设置realm使用hash凭证检测器</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);</span><br><span class="line">        credentialsMatcher.setHashIterations(1024);&#x2F;&#x2F;设置加盐散列次数</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;给安全管理器设置realm</span><br><span class="line">&#x2F;&#x2F;        securityManager.setRealm(new IniRealm(&quot;classpath:shiro.ini&quot;));</span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line">        &#x2F;&#x2F;SecurityUtils安全工具类</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        &#x2F;&#x2F;拿到主体subject</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        &#x2F;&#x2F;模拟登录，创建令牌</span><br><span class="line">        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line">        &#x2F;&#x2F;用户登录</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，用户名不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro中的授权操作"><a href="#Shiro中的授权操作" class="headerlink" title="Shiro中的授权操作"></a>Shiro中的授权操作</h2><p><strong>关键对象</strong></p><ul><li><p>Who对What进行How操作</p></li><li><p>Who是访问资源的主体，What是系统的资源，How是针对资源的操作</p></li><li><p>授权流程：</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521225715.png" alt="image-20210801100955232"></p></li><li><p>授权方式：</p><ul><li><p>基于角色的访问控制：Role-Based Access Control</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(subject.hasRole(&quot;admin&quot;))&#123;</span><br><span class="line">    &#x2F;&#x2F;操作资源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于资源的访问控制：Resource-Based Access Control</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(subject.isPermission(&quot;user:create:*&quot;))&#123;</span><br><span class="line">    &#x2F;&#x2F;操作资源</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">权限字符串：资源标识符:操作:资源实例标识符</span><br><span class="line">* 用户创建权限：user:create:*</span><br><span class="line">* 用户实例001修改的权限：user:create:001</span><br><span class="line">* 用户实例001的所有权限：user:*:001</span><br><span class="line">**&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Shiro中的授权实现"><a href="#Shiro中的授权实现" class="headerlink" title="Shiro中的授权实现"></a>Shiro中的授权实现</h2></li></ul></li></ul><p><strong>编程式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">if(subject.hasRole(&quot;admin&quot;))&#123;</span><br><span class="line">    &#x2F;&#x2F;有权限</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    &#x2F;&#x2F;无权限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequireRoles(&quot;admin&quot;)</span><br><span class="line">public void hello()&#123;</span><br><span class="line">    &#x2F;&#x2F;有权限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSP标签式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:hasRole name&#x3D;&quot;admin&quot;&gt;</span><br><span class="line">    &lt;!--有权限--&gt;</span><br><span class="line">&lt;&#x2F;shiro:hasRole&gt;</span><br><span class="line">&lt;!--注意：Thymeleaf中使用shiro需要额外集成--&gt;</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">public class CustomRealm extends AuthorizingRealm &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 授权</span><br><span class="line">     * @param principalCollection</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Authorization&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        String primaryPrincipal &#x3D; (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(primaryPrincipal);</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo &#x3D; new SimpleAuthorizationInfo();</span><br><span class="line">        simpleAuthorizationInfo.addRole(&quot;admin&quot;);</span><br><span class="line">        simpleAuthorizationInfo.addRole(&quot;user&quot;);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(&quot;admin:create:*&quot;);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(&quot;user:update:01&quot;);</span><br><span class="line">        return simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 认证</span><br><span class="line">     * @param authenticationToken</span><br><span class="line">     * @return</span><br><span class="line">     * @throws AuthenticationException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Authentication&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        String principal &#x3D; (String) authenticationToken.getPrincipal();</span><br><span class="line">        String credentials &#x3D; new String((char[]) authenticationToken.getCredentials());</span><br><span class="line">        System.out.println(&quot;************************************&quot;);</span><br><span class="line">        System.out.println(principal);</span><br><span class="line">        System.out.println(credentials);</span><br><span class="line">        if(&quot;zhangsan&quot;.equals(principal))&#123;</span><br><span class="line">            return new SimpleAuthenticationInfo(principal,&quot;44610a20602341c591e0c9b5ecf19ff3&quot;, ByteSource.Util.bytes(&quot;abc*&quot;),this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class TestAuthenticator</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建安全管理器对象</span><br><span class="line">        DefaultSecurityManager securityManager &#x3D; new DefaultSecurityManager();</span><br><span class="line">        &#x2F;&#x2F;新建自定义realm对象</span><br><span class="line">        CustomRealm realm &#x3D; new CustomRealm();</span><br><span class="line">        &#x2F;&#x2F;设置realm使用hash凭证检测器</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);</span><br><span class="line">        credentialsMatcher.setHashIterations(1024);&#x2F;&#x2F;设置加盐散列次数</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;给安全管理器设置realm</span><br><span class="line">&#x2F;&#x2F;        securityManager.setRealm(new IniRealm(&quot;classpath:shiro.ini&quot;));</span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line">        &#x2F;&#x2F;SecurityUtils安全工具类</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        &#x2F;&#x2F;拿到主体subject</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        &#x2F;&#x2F;模拟登录，创建令牌</span><br><span class="line">        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line">        &#x2F;&#x2F;用户登录</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;Authentication Status:&quot;+subject.isAuthenticated());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，用户名不存在！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;进行授权操作</span><br><span class="line">        if(subject.isAuthenticated())&#123;</span><br><span class="line">            System.out.println(subject.hasRole(&quot;user&quot;));</span><br><span class="line">            System.out.println(subject.hasAllRoles(Arrays.asList(&quot;admin&quot;,&quot;user&quot;)));</span><br><span class="line">            System.out.println(subject.isPermitted(&quot;admin:create:*&quot;));</span><br><span class="line">            System.out.println(subject.isPermitted(&quot;user:update:02&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限模型"><a href="#权限模型" class="headerlink" title="权限模型"></a>权限模型</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521225741.png" alt="image-20210802215244502"></p><h2 id="Shiro和SSM的整合"><a href="#Shiro和SSM的整合" class="headerlink" title="Shiro和SSM的整合"></a>Shiro和SSM的整合</h2><p><strong>整合思路</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521225748.png" alt="image-20210802191222968"></p>]]></content>
    
    
    <summary type="html">工作的一个练手项目要做一个权限管理系统，说实话以前做的系统都没有考虑到系统的权限管理，身份认证和授权都是最简单的比对和跳转控制来实现的。实际上可以通过现成的权限框架Shiro来实现权限管理。</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Shiro" scheme="https://yangfanjack.github.io/tags/Shiro/"/>
    
    <category term="权限" scheme="https://yangfanjack.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>毕业九寨三人游</title>
    <link href="https://yangfanjack.github.io/2021/07/08/%E6%AF%95%E4%B8%9A%E4%B9%9D%E5%AF%A8%E4%B8%89%E4%BA%BA%E6%B8%B8/"/>
    <id>https://yangfanjack.github.io/2021/07/08/%E6%AF%95%E4%B8%9A%E4%B9%9D%E5%AF%A8%E4%B8%89%E4%BA%BA%E6%B8%B8/</id>
    <published>2021-07-08T09:38:00.000Z</published>
    <updated>2022-12-22T02:37:28.672Z</updated>
    
    <content type="html"><![CDATA[<p>6月9号本科毕设答辩后就赶回家了，休息一个月就要开始工作啦。和高中同学联系打算出去玩玩儿。综合考虑后打算到九寨-黄龙-若尔盖一线玩玩儿，我的博客不仅仅是技术博客，旅行游记是一个不错的题材。</p><h2 id="总体计划"><a href="#总体计划" class="headerlink" title="总体计划"></a>总体计划</h2><p>本次前往九寨沟的行程有几个计划：报个旅游团、坐班车去然后租车自驾、全程包车、坐班车去然后包车等等计划都有想过，虽然三个同学都有拿到驾照，但是平时都在学校学习，开车的机会并不多，再加上当前绵九高速正在施工，从江油前往九寨沟的路并不好走甚至有点儿危险；在论如果跟团游的话不是很舒服，旅行安排的灵活性就不足。最后选择自行做班车到九寨沟，然后在九寨沟当地联系一个司机包车游览九寨沟、黄龙、若尔盖草原一线。九寨沟是没有铁路的，当然，你可以选择做飞机前往，但是因为旅游专线，机票价格十分高昂。</p><p>这个司机也是在网上浏览一个2017年的游客写的游记，其中推荐了这个九寨沟当地刘师傅。先说一下旅行的总体安排。整个旅行大概有6天时间：</p><ul><li>第一天：从江油做班车到九寨沟，晚上就住进沟内</li><li>第二天：游览九寨沟，看九寨千古情演出，住在九寨沟附近</li><li>第三天：从九寨沟经雪宝顶、川主寺一线前往黄龙，游览黄龙，住在松潘</li><li>第四天：从松潘出发前往若尔盖大草原，体验骑马，黄河九曲第一湾看日落，住在唐克</li><li>第五天：从唐克出发，经瓦切、红原一线返回松潘，住在松潘</li><li>第六天：从松潘搭班车返回江油</li></ul><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img140902095424_589830_s448u6mts1zc.jpg" alt="九寨沟-黄龙-若尔盖一线" style="zoom: 80%;" /><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>旅行前几天，最好准备些零食干粮、防晒工具（喷雾、冰袖等）、防寒衣物、晕车药。</p><p>当天一大早，从家出发前往汽车站和一个同学会合同乘班车从江油出发，另一个同学从广元出发。六块钱一颗的晕车药属实厉害，抖了7个小时的山路都没晕车。下午5点，三人会合于九寨沟。有意思的是，在从江油出发的班车上，遇到了一个九寨沟内的大叔，交谈一番后，他表示内把我们带进去，连同一晚的住宿只需要220块钱，比门票259便宜很多。三个刚毕业的大学生为了节省预算还是忍不住……当然，这种做法不合规也不推荐， 出了事儿也只能自己负责，所以还是推荐正常购买门票。</p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgfdsafsdaf.jpeg" alt="九寨沟游览地图" style="zoom:67%;" /><p>当天晚上就住在九寨沟内的荷叶寨，民宿老板很友好，房屋非常具有藏式特色。晚餐后小试了会儿无人机拍摄。一天颠簸的车程很是疲劳，一切收拾妥当后就睡了。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>第二天早上吃完晚饭后就直接轻装出发，行李留在民宿，下午游览完后来取。 </p><p>九寨沟属于古冰川地貌，冰川融化，积水沿着山谷留下聚集就形成了被当地人成为“海子”的湖泊。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2021-10-12221758.jpg" alt="路"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012213847622.jpg" alt="瀑布"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012213931592.png" alt="水镜"></p><p>九寨后的游览有两种方式：步行和坐车，一般来说都是坐车到某个地点，然后下车游览。总体的游览流程是：从盆景海做车到老虎海，游览老虎海、树正瀑布、犀牛海后，从犀牛海坐车到则扎洼沟的长海，游览长海、五彩池后坐车回到诺日朗游客中心。（上季节海、下季节海都在车上观览）。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012214009238.png" alt="长海"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220900473.png" alt="image-20211012220900473"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220915662.png" alt="image-20211012220915662"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012214156696.png" alt="海子"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012214224725.png" alt="海子"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012214109122.png" alt="海子"></p><p>到诺日朗就差不多中午了，可以选择在诺日朗中心食堂用餐，推荐自带干粮解决。然后从游客中心坐车去五花海。（因为2017年的地震，日则沟再往上的旅游景点还没有重新开放，最远只能走到五花海）从五花海往回步行，五花海、孔雀河道、金铃海、珍珠滩瀑布、诺日朗瀑布，是九寨沟景点最丰富的地方。步行到诺日朗后坐车到老虎海，然后下车步行至出口，结束。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012214430909.png" alt="珍珠滩瀑布下师徒四人"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012214510203.jpg" alt="地震遗址"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012214528965.jpg" alt="帅气的锟哥"></p><p>当然，实际的情况还是没能复制计划。当下午游览到珍珠滩时，天降暴雨，只得坐车直接到出口。虽有遗憾，但幸运的是把九寨沟的主要景点都游览到了。九寨的风景是世界闻名的，青山绿水间隔坐落在山谷间，仿佛置若仙境，甚是惊艳。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012214645484.jpg" alt="没去过星巴克，还没去过藏巴克吗？"></p><p>出了九寨沟景区就联系了包车司机，晚上计划是观看九寨沟千古情演出，旅馆就定在了千古情旁边。晚上的千古情果真精彩以至于忘记了拍照……</p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>从九寨沟景区往南走，路过雪宝顶、川主寺到达黄龙景区，和九寨沟一样，黄龙也是世界自然遗产。其独特的喀斯特地貌让黄龙景色堪称一绝。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012214914801.jpg" alt="中途路过花卉公园"></p><p>购买门票（学生证可半价）后，做缆车直接到达黄龙最高点，然后步行往下走，黄龙这个地方海拔确实有点儿高，运动量稍微增大就气喘吁吁，不过一路上逗提供了氧气补充站。黄龙的景色和九寨沟不同，九寨沟是看山谷间的山水，黄龙是体验置身大山中的渺小。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012215046258.jpg" alt="黄龙山顶"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012221013335.jpg" alt="小松鼠"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012221102188.jpg" alt="小松鼠"></p><p>从山顶往下走，路很长，不过路上的风景也是应接不暇。刚开始，山路两旁甚至路中间都是高大的树木，山路虽平缓，但四千多米的海拔导致氧气稀薄，还是建议慢慢走，不要走太快。每走一段路都有补氧站，仨人进去体验了一把，也就是找个地方坐会儿歇口气，工作人员两根管子插鼻孔，氧气袋放你背后，不一定有啥大用，新奇的体验还是不错的，哈哈。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215124785.png" alt="使劲吸"></p><p>往下走一段路，就会有被称为很多被称为“五彩池”的大型喀斯特地貌景观，实际上就是长期钙化沉积形成的小湖，配合川北的高山地貌，有一说一，还是非常漂亮的。在黄龙景区中有一个相对宽广的位置，应该是个山谷，几座寺庙座落下雪山之下，旁边就是一片片的五彩池错落堆叠。我想若是孤身来此，定会被群山和碧水的酷冷所吞噬。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215317861.png" alt="image-20211012215317861"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215345988.png" alt="image-20211012215345988"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215440001.png" alt="山水"></p><p>继续下山，之后的景观基本就大同小异了，都是碳酸盐沉积后形成了一片片水池，有种广西贵州那边梯田的感觉。遗憾的是不久就下雨了，虽说雨不大，但是没有了阳光的照射，水池显得死气沉沉的，遂快步下山，司机载着我们前往松潘，找了间旅馆住下了。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215507099.png" alt="山水"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215527505.png" alt="近景"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215550586.png" alt="image-20211012215550586"></p><p>有趣的是，途中遇到了好几只松鼠，这些松鼠似乎并不怎么怕人，看来生活地还是比较安逸。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215648562.png" alt="松鼠索食"></p><p>晚上住在松潘的一条街上，都是卖特产的小店，锟哥似乎对这些东西尤为喜欢，在与店主套完近乎后，又多次博弈，最后心满意足地买了5多雪莲花，之后在另一家店也偶然看见了雪莲花，一问结果便宜一半，😄。</p><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><p>第四天的计划是从松潘出发前往若尔盖草原，说实话，这趟草原之旅是我最期待的，草原的辽阔空旷只在影视作品里体会过，在此之前还没有正紧地去过真正的草原。幻想这样一个场景：蓝天白云，绿草无边，牛羊成群，一条弯曲的公路铺在平缓的绿色地毯上，汽车沿着这条公路平稳地行驶着，向着无垠地远方。。。我去，太巴适了。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215743206.png" alt="image-20211012215743206"></p><p>初入草原，就迫不及待地下车，说实话，第一次现场感受草原，很有冲击力。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220005830.png" alt="飒"></p><p>之后到了一家藏家乐，来草原不能不骑马，其实刚开始还是有点儿犹豫，一是价钱有点儿贵，而是有点儿恐惧（我胆儿小😱），但是想到在正儿八经的草原骑马的经历还是很难得的，就开始了人生的第一次骑马。一个藏族小哥和我一前一后，这个小哥爱开玩笑，老是让马跑步前进，本身就很抖，在一跑，我去，勾deng子qing疼。视频里看别人骑马很飒，真轮到我了就呵呵了。不过慢慢就熟悉了骑马的奥义：肌肉不要太紧绷，要迎合马身体的抖动带动自己身体的抖动，这样就会轻松很多。中途骑着马到达草原上一个山包顶，风很大并且夹杂着雨水，冻得我呀，早知道还是应该穿件藏袍。总之，骑马还是挺好玩的，不知道下一次骑马又是几年后。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012215810207.jpg" alt="骑马到山顶"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215832804.png" alt="高处不胜寒"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012215914248.png" alt="让暴风雨来得更猛烈些吧！"></p><p>之后继续赶路，一路上都是原生态草原景观，中途一些牧民赶着牦牛群穿过公路，刚好碰上，近距离观赏了牦牛这个高原特殊畜种，中途还是顶不过困意睡了一觉。</p><p>最后到了唐克的旅馆，放好行李准备去九曲黄河第一湾看日落。</p><p>阴差阳错，锟哥想爬上去结果做了电梯；我和杰哥想做电梯结果被锟哥忽悠买了普通票。所以我就和思杰一路顺着木制阶梯一段一段地爬到顶部。不得不说，站在一定高度俯瞰草原是最能体会草原辽阔的手段，感谢锟哥的歪打正着😄。一路上的风景确实非常不错，望着辽阔无边的草原，仿佛此时此刻所有的烦恼都不存在了。这里的海拔没有黄龙那么高，但是3500m左右的海拔然是让我俩每爬一段路就气喘吁吁。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220120643.png" alt="image-20211012220120643"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220140346.png" alt="杰哥和我"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220227779.png" alt="image-20211012220227779"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012220253182.jpg" alt="image-20211012220253182"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012220331963.jpg" alt="杰哥的背影"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012220413016.jpg" alt="山脊眺望"></p><p>最后在最高点和锟哥会合。不久，太阳从草原最远方的地平线上缓缓落下。没了太阳的草原温度迅速降低，赶快回去享受被窝的我温暖。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220438759.png" alt="image-20211012220438759"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220504664.png" alt="image-20211012220504664"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220523727.png" alt="image-20211012220523727"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20211012220542510.png" alt="image-20211012220542510"></p><h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><p>第五天开始返回，顺着红原、瓦切一线返回松潘。其实玩了这几天大家都有点儿累了，草原看了一天也看厌了。今天的最大期待是草原上的烤羊腿。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012220641001.jpg" alt="image-20211012220641001"></p><p>开整</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012220618169.jpg" alt="image-20211012220618169"></p><p>不出意外，没吃完。</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img%E8%9C%82%E8%9C%9C%E6%B5%8F%E8%A7%88%E5%99%A8_image-20211012220718489.jpg" alt="image-20211012220718489"></p><p>晚上回到松潘，准备搭乘第二天早上的班车回江油</p><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><p>第六天一大早，简单吃了点儿饭就坐车回江油了，一路上的颠簸还是和来时一样，车程6个小时，到了江油。思杰说来江油读高中3年都没吃过肥肠，哈哈，那还不尝尝，江油肥肠名店除了老火车站的罗肥肠，城里就数这家小小吃了。杰哥很满意，说如果广元肥肠有这个味道，绝对天天吃肥肠。。。</p><p><strong>九寨沟的这次旅行，和高中挚友同行，一路都很开心，足矣！</strong></p>]]></content>
    
    
    <summary type="html">大学毕业后正式工作之前，和高中俩同学计划去九寨沟耍几天，五天的旅行很愉快，记录在博客里供日后回忆。</summary>
    
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="旅游" scheme="https://yangfanjack.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>实体机安装Arch</title>
    <link href="https://yangfanjack.github.io/2021/06/14/%E5%AE%9E%E4%BD%93%E6%9C%BA%E5%AE%89%E8%A3%85Arch/"/>
    <id>https://yangfanjack.github.io/2021/06/14/%E5%AE%9E%E4%BD%93%E6%9C%BA%E5%AE%89%E8%A3%85Arch/</id>
    <published>2021-06-14T01:18:48.000Z</published>
    <updated>2022-12-22T02:37:28.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ol><li><p>机器：华硕飞行堡垒fx-60vm</p></li><li><p>第一系统：win10</p></li><li><p>Arch镜像</p><blockquote><p><a href="https://archlinux.org/download/">https://archlinux.org/download/</a></p></blockquote></li><li><p>镜像考录工具：Rufus</p></li><li><p>U盘</p></li></ol><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h4 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装过程中调整字体</span></span><br><span class="line">setfont ter-132n</span><br><span class="line">setfont ter-122b</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网卡</span></span><br><span class="line">ip link</span><br><span class="line"><span class="comment">#有线连接</span></span><br><span class="line">dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#无线连接</span></span><br><span class="line"><span class="comment">#查看wifi是否关闭，开启wifi</span></span><br><span class="line">rfkill list</span><br><span class="line">rfkill unblock wifi</span><br><span class="line"><span class="comment">#wifi联网</span></span><br><span class="line">iwctl</span><br><span class="line">[iwd] device list</span><br><span class="line">[iwd] station wlan0 scan</span><br><span class="line">[iwd] station wlan0 get-networks</span><br><span class="line">[iwd] station wlan0 connect SSID</span><br><span class="line"><span class="comment">#分配ip</span></span><br><span class="line">dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试网络连接</span></span><br><span class="line">ping archlinux.org</span><br></pre></td></tr></table></figure><h4 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新系统时间</span></span><br><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br><span class="line"><span class="comment">#检查服务状态</span></span><br><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><h4 id="系统分区"><a href="#系统分区" class="headerlink" title="系统分区"></a>系统分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前分区</span></span><br><span class="line">lsblk</span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment">#新建分区</span></span><br><span class="line">cfdisk /dev/sdX  (X替换成相应的硬盘字母，一般是a或b，默认gpt即可)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分区建议</span></span><br><span class="line"><span class="comment"># /boot/efi:和win10共用 512M</span></span><br><span class="line"><span class="comment"># swap:固态硬盘1G</span></span><br><span class="line"><span class="comment"># /:固态硬盘剩下所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化分区</span></span><br><span class="line">mkfs.fat -F32 /dev/sdaX <span class="comment">#/boot/efi</span></span><br><span class="line">mkfs.ext4 /dev/sda6 <span class="comment">#/和/home</span></span><br><span class="line">mkfs.ext4 /dev/sdb2</span><br><span class="line">mkswap /dev/sda5 <span class="comment">#交换分区</span></span><br><span class="line">swapon /dev/sda5</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载</span></span><br><span class="line">mount /dev/sda6 /mnt</span><br><span class="line">mkdir /mnt/boot/efi</span><br><span class="line">mount /dev/sda2 /mnt/boot/efi</span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sdb2 /mnt/home</span><br></pre></td></tr></table></figure><h4 id="安装arch核心"><a href="#安装arch核心" class="headerlink" title="安装arch核心"></a>安装arch核心</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以直接使用reflector命令检索排序镜像并保存到mirrorlist里</span></span><br><span class="line">reflector --country China --age 24 --sort rate --protocol https --save /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者手动更改</span></span><br><span class="line">vim /etc/pacman.d/mirrorlist</span><br><span class="line"><span class="comment">#找到中国镜像移到最上面或者添加</span></span><br><span class="line">Server = http://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line">Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment">#pacstrap脚本安装arch基础</span></span><br><span class="line">pacstrap /mnt base base-devel linux linux-firmware linux-headers dhcpcd vim networkmanager intel-ucode git openssh bash-completion</span><br></pre></td></tr></table></figure><h4 id="生成fstab挂载文件"><a href="#生成fstab挂载文件" class="headerlink" title="生成fstab挂载文件"></a>生成fstab挂载文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h4 id="进入ch-root"><a href="#进入ch-root" class="headerlink" title="进入ch-root"></a>进入ch-root</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment">#设置时间</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="comment">#设置语言</span></span><br><span class="line">vim /etc/locale.gen</span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_TW.UTF-8 UTF-8</span><br><span class="line">locale-gen</span><br><span class="line"><span class="comment">#设置默认语言</span></span><br><span class="line">vim /etc/locale.conf</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"><span class="comment">#本地化设置</span></span><br><span class="line">vim /etc/hostname</span><br><span class="line">myArch</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1myArch.localdomainmyArch</span><br><span class="line"></span><br><span class="line"><span class="comment">#自启动设置</span></span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager sshd</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置root密码</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增普通用户</span></span><br><span class="line">useradd -m -G wheel -s /bin/bash jack1024</span><br><span class="line">passwd jack1024</span><br><span class="line"><span class="comment">#给用户sudo权利</span></span><br><span class="line">pacman -S sudo</span><br><span class="line">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class="line">visudo</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><h4 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober ntfs-3g grub efibootmgr efivar</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成并查看引导配置</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">cat /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出chroot</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">umount -R /mnt/boot/efi</span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="新系统完善和配置"><a href="#新系统完善和配置" class="headerlink" title="新系统完善和配置"></a>新系统完善和配置</h2><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调节字体(在该目录下选择一个字体)</span></span><br><span class="line">setfont /usr/share/kbd/consolefonts/sun12x22.psfu.gz</span><br><span class="line"><span class="comment">#联网</span></span><br><span class="line">nmcli device wifi list</span><br><span class="line">nmcli device wifi connect yang password XXXXX</span><br><span class="line"><span class="comment">#查看网络配置</span></span><br><span class="line">cat/etc/pacman.d/mirrorlist</span><br><span class="line"><span class="comment">#网络配置</span></span><br><span class="line">vim /etc/pacman.conf</span><br><span class="line"><span class="comment">#打开Color和TotalDownload注释</span></span><br><span class="line"><span class="comment">#文档末尾添加</span></span><br><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新所有软件</span></span><br><span class="line">sudo pacman -Syyu</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 archlinuxcn-keyring 包以导入 GPG key</span></span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装aur管理工具yay</span></span><br><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果安装keyring出错</span></span><br><span class="line">sudo rm -rf /etc/pacman.d/gnupg</span><br><span class="line">sudo pacman-key --init</span><br><span class="line">sudo pacman-key --populate archlinux</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h4 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#窗口系统服务xorg</span></span><br><span class="line">sudo pacman -S xorg xorg-server</span><br><span class="line"><span class="comment">#kde</span></span><br><span class="line">sudo pacman -S plasma</span><br><span class="line"><span class="comment">#不建议kde-applications，太多，选几个就行了</span></span><br><span class="line">sudo pacman -S ark dolphin dolphin-plugins juk kdeconnect kdenlive konsole </span><br><span class="line"><span class="comment">#登录界面sddm</span></span><br><span class="line">sudo pacman -S sddm sddm-kcm</span><br><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br><span class="line"><span class="comment">#sddm中文界面</span></span><br><span class="line">sudo SYSTEMD_EDITOR=vim systemctl edit sddm</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=LANG=zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment">#xfce</span></span><br><span class="line">sudo pacman -S xfce4 xfce4-goodies</span><br><span class="line"><span class="comment">#lightdm</span></span><br><span class="line">sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> lightdm</span><br></pre></td></tr></table></figure><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ttf-dejavu wqy-bitmapfont wqy-microhei wqy-zenhei noto-fonts noto-fonts-emoji</span><br><span class="line"><span class="comment">#默认语言</span></span><br><span class="line">vim .xprofile</span><br><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><h4 id="声音-amp-显卡-amp-蓝牙"><a href="#声音-amp-显卡-amp-蓝牙" class="headerlink" title="声音&amp;显卡&amp;蓝牙"></a>声音&amp;显卡&amp;蓝牙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils pulseaudio pulseaudio-alsa</span><br><span class="line">//sudo pacman -S nvidia nvidia-utils lib32-nvidia-utils nvidia-settings</span><br><span class="line">sudo pacman -S xf86-video-intel</span><br><span class="line">sudo pacmna -S bluez bluez-utils bluedevil pulseaudio-bluetooth</span><br><span class="line">systemctl <span class="built_in">enable</span> bluetooth</span><br></pre></td></tr></table></figure><h4 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tlp提供优秀的linux高级电源管理功能，配置文件位于/etc/default/tlp</span></span><br><span class="line">sudo pacman -S tlp tlp-rdw</span><br><span class="line"><span class="comment"># 在您使用(tlp-rdw)之前需要使用NetworkManager并且需要启用 NetworkManager-dispatcher.service</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager-dispatcher.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> tlp.service tlp-sleep.service</span><br><span class="line"><span class="comment"># 屏蔽systemd服务systemd-rfkill.service和systemd-rfkill.socket来防止冲突</span></span><br><span class="line">sudo systemctl mask systemd-rfkill.service systemd-rfkill.socket</span><br><span class="line">sudo tlp start</span><br><span class="line"><span class="comment"># 只对thinkpad有用的功能,充电阈值控制以及电池校准</span></span><br><span class="line">sudo pacman -S tp_smapi acpi_call</span><br></pre></td></tr></table></figure><h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yay -S fcitx5-im fcitx5-rime fcitx5-chinese-addons fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki-rime fcitx5-pinyin-moegirl-rime</span><br><span class="line"></span><br><span class="line"><span class="comment">#开机自启</span></span><br><span class="line"><span class="built_in">cd</span> ~/.config</span><br><span class="line">mkdir autostart</span><br><span class="line"><span class="built_in">cd</span> autostart</span><br><span class="line">sudo mv /usr/share/applications/fcitx5.desktop ./</span><br><span class="line"><span class="comment">#右下脚输入法右键配置，删掉拼音加入中州韵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量</span></span><br><span class="line">vim ~/.pam_environment</span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br></pre></td></tr></table></figure><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新版本的arch在grub中默认没有windows的探测，需要在/etc/default/grub中加上</span></span><br><span class="line">GRUB_DISABLE_OS_PROBER=<span class="literal">false</span></span><br><span class="line"><span class="comment">#然后重新grub-mkconfig</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">pacman -S mysql57</span><br><span class="line"><span class="comment">#初始化数据库</span></span><br><span class="line">sudo mysqld --initialize --user=mysql</span><br><span class="line"><span class="comment">#启动mysql</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;your-password&#x27;</span>;</span><br><span class="line"><span class="comment">#查看mysql默认配置</span></span><br><span class="line">mysqld --verbose --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#默认配置文件:/etc/mysql/my.cnf</span></span><br><span class="line"><span class="comment">#默认数据库文件夹:/var/lib/mysql/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装v2raya</span></span><br><span class="line">yay -S v2raya v2ray</span><br><span class="line">systemctl <span class="built_in">enable</span> --now v2raya</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装libreoffice</span></span><br><span class="line">sudo pacman -S libreoffice-fresh libreoffice-fresh-zh-cn</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nvm</span></span><br><span class="line">yay -S nvm</span><br><span class="line">nvm --version</span><br><span class="line">nvm ls-remote</span><br><span class="line">nvm install v12.18.0</span><br><span class="line">nvm ls</span><br><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装zsh</span></span><br><span class="line">yay -S zsh</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">yay -S oh-my-zsh-git</span><br><span class="line">cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source /usr/share/nvm/init-nvm.sh&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source /usr/share/nvm/init-nvm.sh&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加nvm环境变量到.zshrc</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh速度优化</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ]] &amp;&amp; <span class="built_in">source</span> <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> --no-use</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/romkatv/powerlevel10k.git <span class="variable">$ZSH_CUSTOM</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line">plugins=(其他的插件 zsh-autosuggestions zsh-syntax-highlighting)</span><br><span class="line">HIST_STAMPS=<span class="string">&quot;yyyy-mm-dd&quot;</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"><span class="comment"># 自定义主题</span></span><br><span class="line">p10k configure</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">答辩完大学毕业啦，终于可以折腾下Arch了</summary>
    
    
    
    <category term="技术" scheme="https://yangfanjack.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://yangfanjack.github.io/tags/Linux/"/>
    
    <category term="技术" scheme="https://yangfanjack.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>英语语法框架构建</title>
    <link href="https://yangfanjack.github.io/2021/05/17/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA/"/>
    <id>https://yangfanjack.github.io/2021/05/17/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA/</id>
    <published>2021-05-17T07:49:41.000Z</published>
    <updated>2022-12-22T02:37:28.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Simple-Sentence：主语-谓语"><a href="#Simple-Sentence：主语-谓语" class="headerlink" title="Simple Sentence：主语+谓语"></a>Simple Sentence：主语+谓语</h2><ol><li>可以独立完成的动作：不及物动词Intransitive Verbs<ul><li><strong>主语+不及物动词</strong></li></ul></li><li>有一个动作的承受者：单及物动词Monotransitive Verbs<ul><li><strong>主语+单及物动词+宾语</strong></li></ul></li><li>有两个动作承受者：双及物动词Ditransitive Verbs<ul><li><strong>主语+间接宾语+直接宾语</strong></li></ul></li><li>只有一个动作承受者（不同于2）：复杂及物动词Complex-Transitive Verbs<ul><li><strong>主语+复杂及物动词+宾语+宾语补语</strong></li></ul></li><li>不是狭义的”动作“：系动词Linking Verbs<ul><li><strong>主语+系动词+主语补语(表语)</strong></li></ul></li></ol><h3 id="Parts-Of-Speech：句子成分"><a href="#Parts-Of-Speech：句子成分" class="headerlink" title="Parts Of Speech：句子成分"></a>Parts Of Speech：句子成分</h3><ol><li>Subject：主语</li><li>Predicate Verb：谓语动词</li><li>Object：宾语</li><li>Object Complement：宾语补语</li><li>Subject Complement（Predicative）：主语补语（表语）</li><li>Attributive：定语—修饰主语/宾语</li><li>Adverbial：状语—修饰谓语动词</li><li>Appositive：同位语—再把主语/宾语说一遍</li></ol><h2 id="Non-Simple-Sentence"><a href="#Non-Simple-Sentence" class="headerlink" title="Non Simple Sentence"></a>Non Simple Sentence</h2><p>Compuond Sentence：Simple Sentence+Simple Sentence…</p><p>Complex Sentence：Main Clause（主句）+Subordinate Clause（从句）</p><h3 id="Subordinate-Clause"><a href="#Subordinate-Clause" class="headerlink" title="Subordinate Clause"></a>Subordinate Clause</h3><ol><li>主语从句</li><li>宾语从句</li><li>表语从句</li><li>同位语从句</li><li>定语从句</li><li>状语从句</li></ol><h2 id="词类"><a href="#词类" class="headerlink" title="词类"></a>词类</h2><ol><li>Nouns：名词</li><li>Articles：冠词</li><li>Pronouns：代词</li><li>Adjectives：形容词</li><li>Numerals：数词</li><li>Adverbs：副词</li><li>Prepositions：介词</li><li>Interjections：叹词</li><li>Conjunctions：连词</li><li>Verbs：动词</li></ol><p><strong>注意：对于句子成分和词类的关系而言，除了谓语动词只能用动词，其余句子成份都可能包含不同的词类</strong></p><h2 id="Predicate-Verbs’-Big-Three（谓语动词的三大本领）"><a href="#Predicate-Verbs’-Big-Three（谓语动词的三大本领）" class="headerlink" title="Predicate Verbs’ Big Three（谓语动词的三大本领）"></a>Predicate Verbs’ Big Three（谓语动词的三大本领）</h2><ol><li>表示动作的时间：Tense<ul><li>现在</li><li>过去</li><li>将来</li><li>过去将来</li></ul></li><li>表示动作的状态：Aspect<ul><li>一般</li><li>完成</li><li>进行</li><li>完成进行</li></ul></li><li>表斯动作的假设，情感等：Mood<ul><li>虚拟语气：If i were a boy …</li><li>陈述语气：I ate a carrot and …</li><li>祈使语气：Eat this carrot and …</li></ul></li></ol><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210517162806480.png" alt="image-20210517162806480"></p><h3 id="谓语动词充分发挥功能，需要助动词的帮助"><a href="#谓语动词充分发挥功能，需要助动词的帮助" class="headerlink" title="谓语动词充分发挥功能，需要助动词的帮助"></a>谓语动词充分发挥功能，需要助动词的帮助</h3><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210517163213280.png" alt="image-20210517163213280"></p><p><strong>注意：不要把助动词和它的其他身份（实义动词）混淆</strong></p><h2 id="Non-Predicate-Verbs"><a href="#Non-Predicate-Verbs" class="headerlink" title="Non Predicate Verbs"></a>Non Predicate Verbs</h2><p><strong>注意：正如上面介绍词类和句子成份的关系时所讲，动词除了可以充当谓语动词这个句子成份，还可以充当其他任意一个句子成份，这些统称非谓语动词Non Predicate Verbs</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210517163716446.png" alt="image-20210517163716446"></p><ol><li>动词不定式</li><li>现在分词</li><li>动名词</li><li>过去分词</li></ol><h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h3><p><strong>非谓语动词可以充当除谓语动词外所有句子成份，取代所有从句，从而简化句子。</strong></p><p><strong>只是这些动词就不再具有表示动作时间，状态，语句的功能了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>English Grammer的核心就是动词：</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210517165540966.png" alt="image-20210517165540966"></p>]]></content>
    
    
    <summary type="html">B站刷到一个讲英语语法体系的视频，讲的很不错，记录下</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="英语" scheme="https://yangfanjack.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>经济学原理学习</title>
    <link href="https://yangfanjack.github.io/2021/05/15/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yangfanjack.github.io/2021/05/15/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-15T13:49:01.000Z</published>
    <updated>2022-12-22T02:37:28.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经济学入门"><a href="#经济学入门" class="headerlink" title="经济学入门"></a>经济学入门</h2><p><strong>宗旨：没有对的经济学理论，只有好的经济学理论</strong></p><p><strong>Let‘s Go</strong></p><h3 id="经济学演变"><a href="#经济学演变" class="headerlink" title="经济学演变"></a>经济学演变</h3><ol><li>自给自足，没有交换</li><li>开始分工，根据劳动量交换产品</li><li>随着生产力发展，更多的产品生产出来，产生货币：从商品中分离出来充当一般等价物的商品，专门用于交换（吾以吾之所有予市场，换吾之所需，货币就是这一过程的约定，它反映的是个体与社会的经济协作关系）</li><li>交换促进了分工，分工带来了生产率提升，反过来又促进了交换</li><li>交换的前提是交换双方彼此信任。</li><li>货币要么是具有稀缺性，要么背后有强权背书。所以一旦遇到乱世，大家都会把货币兑换成普通商品或者硬通货。</li><li>早期交易体系：以铜币为基础的弱信用链（谷物，绢帛，铜钱）</li><li>早期铜钱货币交易体系中，铜钱较稀缺，铜钱铸造速度&lt;生产率提高速度，市场流通货币减少，货币增值，商品价格下降，会导致通货紧缩</li></ol><p><strong>经济由所有市场内的全部交易构成</strong></p><h3 id="信任是分工的基石"><a href="#信任是分工的基石" class="headerlink" title="信任是分工的基石"></a>信任是分工的基石</h3><p><strong>人类社会的每次变革，都伴随着社会信任关系的重构</strong>：</p><ol><li>部落内的分工：私人信用体系</li><li>国家内的分工：政府信用体系</li><li>国家间的分工：银行信用体系</li></ol><p><strong>任何交易都依赖于信用体系：所以理论上，只要构建一个足够完善的信用链将所有人纳入其中，就能让更多的人参与交换活动，从而让更多的交易达成，经济得到发展</strong></p><p>但是由各种问题阻碍这种理想信任链的形成：分配问题，国家对抗，金融危机……</p><h3 id="现代经济学"><a href="#现代经济学" class="headerlink" title="现代经济学"></a>现代经济学</h3><p>以银行发放贷款创造出存款货币的银行信用货币体系</p><ol><li>政府：负责收税，花钱</li><li>中央银行：负责控制货币，信贷数量（通过利率和发行货币）</li></ol><h3 id="经济学三类问题："><a href="#经济学三类问题：" class="headerlink" title="经济学三类问题："></a>经济学三类问题：</h3><ol><li>人们如何作出决策（微观）</li><li>人们如何相互作用（微观）</li><li>整体经济如何运行（宏观）</li></ol><h3 id="经济学的十个原理："><a href="#经济学的十个原理：" class="headerlink" title="经济学的十个原理："></a>经济学的十个原理：</h3><p>人们如何作出决策？</p><ol><li>People face tradeoffs：人们面临得失交换</li><li>The cost of somothing is what you give up to get it：某物的成本是为此所放弃的东西</li><li>Rational people think at the margin：理性人考虑边际量</li><li>People respond to incentives：人们会对激励作出反应</li></ol><p>人们如何相互作用？</p><ol start="5"><li>Trade can make everyone better off：贸易使人人收益</li><li>Markets are usually a good way to organize economic activity：市场是组织经济活动的好方式</li><li>Governments can sometimes improve market outcomes：政府有时可以改进市场结果</li></ol><p>整体经济如何运行？ </p><ol start="8"><li>The standard of living depends on a country’s production：一国的生活水平取决于它的生产</li><li>Prices rise when the government prints too much money：当政府发行了过多的货币时，物价上涨</li><li>Society faces a short-run tradeoff between inflation and unemployment：社会面临通货膨胀和失业之间的短期得失交换</li></ol><h3 id="经济学历史："><a href="#经济学历史：" class="headerlink" title="经济学历史："></a>经济学历史：</h3><ol><li>古希腊经济思想：家庭理财</li><li>重商主义经济理论（大航海时代）：商业贸易和财富(金银)积累，鼓励出口限制进口</li><li>古典经济学的理论（亚当斯密，李嘉图，马克思）：财富的性质与原因：交换，分工，市场</li><li>新古典经济学理论：资源配置及优化问题：Math被广泛应用到经济领域</li><li>经济学的帝国主义：人类选择行为，经济学扩展到其他社会科学领域</li></ol><h3 id="经济学分类"><a href="#经济学分类" class="headerlink" title="经济学分类"></a>经济学分类</h3><ul><li>非常非常多（&gt;1000种）</li><li>微观经济学，宏观经济学，计量经济学</li></ul><h3 id="怎么学？"><a href="#怎么学？" class="headerlink" title="怎么学？"></a>怎么学？</h3><ol><li>经济理论</li><li>数学工具（统计，微积分）</li><li>经济史</li></ol><h1 id="经济学原理正式开始"><a href="#经济学原理正式开始" class="headerlink" title="经济学原理正式开始"></a>经济学原理正式开始</h1><p><strong>经济</strong>：为取得经济品有代价的活动就是经济</p><p><strong>经济学</strong>：研究人们如何利用<strong>稀缺资源</strong>来满足人们<strong>无限需求</strong>的一门<strong>社会科学</strong></p><p>经济学的<strong>两个基本假说</strong>：（经济学是经过实践检验的假说）</p><ul><li>经济人：每个人都会有个性追求，是一个理性人；消费者满足最大化，生产者利润最大化。</li><li>信息完备性：】</li></ul><p>经济学常用的解决问题的方法：表格、图线、文字、数学函数</p><p>在资源一定的情况下，所能够生产的两种商品的最大组合的运动轨迹，就是<strong>生产可能曲线</strong></p><h2 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h2><p><strong>研究对象</strong>：</p><ol><li>以<strong>价格</strong>为核心，用价格衡量<strong>资源稀缺性</strong>，也就导致了供求关系</li><li>以<strong>单个经济单位</strong>为研究对象：<strong>消费者</strong>和<strong>生产者</strong></li><li>研究单个经济单位的<strong>经济行为</strong>：消费者怎么满足最大化 &amp; 生产者怎么利润最大化</li><li>解决<strong>资源的配置</strong>问题：生产什么？生产多少？为谁生产？</li></ol><p><strong>怎么学？</strong></p><p>两种研究方法：</p><ul><li>实证经济学：就事论事</li><li>规范经济学：就事论理</li></ul><h3 id="欲望和需求"><a href="#欲望和需求" class="headerlink" title="欲望和需求"></a>欲望和需求</h3><p>需求是<strong>消费者</strong>在<strong>一定时期</strong>内，在一定<strong>价格</strong>水平上，<strong>愿意</strong>购买而且<strong>能</strong>购买的商品量。</p><p>需求=欲望+钱，满足其一是潜在需求，同时满足是有效需求</p><p>有效需求 可以代表 市场容量</p><p><strong>需求的影响因素：</strong></p><ul><li><strong>商品本身价格（最重要）</strong></li><li>收入水平</li><li>偏好</li><li>相关商品的价格：互补品、替代品、独立品</li><li>未来预期</li></ul><p><strong>需求的规律：（通过价格）</strong></p><ul><li>文字表达：其他因素不变的情况下，消费者对某种商品的需求量和商品本身的价格呈反向变动的关系</li><li>需求表：价格和数量两行</li><li>需求曲线：横轴Q，纵轴P；需求曲线</li><li>需求函数：Q=f(P)；Q=a=b×P</li><li>个人需求的加和就是市场需求</li></ul><p><strong>需求规律的例外：</strong></p><ol><li>价格稳定不变：黄金、紧俏物资</li><li>需求稳定不变：生活必需品（盐、药、厕所）</li><li>价格需求呈正比：高档消费品、奢侈品</li><li>毫无规则：金融产品（债券、基金、股票、期货）只有行家，没有专家</li></ol><p><strong>非价格因素对需求的影响</strong></p><h2 id="宏观经济学"><a href="#宏观经济学" class="headerlink" title="宏观经济学"></a>宏观经济学</h2>]]></content>
    
    
    <summary type="html">这个世界越来越看不懂了，赶紧学学经济学</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="经济" scheme="https://yangfanjack.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>股票入门</title>
    <link href="https://yangfanjack.github.io/2021/05/15/%E8%82%A1%E7%A5%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://yangfanjack.github.io/2021/05/15/%E8%82%A1%E7%A5%A8%E5%85%A5%E9%97%A8/</id>
    <published>2021-05-15T06:58:12.000Z</published>
    <updated>2022-12-22T02:37:28.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理财的几种投资渠道："><a href="#理财的几种投资渠道：" class="headerlink" title="理财的几种投资渠道："></a>理财的几种投资渠道：</h2><ol><li>银行利息<ul><li>年利率1.5%</li><li>银行的利率跑不赢通货膨胀</li></ul></li><li>证券投资：股票<ul><li>收益高</li><li>波动很大，技术要求大</li></ul></li><li>房地产投资</li><li>基金<ul><li>收益低点：货币基金，纯债基金</li><li>收益高点：股票型基金，混合型基金</li></ul></li></ol><h2 id="一些概念："><a href="#一些概念：" class="headerlink" title="一些概念："></a>一些概念：</h2><ol><li><strong>债券</strong>：别人买你，还你利息</li><li><strong>股票</strong>：共同分享开公司的成果</li><li><strong>A股</strong>：中国大陆公司发行的股票</li><li><strong>指数</strong>：一家公司一只股票，多支股票组合形成指数</li><li><strong>大盘（上证指数）</strong>：在上海债券交易所上发行的所有股票组合</li><li><strong>小盘（中证500指数）</strong>：选取了500家中小公司的股票组合</li><li><strong>基金</strong>：由基金公司拿我们的钱，帮我们买股票，债券，帮助我们打理我们的钱<ul><li>我们不会理财，可以找大的基金公司（天弘，富国……），千万不要找P2P</li></ul></li></ol><h2 id="关于基金Fund的一些概念"><a href="#关于基金Fund的一些概念" class="headerlink" title="关于基金Fund的一些概念"></a>关于基金Fund的一些概念</h2><p><strong>开放式基金（随买随卖）按照投资类型一般分为：</strong></p><ul><li>股票型：风险较高收益较多</li><li>债券型：风险较低收益较少</li><li>混合型：股票+债券</li><li>货币型：风险最小，收益最少。投资于货币市场的基金。例：一年以内的银行定期存款，剩余期限397天以内的债券</li></ul><h2 id="经济-amp-金融-？"><a href="#经济-amp-金融-？" class="headerlink" title="经济 &amp; 金融 ？"></a>经济 &amp; 金融 ？</h2><ul><li>经济<ol><li>一次性的买卖，为了自己消费</li><li>供需定价</li></ol></li><li>金融<ol><li>买家炒来炒去，为了自己赚钱</li><li>预期决定价格，大家看涨它就涨</li></ol></li></ul><h2 id="股票分类："><a href="#股票分类：" class="headerlink" title="股票分类："></a>股票分类：</h2><ul><li><p>A股，B股，H股，N股，S股</p></li><li><p>一般做的都是沪深A股（上海证券交易所 &amp; 深圳证券交易所）</p><ol><li>60开头——上证A股</li><li>0开头——深证A股</li><li>3开头——创业版（证券公司去开通）</li><li>688开头——科创版（最低50W资金）</li></ol></li></ul><h2 id="股票交易时间"><a href="#股票交易时间" class="headerlink" title="股票交易时间"></a>股票交易时间</h2><ul><li>周一到周五（09:30-11:30，13:00-15:00）</li><li>周六周日休市，法定节日休市</li><li>09:15-09:20：随便挂单随便撤单</li><li>09:20-09:25：随便挂单不可撤单</li></ul><h2 id="股票的涨跌幅"><a href="#股票的涨跌幅" class="headerlink" title="股票的涨跌幅"></a>股票的涨跌幅</h2><ul><li>0和60股票每天涨跌幅是10%</li><li>3股票每天涨跌幅是20%</li><li>68股票前5个交易日无限制，后面涨跌幅是20%</li><li>新股第一天涨跌幅44%</li><li>ST股（亏损股）：涨跌幅是5%</li></ul><h2 id="股票分时图和K线图"><a href="#股票分时图和K线图" class="headerlink" title="股票分时图和K线图"></a>股票分时图和K线图</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515152428603.png" alt="image-20210515152428603"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515152344839.png" alt="image-20210515152344839"></p><h2 id="股票交易规则"><a href="#股票交易规则" class="headerlink" title="股票交易规则"></a>股票交易规则</h2><ul><li>股票最低买1手=100股，不同上市股票每股价格不同</li><li>股票交易费由三部分组成：佣金，印花税，过户费（仅上股收取）<ol><li>印花税：0.1%</li><li>过户费：0.002%</li><li>交易佣金：最高0.003%，最低5元</li></ol></li><li>交易佣金是双向收取：买 &amp; 卖</li></ul><h2 id="看盘软件界面介绍"><a href="#看盘软件界面介绍" class="headerlink" title="看盘软件界面介绍"></a>看盘软件界面介绍</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515155716825.png" alt="image-20210515155716825"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515155610869.png" alt="image-20210515155610869"></p><h2 id="股票趋势"><a href="#股票趋势" class="headerlink" title="股票趋势"></a>股票趋势</h2><ul><li><strong>顺势而为，不能和大盘逆向操作</strong></li><li><strong>尽量做上涨趋势的股票</strong></li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515155828148.png" alt="image-20210515155828148"></p><h2 id="支撑位和压力位"><a href="#支撑位和压力位" class="headerlink" title="支撑位和压力位"></a>支撑位和压力位</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515160558894.png" alt="image-20210515160558894"></p><h2 id="突破和跌破"><a href="#突破和跌破" class="headerlink" title="突破和跌破"></a>突破和跌破</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515160935087.png" alt="image-20210515160935087"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515160958177.png" alt="image-20210515160958177"></p><h2 id="股票盘口"><a href="#股票盘口" class="headerlink" title="股票盘口"></a>股票盘口</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515161700536.png" alt="image-20210515161700536"></p><h2 id="股票买卖机制"><a href="#股票买卖机制" class="headerlink" title="股票买卖机制"></a>股票买卖机制</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515161916150.png" alt="image-20210515161916150"></p><p>自己通过各种软件买卖软件中的模拟买卖来练习</p><h2 id="选股票"><a href="#选股票" class="headerlink" title="选股票"></a>选股票</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515163332683.png" alt="image-20210515163332683"></p><h2 id="做空（Short-Selling）是啥？"><a href="#做空（Short-Selling）是啥？" class="headerlink" title="做空（Short Selling）是啥？"></a>做空（Short Selling）是啥？</h2><ul><li><p>做多：</p><ol><li>股票上升时，低价买入，高价卖出。</li><li>利润无限，亏损有限。</li></ol></li><li><p>做空：</p><ol><li>股票下降时，高价卖出，低价买入。</li><li>从证券公司借股票。高价卖出，低价买入；然后还给证券公司股票，赚差价。</li><li>利润有限，亏损无限。</li></ol><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210515171343272.png" alt="image-20210515171343272"></p></li></ul>]]></content>
    
    
    <summary type="html">最近有点儿迷茫，索性就学习点理财知识吧......</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="股票" scheme="https://yangfanjack.github.io/tags/%E8%82%A1%E7%A5%A8/"/>
    
    <category term="理财" scheme="https://yangfanjack.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java中加载配置文件的几种方法</title>
    <link href="https://yangfanjack.github.io/2021/03/21/Java%E4%B8%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://yangfanjack.github.io/2021/03/21/Java%E4%B8%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-03-21T11:22:16.000Z</published>
    <updated>2022-12-22T02:37:28.873Z</updated>
    
    <content type="html"><![CDATA[<p>Java的常用web框架中会有很多配置文件，这些配置文件都是为了降低代码耦合性而从代码中剥离出来的。为了在程序运行时动态地加载这些文件进内存，需要加载这些配置文件，学习过程中发现有很多种方法都能将这些配置文件加载进内存，需要总结下方便记忆。</p><h2 id="基于ClassLoader加载配置文件"><a href="#基于ClassLoader加载配置文件" class="headerlink" title="基于ClassLoader加载配置文件"></a>基于ClassLoader加载配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream in = 当前类名.class.getClassLoader().getResourceAsStream(<span class="string">&quot;配置文件相对路径&quot;</span>);</span><br><span class="line">properties.load(in);</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">&quot;password&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="基于Resources读取配置文件"><a href="#基于Resources读取配置文件" class="headerlink" title="基于Resources读取配置文件"></a>基于Resources读取配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User user = userMapper.findById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h2 id="基于ResourceBundle读取配置文件"><a href="#基于ResourceBundle读取配置文件" class="headerlink" title="基于ResourceBundle读取配置文件"></a>基于ResourceBundle读取配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">&quot;配置文件相对路径&quot;</span>);</span><br><span class="line">System.out.println(resourceBundle.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"></span><br><span class="line">InputStream in3 = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filePath));</span><br><span class="line">ResourceBundle resourceBundle2 = <span class="keyword">new</span> PropertyResourceBundle(in3);</span><br><span class="line">System.out.println(resourceBundle2.getString(<span class="string">&quot;username&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在框架中经常会有加载配置文件的情况出现，此时加载配置文件的方式也不止一种，总结一下。</summary>
    
    
    
    <category term="技术" scheme="https://yangfanjack.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://yangfanjack.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://yangfanjack.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://yangfanjack.github.io/2021/03/18/Nginx/"/>
    <id>https://yangfanjack.github.io/2021/03/18/Nginx/</id>
    <published>2021-03-18T14:10:05.000Z</published>
    <updated>2022-12-22T02:37:28.771Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Nginx 是一款高性能的 http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师伊戈尔·西索夫（Igor Sysoev）所开发，官方测试 nginx 能够支支撑 5 万并发链接，并且 cpu、内存等资源消耗却非常低，运行非常稳定。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><strong>http 服务器</strong>。Nginx 是一个 http 服务可以独立提供 http 服务。可以做<strong>网页静态服务器</strong>。</li><li><strong>虚拟主机</strong>。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li><li><strong>反向代理，负载均衡</strong>。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 nginx 做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。 </li></ol><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><ul><li>将静态网站文件 上传到服务器的/usr/local/nginx/html下即可访问</li></ul><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><ul><li>虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的物理服务器划分成多个“虚拟”服务器。虚拟主机技术极大的促进了网络技术的应用和普及。同时虚拟主机的租用服务也成了网络时代的一种新型经济形式。</li></ul><h3 id="端口绑定"><a href="#端口绑定" class="headerlink" title="端口绑定"></a>端口绑定</h3><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2>]]></content>
    
    
    <summary type="html">Nginx 是一款高性能的 http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Web" scheme="https://yangfanjack.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Arch入教路</title>
    <link href="https://yangfanjack.github.io/2021/03/17/Arch%E5%85%A5%E6%95%99%E8%B7%AF/"/>
    <id>https://yangfanjack.github.io/2021/03/17/Arch%E5%85%A5%E6%95%99%E8%B7%AF/</id>
    <published>2021-03-17T02:29:41.000Z</published>
    <updated>2022-12-22T02:37:28.985Z</updated>
    
    <content type="html"><![CDATA[<p>我的linux入门是redhat系，跟着兄弟连用的centos。之后一直用的debian系，包括桌面日用，ubuntu，deepin，kubuntu，mint。早就听说了Arch邪教，纯命令安装系统，需要对linux系统有更深的了解，也借这个契机来试试。</p><h2 id="第一步：虚拟机试探"><a href="#第一步：虚拟机试探" class="headerlink" title="第一步：虚拟机试探"></a>第一步：虚拟机试探</h2><ol><li><p>官网下载<a href="https://archlinux.org/download/">安装包</a></p></li><li><p>启动vBox，开始进入安装界面</p></li><li><p>确保开启虚拟机的EFI支持</p></li><li><p>确保网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ip link</span><br><span class="line"><span class="comment">#有线网络</span></span><br><span class="line">dhcpcd</span><br><span class="line"><span class="comment">#无线网络</span></span><br><span class="line">iwctl</span><br><span class="line">[iwd] device list</span><br><span class="line">[iwd] station device scan</span><br><span class="line">[iwd] station device get-networks</span><br><span class="line">[iwd] station device connect SSID</span><br><span class="line"></span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>更新系统时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br><span class="line"><span class="comment">#检查服务状态</span></span><br><span class="line">timedatectl status</span><br></pre></td></tr></table></figure></li><li><p>系统分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l  </span><br><span class="line">cfdisk /dev/sdx  (x替换成相应的硬盘字母，一般是a或b，默认gpt即可)</span><br></pre></td></tr></table></figure><p>分区结果</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210318123200700.png" alt="image-20210318123200700"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1</span><br><span class="line">mkfs.ext4 /dev/sda3</span><br><span class="line">mkswap /dev/sda2</span><br><span class="line">swapon /dev/sda2</span><br></pre></td></tr></table></figure></li><li><p>挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br><span class="line"><span class="comment"># 找到中国镜像移到最上面或者添加</span></span><br><span class="line">Server = http://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line"><span class="comment"># pacstrap脚本安装arch基础</span></span><br><span class="line">pacstrap /mnt base base-devel linux linux-firmware dhcpcd vim</span><br></pre></td></tr></table></figure></li><li><p>生成fstab挂载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure></li><li><p>切换根目录，进入安装好的系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure></li><li><p>本地化设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br><span class="line"></span><br><span class="line">vim /etc/locale.gen</span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_TW.UTF-8 UTF-8</span><br><span class="line">locale-gen</span><br><span class="line"></span><br><span class="line">vim /etc/locale.conf</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">vim /etc/hostname</span><br><span class="line">jack1024</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1jack1024.localdomainjack1024</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置root密码</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure></li><li><p>设置微码引导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#intel CPU</span></span><br><span class="line">pacman -S intel-ucode</span><br><span class="line"><span class="comment">#AMD CPU</span></span><br><span class="line">pacman -S amd-ucode</span><br></pre></td></tr></table></figure></li><li><p>安装引导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober ntfs-3g grub efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成并查看引导配置</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">cat /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210318131450261.png" alt="image-20210318131450261"></p><p>出现这个说明安装一切搞定，重启后进入邪教生活。</p></li><li><p>常用软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重启后登录</span></span><br><span class="line">jack1024 login: root</span><br><span class="line">password: ****</span><br><span class="line"><span class="comment">#联网</span></span><br><span class="line">dhcpd</span><br><span class="line">ping www.baidu.com</span><br><span class="line">systemctl <span class="built_in">enable</span> dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置国内源</span></span><br><span class="line">vim /etc/pacman.conf</span><br><span class="line"><span class="comment">#文档末尾添加</span></span><br><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"><span class="comment">#安装 archlinuxcn-keyring 包以导入 GPG key</span></span><br><span class="line">pacman -S archlinuxcn-keyring</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line">pacman -Syyu</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装常用软件</span></span><br><span class="line">pacman -S openssh man git</span><br><span class="line">systemctl start sshd</span><br><span class="line">systemctl <span class="built_in">enable</span> ssdd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加用户</span></span><br><span class="line">useradd -m -G wheel -s /bin/bash username</span><br><span class="line">passwd username</span><br><span class="line"></span><br><span class="line"><span class="comment">#给用户sudo权利</span></span><br><span class="line">pacman -S sudo</span><br><span class="line"><span class="comment">#第一种方法</span></span><br><span class="line">su - root</span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment">#找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br><span class="line"><span class="comment">#第二种方法</span></span><br><span class="line">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class="line">visudo</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装zsh</span></span><br><span class="line"><span class="comment">#不知道为什么虚拟机无法从github clone，所以采用gitee</span></span><br><span class="line">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh</span><br><span class="line"><span class="comment">#找到以下部分</span></span><br><span class="line"><span class="comment"># Default settings</span></span><br><span class="line">ZSH=<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line">BRANCH=<span class="variable">$&#123;BRANCH:-master&#125;</span></span><br><span class="line"><span class="comment">#把</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line"><span class="comment">#替换为</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://gitee.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line"></span><br><span class="line">chmod 777 install.sh</span><br><span class="line">bash install.sh</span><br><span class="line"><span class="comment"># 然后参考之前的linux工作环境配置那篇博客自定义zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于虚拟机暂时无法访问github，需要通过gitee安装一些插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/mirror-github/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/lxgyChen/zsh-autosuggestions.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestion</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$ZSH_CUSTOM</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经过多次试错终于能让虚拟机从github拉取项目了</span></span><br><span class="line">用浏览器访问 IPAddress.com 使用 IP Lookup 工具获得</span><br><span class="line">github.com</span><br><span class="line">github.global.ssl.fastly.net</span><br><span class="line">raw.githubusercontent.com</span><br><span class="line">三个域名的ip地址</span><br><span class="line">然后写入/etc/hosts中即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210318160332058.png" alt="image-20210318160332058"></p></li><li><p>安装图形界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装声卡驱动</span></span><br><span class="line">sudo pacman -S alsa-utils pulseaudio pulseaudio-alsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看显卡型号</span></span><br><span class="line">lspci | grep VSA</span><br><span class="line"><span class="comment">#查看独显型号</span></span><br><span class="line">lspci | grep 3D</span><br><span class="line"><span class="comment">#参考官网驱动表进行安装</span></span><br><span class="line">sudo pacman -S 驱动包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装输入设备驱动</span></span><br><span class="line">pacman -S xf86-input-libinput</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装笔记本触摸板驱动</span></span><br><span class="line">sudo pacman -S xf86-input-synaptics</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装中文字体</span></span><br><span class="line">sudo pacman -S ttf-dejavu wqy-bitmapfont wqy-microhei wqy-zenhei noto-fonts noto-fonts-emoji</span><br><span class="line"></span><br><span class="line"><span class="comment"># xorg用于实现窗口系统，sddm是登陆管理器，登陆管理器还有lightdm等等，但是个人比较推荐sddm，sddm可以支持多个桌面环境的切换。</span></span><br><span class="line">pacman -S xorg xorg-server</span><br><span class="line"><span class="comment">#安装kde桌面</span></span><br><span class="line">pacman -S plasma</span><br><span class="line"><span class="comment">#安装kde应用</span></span><br><span class="line">pacman -S kde-applications</span><br><span class="line"><span class="comment">#安装sddm图形登录界面</span></span><br><span class="line">sudo pacman -S sddm sddm-kcm</span><br><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装网络管理</span></span><br><span class="line">sudo pacman -S net-tools networkmanager</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager</span><br></pre></td></tr></table></figure></li><li><p>virtualbox安装增强功能（经过反复折腾，最终安装失败）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman</span><br><span class="line">sudo pacman -S linux-headers</span><br><span class="line">sudo pacman -S base-devel</span><br><span class="line"><span class="comment">#理论上安装以上就行了，但是还是失败了，不知道为什么</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="安装主步骤："><a href="#安装主步骤：" class="headerlink" title="安装主步骤："></a>安装主步骤：</h2><ol><li>联网</li><li>更新时间</li><li>创建分区</li><li>格式化挂载点</li><li>挂载分区</li><li>国内镜像置顶</li><li>拉取安装件（包括devel）</li><li>生成挂载文件</li><li>切换根目录</li><li>调整时区</li><li>生成配置文件</li><li>本地化修改</li><li>修改root密码</li><li>网络工具安装</li><li>安装微码引导</li></ol><h2 id="pacman包管理"><a href="#pacman包管理" class="headerlink" title="pacman包管理"></a>pacman包管理</h2><ul><li>简洁高效</li><li>拥有神器：Arch User Repository</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地软件仓库更新情况</span></span><br><span class="line">pacman -Sy</span><br><span class="line"><span class="comment"># 强行更新本地软件仓库</span></span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment"># 从本地仓库更新软件</span></span><br><span class="line">pacman -Su</span><br><span class="line"><span class="comment"># 优雅の一步：同步并更新所有</span></span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line"><span class="comment">#滚动更新</span></span><br><span class="line">pacman -Syyu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">pacman -S 软件名</span><br><span class="line"><span class="comment"># 通过正则表达式搜索软件</span></span><br><span class="line">pacman -Ss 正则表达式</span><br><span class="line"><span class="comment"># 清除本地软件仓库</span></span><br><span class="line">pacman -Sc</span><br><span class="line"><span class="comment"># 完全清空包缓存（Warning: 关于pacman -Scc，仅在你确定不需要做任何软件包降级工作时才这样做。pacman -Scc会从缓存中删除所有软件包）</span></span><br><span class="line">pacman Scc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅仅删除软件本身（不推荐）</span></span><br><span class="line">pacman -R 软件名</span><br><span class="line"><span class="comment"># 删除软件、它的依赖（推荐）</span></span><br><span class="line">pacman -Rs 软件名</span><br><span class="line"><span class="comment"># 删除软件、它的依赖、全局配置文件，本地配置文件不会删除（推荐）</span></span><br><span class="line">pacman -Rns 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装软件包</span></span><br><span class="line">pacman -Q</span><br><span class="line"><span class="comment"># 列出自己安装的软件</span></span><br><span class="line">pacman -Qe</span><br><span class="line"><span class="comment"># 列出安装的软件（只有名字）</span></span><br><span class="line">pacman -Qq</span><br><span class="line"><span class="comment"># 通过正则查询本地安装的软件</span></span><br><span class="line">pacman -Qs 正则表达式</span><br><span class="line"><span class="comment"># 列出所有孤儿包</span></span><br><span class="line">pacman -Qdt</span><br><span class="line"><span class="comment"># 删除所有孤儿包</span></span><br><span class="line">pacman -R $(pacman -Qdtq)</span><br><span class="line"><span class="comment"># 查新哪些包拥有指定文件</span></span><br><span class="line">pacman -Qo 文件名</span><br></pre></td></tr></table></figure><h3 id="AUR助手"><a href="#AUR助手" class="headerlink" title="AUR助手"></a>AUR助手</h3><ul><li><p>Arch 用户软件仓库 通常称为 AUR，是给 Arch 用户的基于社区的软件存储库。</p></li><li><p>什么是 AUR（Arch 用户软件仓库）？</p><p>Arch 用户软件仓库 通常称为 AUR，是给 Arch 用户的基于社区的软件存储库。</p><p>根据软件包在 AUR 社区的流行程度，用户编译的软件包会进入到 Arch 的官方存储库。</p></li><li><p>什么是 AUR 助手？</p><p>AUR 助手是一个包装程序，允许用户从 AUR 存储库安装软件包，而无需手动干预。</p><p>很多用例实现了自动化，比如包搜索、解决依赖关系、检索和构建 AUR 包、Web 内容检索和 AUR 包提交之类。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Yay 是 Arch Linux 下基于 CLI 的最佳 AUR 助手，使用 Go 语言编写。Yay 是基于 yaourt、apacman 和 pacaur 设计的。</span></span><br><span class="line"><span class="comment"># 这是最合适推荐给新手的 AUR 助手。类似于 Pacman，其使用方法和 pacman 中的命令和选项很相似，可以让用户在搜索过程中找到匹配的软件包提供程序，并进行选择。</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay-git</span><br><span class="line">makepkg -si</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后就可以直接使用yay命令了，和pacman几乎一致的命令</span></span><br></pre></td></tr></table></figure><p>用debian系的小伙都惊呆了，AUR是真的牛皮</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imgimage-20210318212110059.png" alt="image-20210318212110059"></p>]]></content>
    
    
    <summary type="html">Arch邪教入教之路记录</summary>
    
    
    
    <category term="技术" scheme="https://yangfanjack.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://yangfanjack.github.io/tags/Linux/"/>
    
    <category term="技术" scheme="https://yangfanjack.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存技术</title>
    <link href="https://yangfanjack.github.io/2021/03/16/redis%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
    <id>https://yangfanjack.github.io/2021/03/16/redis%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/</id>
    <published>2021-03-16T02:54:17.000Z</published>
    <updated>2022-12-22T02:37:28.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis简介："><a href="#Redis简介：" class="headerlink" title="Redis简介："></a>Redis简介：</h2><p><strong>概念：</strong>redis是一款高性能的NOSQL（Not Only SQL）系列的菲关系型数据库</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220522094933.png" alt="image-20210316153023744"></p><p><strong>Redis特点：</strong></p><ul><li><p>Redis 是一个开源的使用 ANSI、C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p></li><li><p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p></li><li><p>关系型数据库和非关系数据库是<strong>互补的关系</strong>，通常情况下使用关系型数据库，在适合的情况下使用NOSQL数据库能够堆关系型数据库的不足进行弥补从而提高网站的性能。</p></li><li><p>一般会将数据存储在关系型数据库中，在nosql数据库中备份关系型数据库的数据</p></li></ul><p><strong>目前Redis支持的键值数据类型如下：</strong></p><ol><li>字符串类型：string</li><li>哈希类型：hash</li><li>列表类型：list</li><li>集合类型：set</li><li>有序集合类型：sortedset</li></ol><p><strong>Redis的应用场景：</strong></p><ol><li>缓存（数据查询，短连接，新闻内容，商品内容）</li><li>聊天室的在线好友列表</li><li>任务队列（秒杀，抢购，12306抢票）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒级别）</li><li>分布式集群架构中的session分离</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>debian：<code>sudo apt install redis</code></p><p>启动服务：执行<code>sudo systemctl start redis</code></p><p>关闭服务：执行<code>sudo systemctl stop redis</code></p><p>进入客户端：<code>redis-cli</code></p><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><ol><li><p>字符串类型：string</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line">get key</span><br><span class="line">del key</span><br></pre></td></tr></table></figure></li><li><p>哈希类型：hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">hget key field</span><br><span class="line">hgetall key</span><br><span class="line">hdel key field</span><br></pre></td></tr></table></figure></li><li><p>列表类型：list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpush key value</span><br><span class="line">rpush key value</span><br><span class="line">lrange key start end</span><br><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure></li><li><p>集合类型：set</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sadd key value</span><br><span class="line">smembers key</span><br><span class="line">srem key value</span><br></pre></td></tr></table></figure></li><li><p>有序集合类型：sortedset</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zadd key score value</span><br><span class="line">zrange key start end [withscores]</span><br><span class="line">zrem key value</span><br></pre></td></tr></table></figure></li></ol><p><strong>通用命令：</strong></p><ol><li><code>keys *</code>：查询所有的键</li><li><code>type key</code>：获取键对应的value的类型</li><li><code>del key</code>：删除指定的key value</li></ol><h2 id="持久化："><a href="#持久化：" class="headerlink" title="持久化："></a>持久化：</h2><ul><li>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</li></ul><h4 id="Redis的持久化机制"><a href="#Redis的持久化机制" class="headerlink" title="Redis的持久化机制"></a>Redis的持久化机制</h4><ul><li><p><strong>RDB：</strong>默认方式，不需要进行配置，默认就使用这种机制</p><p>在一定的间隔时间中，检测key的变化情况，然后持久化数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">编辑/etc/redis/redis.conf文件</span><br><span class="line"><span class="section"># after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="section"># after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="section"># after 60 sec if at least 10000 keys changed</span></span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>重新启动redis服务器，并指定redis.conf：<code>redis-server /etc/redis/redis.conf</code></p><p><strong>注意：</strong>在linux上通过apt安装的redis，关闭服务器后重启默认会重现之前数据，也就是默认使用了RDB的方式。配置文件在<code>/etc/redis/redis.conf</code>，rdb存储文件在<code>/var/lib/redis</code>目录下。</p></li><li><p><strong>AOF：</strong>日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><p>编辑redis.windwos.conf文件        </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no（关闭aof） --&gt; appendonly yes （开启aof）</span><br><span class="line"></span><br><span class="line"><span class="section"># appendfsync always ： 每一次操作都进行持久化</span></span><br><span class="line">appendfsync everysec ： 每隔一秒进行一次持久化</span><br><span class="line"><span class="section"># appendfsync no ： 不进行持久化</span></span><br></pre></td></tr></table></figure><h2 id="Redis的java客户端：Jedis"><a href="#Redis的java客户端：Jedis" class="headerlink" title="Redis的java客户端：Jedis"></a>Redis的java客户端：Jedis</h2></li></ul><p>使用步骤：</p><ol><li><p><strong>导入Jedis相关jar包</strong></p></li><li><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line">jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>Jedis对于String，hash，list，set，linkedset的操</strong>作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">//存储</span></span><br><span class="line">jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">String username = jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">jedis.setex(<span class="string">&quot;activecode&quot;</span>,<span class="number">20</span>,<span class="string">&quot;hehe&quot;</span>);<span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// 存储hash</span></span><br><span class="line">jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取hash</span></span><br><span class="line">String name = jedis.hget(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">// keyset</span></span><br><span class="line">Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">    <span class="comment">//获取value</span></span><br><span class="line">    String value = user.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// list 存储</span></span><br><span class="line">jedis.lpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从左边存</span></span><br><span class="line">jedis.rpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从右边存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list 弹出</span></span><br><span class="line">String element1 = jedis.lpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element1);</span><br><span class="line"></span><br><span class="line">String element2 = jedis.rpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// set 存储</span></span><br><span class="line">jedis.sadd(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;php&quot;</span>,<span class="string">&quot;c++&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set 获取</span></span><br><span class="line">Set&lt;String&gt; myset = jedis.smembers(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">System.out.println(myset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// sortedset 存储</span></span><br><span class="line">jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">3</span>,<span class="string">&quot;亚瑟&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">30</span>,<span class="string">&quot;后裔&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">55</span>,<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sortedset 获取</span></span><br><span class="line">Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">&quot;mysortedset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(mysortedset);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>Jedis连接池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0.创建一个配置对象</span></span><br><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"><span class="comment">//3. 使用</span></span><br><span class="line">jedis.set(<span class="string">&quot;hehe&quot;</span>,<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line"><span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><p>连接池工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jedis.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxTotal&quot;</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxIdle&quot;</span>)));</span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">&quot;host&quot;</span>),Integer.parseInt(pro.getProperty(<span class="string">&quot;port&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取连接方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">servlet是javaweb的地基。基于此的http协议、request、response等servlet9大内置对象，会话技术，JSP，MVC模式，三层架构...</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Web" scheme="https://yangfanjack.github.io/tags/Web/"/>
    
    <category term="Java" scheme="https://yangfanjack.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb三大组件</title>
    <link href="https://yangfanjack.github.io/2021/03/16/javaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    <id>https://yangfanjack.github.io/2021/03/16/javaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/</id>
    <published>2021-03-16T02:51:26.000Z</published>
    <updated>2022-12-22T02:37:28.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>见之前的两篇博客：《javaWeb核心-理解servlet》，《javaWeb核心-servlet细节》，讲的很详细</li></ul><h2 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h2><ul><li>拦截请求：完成通用操作（登录验证，统一编码，敏感字符过滤）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span><span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filterDemo1被执行了....&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>web.xml配置</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>过滤器执行流程</strong></p><ol><li>执行放行前的代码</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下边的代码（一般是对response对象做增强）</li></ol></li><li><p><strong>过滤器生命周期方法</strong></p><ol><li>**init:**在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</li><li>**doFilter:**每一次请求被拦截资源时，会执行。执行多次</li><li>**destroy:**在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源</li></ol></li><li><p><strong>过滤器配置详解</strong></p><ul><li>拦截路径配置：<pre><code>      1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行   2. 拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行   3. 后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行   4. 拦截所有资源：/*        访问所有资源时，过滤器都会被执行</code></pre></li><li>拦截方式配置：<strong>资源被访问的方式</strong><ul><li>注解配置：设置dispatcherTypes属性<ol><li>REQUEST：默认值。浏览器直接请求资源</li><li>FORWARD：转发访问资源</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ol></li><li>web.xml配置：设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签即可</li></ul></li></ul></li><li><p><strong>过滤器链（配置多个过滤器）</strong></p><ul><li>执行顺序：如果有两个过滤器：过滤器1和过滤器2<pre><code>      1. 过滤器1   2. 过滤器2   3. 资源执行   4. 过滤器2   5. 过滤器1 </code></pre></li><li>过滤器先后顺序问题：<ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行<ul><li>如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li>web.xml配置： <code>&lt;filter-mapping&gt;</code>谁定义在上边，谁先执行</li></ol></li></ul><h3 id="敏感词汇过滤"><a href="#敏感词汇过滤" class="headerlink" title="敏感词汇过滤"></a>敏感词汇过滤</h3><ul><li><p>在Filter中对request中的请求参数进行过滤操作，但是由于只有<code>getProperty()</code>这个方法，没有<code>setProperty()</code>这个方法，所以，我们需要对request对象的getParameter方法进行<strong>增强</strong>。产生一个新的request对象。</p></li><li><p>增强对象功能，可以使用两种模式：装饰者模式和代理模式</p><ol><li><p><strong>装饰模式</strong></p></li><li><p><strong>代理模式</strong></p></li></ol><ul><li><p>概念：</p><ol><li>真实对象：被代理的对象</li><li>代理对象：</li><li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li></ol><ul><li>实现方式：<br>  1</li></ul><ol><li>静态代理：有一个类文件描述代理对象<ol start="2"><li>动态代理：在内存中形成代理类<ul><li>实现步骤：<ol><li>代理对象和真实对象实现相同的接口</li></ol></li></ul><ol start="2"><li>代理对象 = Proxy.newProxyInstance();</li><li>使用代理对象调用方法。</li><li>增强方法</li></ol></li></ol><ul><li>增强方式：<pre><code>   1. 增强参数列表    2. 增强返回值类型    3. 增强方法体执行逻辑    </code></pre></li></ul></li></ol></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">接口类 proxy = Proxy.newProxyInstance(</span><br><span class="line">    <span class="comment">// 参数1：真实对象的类加载器</span></span><br><span class="line">    myBeanpostProcessor.class.getClassLoader(),</span><br><span class="line">    <span class="comment">//参数2：真实对象实现的所有的接口,接口是特殊的类，使用Class[]装载多个接口</span></span><br><span class="line">    bean.getClass().getInterfaces(), </span><br><span class="line">    <span class="comment">//参数3： 接口，传递一个匿名内部类对象</span></span><br><span class="line">    <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">        <span class="comment">//proxy 代理对象</span></span><br><span class="line">        <span class="comment">//method:代理的方法对象</span></span><br><span class="line">        <span class="comment">//args:方法调用时参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">            Object obj=method.invoke(bean, args);<span class="comment">//代理类，参数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ul><li><strong>事件：</strong>一件事情</li><li><strong>事件源：</strong>事件发生的地方</li><li><strong>监听器：</strong>一个对象</li><li><strong>注册监听：</strong>将事件，事件源绑定在一起。当事件源发生某个事件时，执行监听器代码</li></ul><p><strong>说一个用来加载配置文件的监听器类</strong>（web框架中这种监听器已经写好，我们只需要配置即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletContextListener类 <span class="comment">//监听ServletContext对象的创建和销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> <span class="comment">//服务器启动后自动调用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> <span class="comment">//ServletContext对象创建后会调用该方法</span></span></span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p></li><li><p>配置<br>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.itcast.web.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br></pre></td></tr></table></figure><p>​    </p></li></ol>]]></content>
    
    
    <summary type="html">JavaWeb三大组件：Servlet，Filter，Listener</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Web" scheme="https://yangfanjack.github.io/tags/Web/"/>
    
    <category term="Java" scheme="https://yangfanjack.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java基础快速回顾-下</title>
    <link href="https://yangfanjack.github.io/2021/03/09/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%8B/"/>
    <id>https://yangfanjack.github.io/2021/03/09/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%8B/</id>
    <published>2021-03-09T03:42:39.000Z</published>
    <updated>2022-12-22T02:37:28.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul><li>匿名内部类可以省去定义实现类，但是语法太复杂</li><li>lambda表达式不关注面向对象，返璞归真，仅仅关注内容本身。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一些参数，一个箭头，一段重写代码</span></span><br><span class="line">() -&gt; System.out.println(<span class="string">&quot;lambda&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>将Runnable接口作为参数进行传递，可以使用两种方法：</li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223437.png" alt="image-20210309120501501"></p><ul><li>使用lambda必须满足接口中有且仅有一个抽象方法</li><li>有且仅有一个抽象方法的接口称为 “函数式接口”</li><li>Lambda的省略写法有如下要求：<ol><li>括号中参数列表的数据类型可以省略</li><li>括号中的参数只有一个，那么类型和（）都可以省略</li><li>如果{}的代码只有一行，都可以省略{} return 分号，且必须要一起省略，不能只省略部分</li></ol></li></ul><h2 id="FIle类"><a href="#FIle类" class="headerlink" title="FIle类"></a>FIle类</h2><ul><li><strong>文件和目录</strong>的抽象表示，用于文件&amp;目录的创建、查找和删除等操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File类的4个成员变量</span></span><br><span class="line"><span class="comment">//路径分隔符(windows分号,linux冒号)</span></span><br><span class="line"><span class="keyword">static</span> String pathSeparator;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> pathSeparatorChar;</span><br><span class="line"><span class="comment">//默认名称分隔符(windows反斜杠，linux正斜杠)</span></span><br><span class="line"><span class="keyword">static</span> String separator;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> separator;</span><br><span class="line"><span class="comment">//注意：操作路径的时候，路径不能写死了，根据不同系统更换</span></span><br></pre></td></tr></table></figure><ul><li>File构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">File(String pathname);</span></span><br><span class="line"><span class="comment">File(String parent,String child);</span></span><br><span class="line"><span class="comment">File(File parent,String child)</span></span><br><span class="line"><span class="comment">路径可以是文件名，也可以是文件夹名</span></span><br><span class="line"><span class="comment">可以相对路径，也可以绝对路径</span></span><br><span class="line"><span class="comment">路径可以是存在的，也可以是不存在的</span></span><br><span class="line"><span class="comment">创建File对象，只是把字符串封装为File对象，不考虑路径的真假情况</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File f1 = <span class="keyword">new</span> File(<span class="string">&quot;/home/jack1024/桌面/a.txt&quot;</span>);</span><br><span class="line">    File f2 = <span class="keyword">new</span> File(<span class="string">&quot;/home/jack1024/桌面/a&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>File类常用方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span></span>;<span class="comment">//文件/目录绝对路径名字符串（无论构造方法中传递相对还是绝对，都返回绝对路径）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span>;<span class="comment">//文件/目录路径名字符串（构造方法中传递的字符串）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//文件/目录名字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//文件字节大小(目录没有大小概念)</span></span><br></pre></td></tr></table></figure><ul><li>判断功能：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;<span class="comment">//该文件/目录是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span>;<span class="comment">//是否为目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>;<span class="comment">//是否为文件</span></span><br></pre></td></tr></table></figure><ul><li>创建 &amp; 删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span></span>;<span class="comment">//当该名字的文件不存在时，创建一个新的空文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;<span class="comment">//删除由此File表示的文件或目录，不走回收站</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>;<span class="comment">//创建由此File表示的目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span>;<span class="comment">//创建由此File表示的目录，包括任何必须但不存在的父目录</span></span><br></pre></td></tr></table></figure><ul><li>目录遍历<ul><li>包含隐藏文件/文件夹</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] list();<span class="comment">//返回一个String数组，表示该File目录中所有子文件或目录</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles();<span class="comment">//返回一个File数组，表示该File目录中所有子文件或目录</span></span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>直接递归 &amp; 间接递归</li><li>递归一定要有停止的条件约束，否则会出现栈内存溢出StackOverFlowError</li><li>递归的次数也不能太多，否则也可能发生栈内存溢出</li><li>构造方法中禁止递归</li></ul><p>递归图示：</p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223505.png" alt="image-20210310002114259"></p><h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> File[] listFiles(FileFilter filter);</span><br><span class="line"><span class="keyword">public</span> File[] listFiles(FilenameFilter filter);</span><br></pre></td></tr></table></figure><p>通过重写accept()方法来实现</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223522.png" alt="image-20210310010209212"></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h4><ul><li>OutputStream：所有输出字节流的超类，接下来主要探讨其子类FileOutputStream：<ol><li>close()：释放资源</li><li>flush()：刷新此输出流并强制写出所有缓冲的输出字节</li><li>void write(byte[] b)：往文件写入多个字节</li><li>void write(int b)：往文件写入一个字节</li><li>void write(byte[] b,int off,int len)：往文件写入指定位置指定长度的放入的数组中的字节</li></ol></li><li>FileOutputStream构造方法：<ol><li>FileOutputStream(File file)</li><li>FileOutputStream(String name)</li><li>FileOutputStream(File file, boolean append)</li><li>FileOutputStream(String name, boolean append) </li></ol></li></ul><h4 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h4><ul><li>InputStream：表示字节输入流的所有子类超类。接下来主要探讨其子类FileInputStream：<ol><li>close()：释放资源</li><li>int read(byte[] b)：从文件读取一定数量的字节，并将其存在缓冲区数组b中</li><li>int read()：从文件读取一个字节</li></ol></li><li>FileInputStream构造方法：<ol><li>FileInputStream(File file)</li><li>FileInputStream(String name)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><ul><li><p>Reader：是一个抽象类</p><ol><li>int read()</li><li>int read(char[] cbuf)</li><li>void close()</li></ol></li><li><p>FileReader：文件字符输入流</p><p>构造方法：</p><ol><li>FileReader(File file)</li><li>FileReader(String name)</li></ol></li></ul><h4 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h4><ul><li><p>Writer：是一个抽象类</p><ol><li>void write(int c)：写入单个字符</li><li>void write(char[] cbuf)：写入字符数组</li><li>abstract void write(char[] cbuf,int off,int len)：写入字符数组的某一部分，off表示开始索引，len表示写的字符个数</li><li>void write(String str)：写入字符串</li><li>void write(String str, int off, int len)：写入字符串的某一部分</li><li>void flush()：刷新流的缓冲</li><li>void close()：刷新缓冲后关闭此流</li></ol></li><li><p>字符输出流和字节输出流的最大的区别就是字符输出流要将内容先写到内存缓冲区中（进行 字符——&gt;字节 过程），所以之后必须进行flush或者close。</p></li><li><p>FileWriter构造方法：</p><ol><li>FileWriter(File file)</li><li>FileWriter(String name)</li><li>FileWriter(File file, boolean append)</li><li>FileWriter(String name, boolean append) </li></ol></li><li><p>jdk1.7之前进行异常处理的过程</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类参数对象)&#123;</span><br><span class="line">    <span class="comment">//异常的处理逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//资源释放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jdk1.7后中进行流异常处理的过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象)&#123;<span class="comment">//流对象使用完毕自动释放</span></span><br><span class="line">    <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>()&#123;</span><br><span class="line">    <span class="comment">//异常的处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性集Properties"><a href="#属性集Properties" class="headerlink" title="属性集Properties"></a>属性集Properties</h3><ul><li>唯一一个和io流结合的集合</li><li>store：集合中数据持久化到硬盘存储</li><li>load：硬盘中的键值对读取到集合使用</li><li>Properties是一个双列集合，key和value都默认是字符串</li><li>setProperty方法相当于map中的put方法</li><li>getProperty方法相当于map中的set方法</li><li>stringPropertyNames方法相当于map中的keySet方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>);</span><br><span class="line">Proterties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">prop.setProperty(<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">prop.store(fw,<span class="string">&quot;save data&quot;</span>);</span><br><span class="line">fw.close;</span><br><span class="line"></span><br><span class="line">prop.load(fw);</span><br><span class="line">Set&lt;String&gt; set = prop.stringPropertyNames();</span><br><span class="line"><span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">    String value = prop.getProperty(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>properties文件中可以使用等号或者空格来分隔键值对</li><li>对中文进行处理的时候必须使用字符输入/出流</li></ul><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><ul><li><p>增强基本流（普通流都是一个一个地传，效率低下）</p></li><li><p>给基本字节输入输出流增加一个缓冲区，提高传输速率</p></li><li><p>BufferedInputStream(InputStream fis)</p><p>BufferedInputStream(InputStream fis, int size)</p></li><li><p>BufferedOutputStream(OutputStream fos)</p><p>BufferedOutputStream(OutputStream fos, int size)</p></li><li><p>BufferedWriter(Writer fw)</p><p>BufferedWriter(Writer fw, int size)</p></li><li><p>BufferedReader(Reader fr)</p><p>BufferedReader(Reader fr, int size)</p></li><li><p><strong>写和读的方法和基本流一致</strong></p><ol><li>BufferedWriter有一个特有的成员方法void newLine：写入一个行分隔符(不同操作系统统一一个方法)</li><li>BufferReader有一个特有的成员方法String readLine：读取一行数据(不同操作系统统一一个方法)</li></ol></li></ul><p>测试复制文件的效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入需要复制的文件路径:&quot;</span>);</span><br><span class="line">        String sourcePath = scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入粘贴的路径:&quot;</span>);</span><br><span class="line">        String targetPath = scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(sourcePath));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(targetPath));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(len);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        byte[] bytes = new byte[1024];</span></span><br><span class="line"><span class="comment">//        while((len = bis.read(bytes)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//            bos.write(bytes,0,len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> sumT = t2-t1;</span><br><span class="line">        System.out.println(<span class="string">&quot;复制过程总共耗时:&quot;</span>+sumT+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><ul><li>编码：字符——&gt;字节</li><li>解码：字节——&gt;字符</li><li>制定了编码，字节文件对应的字符集也就确定了，每个软件也就能根据软件功能转化字节为对应的字符供我们查看了</li><li>常见的字符集有ASCII字符集，GBK字符集，Unicode字符集</li><li>FileReader只能读取系统默认编码utf-8格式的文件，如果读取GBK格式的文件，就会产生乱码</li><li>引入转换流来解决：InputStreamReader和OutputStreamWriter是字节流和字符流的桥梁，可以指定编码表</li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223541.png" alt="image-20210311100154292"></p><ul><li><p>InputStreamReader(InputStream fis) //默认编码</p><p>InputStreamReader(InputStream fis, String charsetName) //指定编码</p></li><li><p>OutputStreamWriter(OutputStream fos)</p><p>OutputStreamWriter(OutputStream fos, String charsetName)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>,<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">osw.close();</span><br><span class="line"></span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>,<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.print((<span class="keyword">char</span>)len);</span><br><span class="line">&#125;</span><br><span class="line">isr.close();</span><br></pre></td></tr></table></figure><h3 id="序列化-amp-反序列化流"><a href="#序列化-amp-反序列化流" class="headerlink" title="序列化 &amp; 反序列化流"></a>序列化 &amp; 反序列化流</h3><p>把对象以字节的形式写入到文件中存储 并 从文件中读取对象到内存中继续使用，即是<strong>对象持久化</strong></p><ul><li><p>ObjectOutputStream(OutputStream os)：对象的序列化流</p><ul><li>void writeObject(Object obj)</li></ul></li><li><p>ObjectInputStream(IutputStream is)：对象的反序列化流</p><ul><li>Object readObject()</li></ul></li><li><p>要对对象进行序列化 or 反序列化，必须在类中实现<strong>Serializable</strong>接口</p></li><li><p>序列化的内容都是对象的内容，所以static的变量不能被序列化。如果想让一个成员变量不被序列化但是又没有static的含义，可以使用transient关键字声明变量</p></li><li><p>如果一个类实现了Serializable接口，编译后的.class文件中会带有一个序列号。序列化时，会将这个序号一同写入文件；<strong>当反序列化时，会将文件的序列号和.class文件中的序列号作对比</strong>，如果不同会抛<strong>InvalidClassException</strong>异常。（每次对类修改后都会重新生成一个序列号，为了避免异常，我们可以手动给Serializable实现类加上一个序列号）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serivalVersionUID = <span class="number">42L</span>;</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><ul><li>PrintStream：为其他输出流添加功能，使他们能方便打印各种数据值的表示形式<ol><li>print()</li><li>pringln()</li><li>继承自OutputStream的方法（如果使用write方法会查询编码表97-&gt;a；如果使用println or print方法会原样输出）</li></ol></li><li>构造方法：<ol><li>PrintStream(File file)</li><li>PrintStream(OutputStream out)</li><li>PrintStream(String fileName)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>);</span><br><span class="line">ps.write(<span class="number">97</span>);<span class="comment">//转化为字节</span></span><br><span class="line">ps.println(<span class="number">97</span>);<span class="comment">//原样打印到文件</span></span><br><span class="line">ps.close;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.setOut(ps);<span class="comment">//改变输出语句的目的地为ps的目的地</span></span><br><span class="line">System.out.println(<span class="string">&quot;haha&quot;</span>);<span class="comment">//会将haha字符串写到/home/jack1024/a.txt中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java网络编程"><a href="#Java网络编程" class="headerlink" title="Java网络编程"></a>Java网络编程</h2><p>TCP/IP协议是Internet中最基本，最广泛的协议，他定义了计算机计算机如何进因特网，数据如何在计算机间传输数据。它的内部包含一系列用于处理数据通信的协议</p><ul><li>UDP协议：无连接，效率更高，不安全</li><li>TCP协议：三次握手建立连接，四次挥手解除连接，效率较低，安全</li></ul><p>网络编程三要素：</p><ol><li>协议</li><li>IP地址：ipv4(32位：8<em>4)，ipv6(128位：16</em>8)，连接两台主机</li><li>端口：两个字节(0—1024—65535)，连接两台主机的两个进程</li></ol><h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><ul><li>客户端主动请求服务端建立连接，连接中包含一个IO对象，这个对象只能是字节流对象</li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223550.png" alt="image-20210311113110227"></p><p><strong>代码实现：</strong></p><p><strong>客户端</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223558.png" alt="image-20210311113550491"></p><p><strong>服务器</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223606.png" alt="image-20210311115105384"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"><span class="comment">//往服务器写</span></span><br><span class="line">OutputStream os = socket.getOutputStream();</span><br><span class="line">os.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">//从服务端拿</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        InputStream is = accept.getInputStream();</span><br><span class="line">        OutputStream os = accept.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        os.write(<span class="string">&quot;收到了&quot;</span>.getBytes());</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP文件上传案例"><a href="#TCP文件上传案例" class="headerlink" title="TCP文件上传案例"></a>TCP文件上传案例</h3><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223615.png" alt="image-20210311142418192"></p><h3 id="模拟B-S通信案例"><a href="#模拟B-S通信案例" class="headerlink" title="模拟B/S通信案例"></a>模拟B/S通信案例</h3><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li>函数式接口：有且仅有一个抽象方法的接口，但是可以包含其他方法（默认，静态，私有）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名称</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(可选参数信息)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lambda是延迟加载的，可以提升部分代码的性能。也就是说只有满足执行lambda中方法的条件，才会执行方法中的内容，否则不会执行。</li><li>函数式接口作为方法的参数，我们可以用lambda表达式 或者 匿名内部类 作为实参</li><li>函数式接口作为方法的返回值，我们可以返回这个接口的匿名内部类 或者 lambda表达式</li></ul><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.funciton.Supplier&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; sup)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sup.get();<span class="comment">//用来返回一个指定类型的数据对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = getString(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sam Smith&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.function.Consumer&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String name,Consumer&lt;String&gt; con)</span></span>&#123;</span><br><span class="line">    con.accept(name);<span class="comment">//用来消费name字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    method(<span class="string">&quot;Mariah Carey&quot;</span>,(String name)-&gt;&#123;</span><br><span class="line">        <span class="comment">//对传递的字符串进行处理消费</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//andThen()默认方法，连续组合多个Consumer的accept方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.function.Predicate&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s,Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.test(s);<span class="comment">//对传入的参数进行判断，返回真假</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">    <span class="keyword">boolean</span> b = checkString(s,()-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> s.length()&gt;<span class="number">5</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Predicate的and()，or()默认方法可以用来连接两个判断条件</span></span><br><span class="line"><span class="comment">//negate()默认方法可以对一个判断条件取反</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.function.Function&lt;T,R&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s,Function&lt;String,Integer&gt; fun)</span></span>&#123;</span><br><span class="line">    Integer in = fun.apply(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> staic <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    change(s,(String s)-&gt;&#123;<span class="comment">//将一个值从原类型转化为另一个类型</span></span><br><span class="line">    <span class="keyword">return</span> Ingeter.parseInt(s);    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//andThen()默认方法，连续组合多个Function的apply方法</span></span><br></pre></td></tr></table></figure><h2 id="Stream流式编程"><a href="#Stream流式编程" class="headerlink" title="Stream流式编程"></a>Stream流式编程</h2><ul><li><strong>Stream和io流</strong>不能说差不多，只能说是<strong>毫无关系</strong></li><li>极大地简化了对集合进行过滤 &amp; 遍历的操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">    .filter(name-&gt;name.startWith(<span class="string">&quot;杨&quot;</span>))</span><br><span class="line">    .filter(name-&gt;name.length==<span class="number">3</span>)</span><br><span class="line">    .foreach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><ul><li><strong>流式操作过程：</strong><ol><li>获取数据源(集合,数组)</li><li>数据转换(把数据源转化为Stream流)</li><li>执行操作获取想要的结果</li></ol></li></ul><h3 id="获得Stream流对象"><a href="#获得Stream流对象" class="headerlink" title="获得Stream流对象"></a>获得Stream流对象</h3><ol><li>所有collection集合可通过stream()方法获得</li><li>Stream接口有一个static方法of()，可以把数组转化为stream流</li></ol><h3 id="Stream对象的方法"><a href="#Stream对象的方法" class="headerlink" title="Stream对象的方法"></a>Stream对象的方法</h3><ul><li>stream属于管道流，只能使用一次，第一个Stream流调用完毕，数据会流到下一个Stream流身上，此时第一个Stream流就不能再调用方法了</li></ul><h4 id="延迟方法"><a href="#延迟方法" class="headerlink" title="延迟方法"></a>延迟方法</h4><ul><li>返回值类型仍然是Stream接口自身类型的方法，支持链式调用</li><li>每个流 流到下一步，上一步的流就关闭了，这个要注意，这也是为什么叫流，它是一个动态的过程</li></ul><p><strong>filter方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Sam&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = stream.filter(name-&gt;&#123;</span><br><span class="line">    reuturn name.startWith(<span class="string">&quot;J&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>map方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream2 = stream.map(String s-&gt;&#123;</span><br><span class="line">    reuturn Integer.parse(s);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>limit方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;T&gt; limit(long maxSize)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>,<span class="string">&quot;咚咚&quot;</span>);</span><br><span class="line"><span class="comment">//只取前两个元素</span></span><br><span class="line">stream.limit(<span class="number">2</span>).forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><p><strong>skip方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;T&gt; skip(long n)：跳过前n个元素</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>,<span class="string">&quot;咚咚&quot;</span>);</span><br><span class="line"><span class="comment">//只取前两个元素</span></span><br><span class="line">stream.skip(<span class="number">2</span>).forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><p><strong>concat方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span><br><span class="line"><span class="comment">//两个流合并为一个新的流</span></span><br><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; concat = Stream.concat(stream1,stream2);</span><br><span class="line">concat.forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><h4 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h4><ul><li>返回值类型不再是Stream接口自身类型的方法，不再支持链式调用</li></ul><p><strong>count方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//long count():统计个数</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Stream&lt;Ingeter&gt; stream = list.stream();</span><br><span class="line"><span class="keyword">long</span> count = stream.count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><p><strong>forEach方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void forEach(Consumer&lt;? super T&gt; con)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Sam&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">stream.forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul><li>虽然lambda已经很简单了，但是方法引用还可以堆lambda表达式继续简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name-&gt;System.out.println(name);<span class="comment">//lambda表达式</span></span><br><span class="line">System.out::println;<span class="comment">//方法引用</span></span><br></pre></td></tr></table></figure><p>几种情况：</p><ol><li>通过对象名引用成员方法</li><li>通过类名引用静态方法</li><li>通过super引用父类成员方法</li><li>通过this引用本类成员方法</li><li>构造方法的方法引用</li><li>数组的构造器引用</li></ol><h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><ul><li>黑盒测试：不需要关注代码，只需要看输入是否能得到输出</li><li>白盒测试：通过代码来测试程序的流程正确性（Junit属于白盒测试）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义测试类</span></span><br><span class="line"><span class="comment">/**几个建议</span></span><br><span class="line"><span class="comment">1.类名：被测试类名Test</span></span><br><span class="line"><span class="comment">2.包名：XXX.XXX.test</span></span><br><span class="line"><span class="comment">3.方法名：test被测试的方法名</span></span><br><span class="line"><span class="comment">4.返回值：void</span></span><br><span class="line"><span class="comment">5.参数列表：空参</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前需要导入junit依赖</span></span><br><span class="line"><span class="keyword">public</span> CaculateTest&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Before和@After注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有测试方法前和后都会执行的两个注解@Before和@After</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>查看之前写的一片博客《java-反射》</p></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>查看之前写的一片博客《java-注解》</p></blockquote>]]></content>
    
    
    <summary type="html">Java是一门纯粹的面向对象的高级的平台无关的编程语言</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://yangfanjack.github.io/tags/Java/"/>
    
    <category term="JavaSE" scheme="https://yangfanjack.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>java基础快速回顾-中</title>
    <link href="https://yangfanjack.github.io/2021/03/06/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%AD/"/>
    <id>https://yangfanjack.github.io/2021/03/06/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%AD/</id>
    <published>2021-03-06T01:36:20.000Z</published>
    <updated>2022-12-22T02:37:28.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java某些类"><a href="#Java某些类" class="headerlink" title="Java某些类"></a>Java某些类</h2><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><ul><li>java的根类</li></ul><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><ul><li>Object类的toString()方法默认返回该对象实现类的“类名+@+hashcode”值</li><li>看一个类是否重写了toString方法，可以通过直接打印对象名字，没有重写的显示对象地址值，重写的按照toString重写内容自定义打印</li></ul><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><ul><li>Object类的equals()方法默认就是用==来进行比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Person p = (Person)obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age==p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">10</span>;</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.name = <span class="string">&quot;sam&quot;</span>;</span><br><span class="line">        p2.age = <span class="number">14</span>;</span><br><span class="line">        p1.equals(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h3><ul><li>Objectsq工具类提供了一些静态方法来操作对象，这些方法是空指针安全，容忍空指针的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">null</span>;</span><br><span class="line">String s2 = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">//会报空指针异常</span></span><br><span class="line">System.out.println(Objects.equals(s1,s2));<span class="comment">//一切正常</span></span><br></pre></td></tr></table></figure><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><ul><li>毫秒是日期计算的最小单位</li><li>0毫秒点：1970年1月1日00:00:00（中国属于东八区，会+8小时）</li><li>日期转化为时间戳，就是距离0毫秒点经过了多少毫秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();<span class="comment">//获取系统当前日期时间</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">long</span> ms);<span class="comment">//时间戳转化为日期时间</span></span><br><span class="line"><span class="keyword">long</span> ms = date.getTime();<span class="comment">//把日期转化为毫秒时间戳</span></span><br></pre></td></tr></table></figure><h3 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h3><ul><li>根据自定义格式相互转化Date &amp; String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是抽象类，无法直接使用</span></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="comment">//使用SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="comment">//参数是格式(y年，M月，d日，H时，m分，s秒)</span></span><br><span class="line">DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//两个方法：format(Date d)和parse(String s)</span></span><br><span class="line">DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String text = sdf.format(date);<span class="comment">//Date——&gt;String</span></span><br><span class="line">Date date2 = sdf.parse(text);<span class="comment">//String——&gt;Date，这是一个抛异常的方</span></span><br></pre></td></tr></table></figure><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是抽象类，无法直接使用</span></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="comment">//获得Calendar类的子类对象</span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">int</span> y = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> m = c.get(Calendar.MONTH);<span class="comment">//0——11</span></span><br><span class="line"><span class="keyword">int</span> d = c.get(Calendar.Date);</span><br><span class="line"><span class="keyword">int</span> h = c.get(Calendar.HOUR);</span><br><span class="line"><span class="keyword">int</span> m = c.get(Calendar.MINUTE);</span><br><span class="line"><span class="keyword">int</span> s = c.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">c.set(Calendar.YEAR,<span class="number">1999</span>);</span><br><span class="line">c.add(Calendar.YEAR,<span class="number">2</span>);<span class="comment">//2001</span></span><br><span class="line">c.add(Calendar.YEAR,-<span class="number">4</span>);<span class="comment">//1997</span></span><br><span class="line"></span><br><span class="line">Date date = c.getTime();<span class="comment">//Calendar——&gt;Date</span></span><br></pre></td></tr></table></figure><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> s = System.currentTimeMillis();<span class="comment">//一般用来测试程序执行时间</span></span><br><span class="line"><span class="comment">//arraycopy(源数组，源数组中的起始位置，目标数组，目标数组中的起始位置，要复制的数组元素数量);</span></span><br><span class="line"><span class="keyword">int</span>[] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//复制后dest=&#123;1,2,3,9,10&#125;</span></span><br></pre></td></tr></table></figure><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><ul><li>字符串底层是一个final常亮，每次对String修改后都需要新建一个String类型的对象，效率很低，为了应对这种情况，StringBuilder应运而生。</li><li>StringBuiler是字符串缓冲区，可以提高字符串操作效率，可以看做是长度可以变化的字符串，底层是一个不被final修饰的byte数组，初始容量16，在修改过程中如果不够会自动扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">StringBuilder sb2 = sb.append(<span class="string">&quot;cde&quot;</span>);<span class="comment">//返回sb自己，内部return this</span></span><br><span class="line">System.out.println(sb == sb2);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//String——&gt;StringBuilder</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="comment">//StringBuilder——&gt;String</span></span><br><span class="line">String s = sb.toString();</span><br></pre></td></tr></table></figure><h3 id="基本数据类型的包装类"><a href="#基本数据类型的包装类" class="headerlink" title="基本数据类型的包装类"></a>基本数据类型的包装类</h3><ul><li>目的是提供一些方法来操作数据类型</li></ul><table><thead><tr><th>Byte</th><th>Short</th><th>Integer</th><th>Long</th><th>Float</th><th>Double</th><th>Character</th><th>Boolean</th></tr></thead><tbody><tr><td>byte</td><td>short</td><td>int</td><td>long</td><td>float</td><td>double</td><td>character</td><td>boolean</td></tr></tbody></table><ul><li><p>装箱：基本类型——&gt;包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer i = Interger.valueOf(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>拆箱：包装类——&gt;基本类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ii = i.intValue();</span><br></pre></td></tr></table></figure></li><li><p>自动装拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> a = list.get(<span class="number">0</span>);<span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure></li><li><p>基本类型和字符串之间转换：</p><ul><li>基本类型——&gt;字符串<ol><li><code>+&quot;&quot;</code></li><li>包装类中的静态方法toString</li><li>String类中的静态方法valueOf</li></ol></li><li>字符串——&gt;基本类型<ol><li>包装类中的静态方法parseXX</li></ol></li></ul></li></ul><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><ul><li>会使用集合存储数据</li><li>会遍历集合，把数据取出来</li><li>掌握每种集合的特性</li><li>所有集合的父类：<strong>Collection</strong></li></ul><h3 id="Collection集合（单列集合）"><a href="#Collection集合（单列集合）" class="headerlink" title="Collection集合（单列集合）"></a>Collection集合（单列集合）</h3><ul><li>Collection&lt; T &gt;</li></ul><p>公共方法：</p><ol><li>boolean add(E e)</li><li>boolean remove(E e)</li><li>void clear()</li><li>boolean contains(E e)</li><li>boolean isEmpty()</li><li>int size()</li><li>Object[] toArray()</li></ol><h4 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h4><ol><li>boolean hasNext()</li><li>E next()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Collection中的iterator()方法获得</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;sam&quot;</span>);</span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;sam&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String s : coll)&#123;</span><br><span class="line">    System.out.println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含有泛型的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>集合如果不使用泛型，默认就是Object类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含有泛型的方法</span></span><br><span class="line"><span class="comment">//修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表)&#123;方法体&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用的时候传递什么参数就调用什么类型的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含有泛型的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种用法：实现的时候确定泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种用法：创建对象的时候确定泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传值的时候：泛型通配符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">Iterator&lt;?&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上限限定：? extends E：?只能是E的子类或本身</span></span><br><span class="line"><span class="comment">//下限限定：? super E：?只能是E的父类或本身</span></span><br></pre></td></tr></table></figure><h3 id="List接口：Collection的第一个子类"><a href="#List接口：Collection的第一个子类" class="headerlink" title="List接口：Collection的第一个子类"></a>List接口：Collection的第一个子类</h3><ul><li>有序的集合</li><li>允许存储重复的元素</li><li>有索引index，可以使用普通的for遍历</li></ul><p>特有方法：(带索引)</p><ol><li>public void add(int index,E element)</li><li>public E get(int index)</li><li>public E remove(int index)</li><li>public E set(int index,E element)</li></ol><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>底层是数组，查询快，增删慢</li><li>单线程（所以被ArrayList取代）</li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul><li>底层是数组，查询快，增删慢</li><li>多线程</li></ul><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul><li>底层是双向链表，查询慢，增删快</li><li>多线程</li></ul><p>特有方法：</p><ol><li>public void addFirst(E e) == public void push(E e)</li><li>public void addLast(E e) == public void add(E e)</li><li>public E getFirst()</li><li>public E getLast()</li><li>public E removeFirst() == public E pop()</li><li>public E removeLast()</li></ol><h3 id="Set接口：Collection的第二个子类"><a href="#Set接口：Collection的第二个子类" class="headerlink" title="Set接口：Collection的第二个子类"></a>Set接口：Collection的第二个子类</h3><ul><li>无序的集合</li><li>不允许存储重复元素（原理上来看，必须保证元素类重写hashcode和equals方法）</li><li>没有索引index，不能使用普通的for遍历，只能用迭代器遍历</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li>底层是二叉树，一般用于排序</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>底层是<code>哈希表(数组+红黑树)</code>实现的，查询速度极快</li></ul><h4 id="LinkedHashSet（有序）"><a href="#LinkedHashSet（有序）" class="headerlink" title="LinkedHashSet（有序）"></a>LinkedHashSet（有序）</h4><ul><li>底层是<code>哈希表(数组+红黑树)+链表</code>实现的，<strong>可以保证存取顺序</strong></li></ul><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);<span class="comment">//同时加多个</span></span><br><span class="line">Collections.shuffle(list);<span class="comment">//打乱顺序</span></span><br><span class="line">Collections.sort(list);<span class="comment">//按照默认顺序排序；要排序自定义类型，元素类必须实现Comparable接口，重写compareto方法</span></span><br><span class="line">Collections.sort(list,<span class="keyword">new</span> Comparator&lt;String&gt;&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();<span class="comment">//升序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Map集合（双列集合）"><a href="#Map集合（双列集合）" class="headerlink" title="Map集合（双列集合）"></a>Map集合（双列集合）</h3><ul><li><p>Map&lt; K,V &gt;</p></li><li><p>双列集合，一个元素包含两个值</p></li><li><p>key不能重复，value不能重复，且一一对应</p></li></ul><p>公共方法：</p><ol><li>public V put(K key,V value)：key存在返回null，key不存在返回被替代的value</li><li>public V get(Object key)：key存在返回对应value，key不存在返回nul</li><li>public V remove(Object key)：key存在返回被删除value，key不存在返回null</li><li>public boolean containsKey(Object key)：判断是否包含指定key</li><li>public boolean containsValue(Object value)：判断是否包含指定value</li><li>keySet：Map集合的第一种遍历方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = map.keySet();<span class="comment">//获得map集合的所有key，存在set集合中</span></span><br><span class="line">Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String key = it.next();</span><br><span class="line">    Integer value = map.get(key);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">    Integer value = map.get(key);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>entryset：Map集合的第二种遍历方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String,Integer&gt;&gt; set = map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; e : set)&#123;</span><br><span class="line">    System.out.println(e.getKey());</span><br><span class="line">    System.out.println(e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要存储自定义元素，对于key的元素，必须重写hashCode和equals方法来保证key唯一</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>底层是<code>哈希表(数组+红黑树)</code></li><li>无序</li></ul><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><ul><li>底层是<code>哈希表(数组+红黑树)+链表</code></li><li>有序(存储顺序==取出顺序)</li></ul><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><ul><li>不能存储null键，null值，已经被hashmap取代</li><li>Hashtable的子类<strong>Properties</strong>依然在IO流中使用</li></ul><h3 id="JDK9中集合添加的优化"><a href="#JDK9中集合添加的优化" class="headerlink" title="JDK9中集合添加的优化"></a>JDK9中集合添加的优化</h3><ul><li>只适用于List，Set，Map接口</li><li>of返回值是一个不能改变的集合，之后不能再使用add，put等方法</li><li>Set和Map在调用of方法时，不能有重复的元素，否则会报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">Set&lt;String&gt; set = Set.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">Map&lt;String,Integer&gt; map = Map.of(<span class="string">&quot;张三&quot;</span>,<span class="number">14</span>,<span class="string">&quot;赵四&quot;</span>,<span class="number">12</span>,<span class="string">&quot;刘能&quot;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>当参数列表数据类型确定，但是参数个数不确定，就可以使用可变参数</li><li>底层会根据传递参数的不同创建不同长度的数组（0到多个）</li><li>一个方法中最多有一个可变参数</li><li>如果参数有多个，可变参数必须写在参数列表最后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际上传递的是数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>语法错误——&gt;编译失败</li><li>异常——&gt;编译/运行失败</li><li>Throwable的两个子类：Error 和 Exception<ol><li>Error类一般是指与虚拟机相关的问题，如<strong>系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢</strong>等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。</li><li>Exception类表示程序可以处理的异常，<strong>可以捕获且可能恢复</strong>。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。</li></ol></li></ul><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><h4 id="Exception：编译期异常"><a href="#Exception：编译期异常" class="headerlink" title="Exception：编译期异常"></a>Exception：编译期异常</h4><ul><li>在方法名后 throws Exception：虚拟机中断程序打印处理</li><li>try catch处理异常：无需中断，程序正常执行</li></ul><h4 id="RuntimException：运行期异常"><a href="#RuntimException：运行期异常" class="headerlink" title="RuntimException：运行期异常"></a>RuntimException：运行期异常</h4><ul><li>try catch处理异常</li></ul><h4 id="Error：错误"><a href="#Error：错误" class="headerlink" title="Error：错误"></a>Error：错误</h4><ul><li>程序无法治愈，<strong>必须修改源码</strong></li></ul><h3 id="异常产生过程"><a href="#异常产生过程" class="headerlink" title="异常产生过程"></a>异常产生过程</h3><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223638.png" alt="image-20210308122500908"></p><h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><ul><li>5个关键字：<strong>try、catch、finally、throw、throws</strong></li></ul><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><ul><li>只能用在方法内部</li><li>后边的对象只能是Exception或者Exception子类对象</li><li>必须处理throw的异常对象<ul><li>如果throw RuntimeException或者RuntimeException子类对象，可以自动交给JVM处理，自己不做手动处理</li><li>如果throw 编译期异常，必须手动处理，要么连续throws到jvm处理，要么try…catch…</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">常见的编译期异常和运行期异常</span><br><span class="line">a)编译期异常：</span><br><span class="line">          1.ClassNotFoundException(类找不到异常)</span><br><span class="line">          2.FileNotFoundException（编译文件夹中找不到，就是发布到tomcat中的，不是工程中）</span><br><span class="line">          3.SQLException ：提供有关数据库访问错误或其他错误的信息的异常。（ 比如SQL语句写错，访问的表不存在，连接数据库失败等等）</span><br><span class="line">          4.IOexception：IO流异常。一般在读写数据的时候会出现这种问题。</span><br><span class="line">          5.EOFException:当输入过程中意外到达文件或流的末尾时，抛出此异常。</span><br><span class="line">b)运行期异常：</span><br><span class="line">          1.NullPointerException(空指针异常)</span><br><span class="line">          2.ArithmeticException（运算非法异常）</span><br><span class="line">          3.IndexOutOfBoundsException(数组越界异常)</span><br><span class="line">          4.ClassCastException(类转换异常)</span><br><span class="line">          5.ArrayStoreException(数据存储异常，操作数组时类型不一致)</span><br><span class="line">          6.BufferOverflowException(字节溢出异常—IO流操作)</span><br></pre></td></tr></table></figure><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><ul><li>一步一步往上抛</li><li>如果同时throw多个异常且含有父子关系，throws后面只需写 父类</li></ul><h4 id="try…catch…"><a href="#try…catch…" class="headerlink" title="try…catch…"></a>try…catch…</h4><ul><li>try中如果产生了异常，会直接执行catch中内容，之后执行try…catch后代码</li><li>try中如果没有异常，不会执行catch中内容，直接执行try…catch后代码</li><li>Throwable中的3个异常处理的方法<ol><li>getMessage()</li><li>toString()</li><li>printStackTrace()：默认</li></ol></li></ul><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><ul><li>解决try语句块中异常后的代码无法执行的问题</li><li>不能单独使用，只能和try一起使用</li><li>一般用于资源释放</li><li>避免在finally语句中写return语句</li></ul><h3 id="异常处理时注意："><a href="#异常处理时注意：" class="headerlink" title="异常处理时注意："></a>异常处理时注意：</h3><ol><li>多异常分别处理，多异常一次捕获多次处理，多异常一次捕获一次处理</li><li>父类方法抛出多个异常，子类重写时只能抛出同样异常 or 异常子类 or 不抛</li><li>父类方法没有抛出异常，子类重写时也不能抛异常，如果子类有异常只能捕获</li></ol><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><ul><li>继承Exception：编译时异常</li><li>继承RuntimeException：运行时异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">//异常信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取异常信息,由于构造函数调用了super(message),不用重写此方法</span></span><br><span class="line">    <span class="comment">//public String getMessage()&#123;</span></span><br><span class="line">    <span class="comment">//    return message;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li>进程是操作系统资源分配的基本单位，负责为程序分配内存空间</li><li>而线程是任务调度和执行的基本单位，负责程序实际的执行</li><li>一个进程中至少有一个线程</li><li>同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。</li><li>每个线程拥有自己的<strong>栈段</strong>， 寄存器的内容，栈段又叫运行时段，用来存放所有局部变量和临时变量。</li></ul><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul><li>java程序属于抢占式调度，哪个线程优先级高就会优先执行哪个线程；同一优先级会随机选择一个执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;<span class="comment">//重写Thread类的run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;prime-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PrimeThread p = <span class="keyword">new</span> PrimeThread();</span><br><span class="line">        p.start();<span class="comment">//会调用线程的run方法，只能调用一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223647.png" alt="image-20210308165029075"></p><p><strong>多线程内存图</strong></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223654.png" alt="image-20210308165656672"></p><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223701.png" alt="image-20210308173426698"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得指定线程名称</span></span><br><span class="line">PrimeThread primeThread = <span class="keyword">new</span> PrimeThread();</span><br><span class="line">System.out.println(primeThread.getName());</span><br><span class="line"><span class="comment">//获得当前线程名称</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line"><span class="comment">//修改线程名称</span></span><br><span class="line">primeThread.setName(<span class="string">&quot;线程0&quot;</span>);</span><br><span class="line"><span class="comment">//也可以修改PrimeThread构造函数直接修改名字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//让父类Thread构造方法给子线程起名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h4><ul><li>是当前正在执行的线程暂停</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;<span class="comment">//重写Thread类的run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;prime-----&gt;&quot;</span>+i);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//1000毫秒==1秒</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Runnable类：创建多线程的第二种方式"><a href="#Runnable类：创建多线程的第二种方式" class="headerlink" title="Runnable类：创建多线程的第二种方式"></a>Runnable类：创建多线程的第二种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;prime-----&gt;&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        RunnableImpl ri = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(ri)</span><br><span class="line">        t.start();<span class="comment">//会调用线程的run方法，只能调用一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>好处：<ol><li>Runnable方式避免了单继承的局限性</li><li>Runnable方式降低了耦合性：RunnableImpl设置线程 &amp; Thread开启线程 解耦</li></ol></li></ul><h3 id="使用匿名内部类的方式创建线程"><a href="#使用匿名内部类的方式创建线程" class="headerlink" title="使用匿名内部类的方式创建线程"></a>使用匿名内部类的方式创建线程</h3><ul><li>Thread和Runnable两种方式都可以</li></ul><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><ul><li>多线程访问了共享的数据，会出现线程安全问题</li><li>这种线程安全问题是不能发生的，我们要确保某个时刻只能由一个线程访问共享资源</li></ul><h4 id="解决线程安全问题"><a href="#解决线程安全问题" class="headerlink" title="解决线程安全问题"></a>解决线程安全问题</h4><ol><li><p><strong>同步代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">    <span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223712.png" alt="image-20210308180822199"></p></li><li><p><strong>同步方法</strong></p></li></ol><ul><li>方法修饰符：synchronized</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">    <span class="comment">//锁对象是this对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">    <span class="comment">//锁对象是本类的class属性对象</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Lock锁机制</strong></li></ol><ul><li>Lock接口中的两个方法：<ol><li>void lock()：获取锁</li><li>void unlock()：释放锁</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lock l = <span class="keyword">new</span> ReentrantLock();<span class="comment">//创建类的成员变量l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在某个方法中</span></span><br><span class="line">l.lock();</span><br><span class="line"><span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">l.unlock();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.State：Thread类的内部类State</span><br></pre></td></tr></table></figure><ul><li><strong>一共6种状态</strong></li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223720.png" alt="image-20210308214423553"></p><ul><li>sleep(参数) 和 wait(参数) 其实都是一样的</li><li>notify() 是唤醒一个等待的线程，notifyAll()是唤醒所有等待的线程</li></ul><h3 id="线程间通信（等待唤醒机制）"><a href="#线程间通信（等待唤醒机制）" class="headerlink" title="线程间通信（等待唤醒机制）"></a>线程间通信（等待唤醒机制）</h3><ul><li>多个线程处理同一个资源，一个生产，一个消费</li><li>wait和notify方法必须要使用同一个锁对象调用</li><li>wait和notify方法属于Object类的方法</li><li>wait方法和notify方法必须在同步代码块或者同步函数中使用</li></ul><h4 id="生产者-amp-消费者问题"><a href="#生产者-amp-消费者问题" class="headerlink" title="生产者&amp;消费者问题"></a>生产者&amp;消费者问题</h4><ul><li>以包子铺为例</li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223727.png" alt="image-20210308230625128"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包子类（锁对象）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">    String pi;</span><br><span class="line">    String xian;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包子铺类（生产者）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(BaoZi bz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                bz.pi = <span class="string">&quot;薄皮&quot;</span>;</span><br><span class="line">                bz.xian = <span class="string">&quot;三鲜馅&quot;</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;包子铺正在生产&quot;</span>+bz.pi+bz.xian+<span class="string">&quot;的包子&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                bz.flag = <span class="keyword">true</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;包子铺已经生产好了包子&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//吃货类（消费者类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(BaoZi bz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货正在吃&quot;</span>+bz.pi+bz.xian+<span class="string">&quot;的包子&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                bz.flag = <span class="keyword">false</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货已经吃完了包子&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;*************************************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaoZi bz = <span class="keyword">new</span> BaoZi();</span><br><span class="line">        <span class="keyword">new</span> BaoZiPu(bz).start();</span><br><span class="line">        <span class="keyword">new</span> ChiHuo(bz).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li>线程池就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建对象的操作，无需反复创建线程而消耗过多资源</li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/img20220521223737.png" alt="image-20210308232553076"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.concurrent.Executors:线程池的工厂类</span></span><br><span class="line"><span class="comment">//生产一个指定线程数量的线程池</span></span><br><span class="line">ExecutorService es = Executors.newFixedThreadPool();</span><br><span class="line"><span class="comment">//实现一个Runnable实现类</span></span><br><span class="line"><span class="comment">//调用ExecutorService中的方法submit，执行线程</span></span><br><span class="line">es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line"><span class="comment">//调用ExecutorService中的方法shutdown销毁线程池</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java是一门纯粹的面向对象的高级的平台无关的编程语言</summary>
    
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://yangfanjack.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://yangfanjack.github.io/tags/Java/"/>
    
    <category term="JavaSE" scheme="https://yangfanjack.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>我的Linux工作平台搭建</title>
    <link href="https://yangfanjack.github.io/2021/03/06/%E6%88%91%E7%9A%84Linux%E5%B7%A5%E4%BD%9C%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>https://yangfanjack.github.io/2021/03/06/%E6%88%91%E7%9A%84Linux%E5%B7%A5%E4%BD%9C%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</id>
    <published>2021-03-06T01:35:39.000Z</published>
    <updated>2022-12-22T02:37:28.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mint-LInux安装概述"><a href="#Mint-LInux安装概述" class="headerlink" title="Mint LInux安装概述"></a>Mint LInux安装概述</h2><ol><li>rufus录入iso镜像到U盘</li><li>进入bios界面调节启动位置为U盘</li><li>开机进入安装界面，下一步…</li><li>efi分区自动放入win10的efi分区，/分区45G，/home分区300G，swap分区1G</li></ol><h2 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h2><h3 id="双系统时间不同步"><a href="#双系统时间不同步" class="headerlink" title="双系统时间不同步"></a>双系统时间不同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 禁用Ubuntu的UTC</span></span><br><span class="line">timedatectl set-local-rtc 1 --adjust-system-clock</span><br><span class="line"><span class="comment"># 更新本地时间</span></span><br><span class="line">sudo apt install ntpdate</span><br><span class="line">sudo ntpdate time.windows.com</span><br><span class="line"><span class="comment"># 将本地时间更新到硬件上</span></span><br><span class="line">sudo hwclock --localtime --systohc</span><br></pre></td></tr></table></figure><h3 id="输入法里安装ficix-amp-安装搜狗输入法"><a href="#输入法里安装ficix-amp-安装搜狗输入法" class="headerlink" title="输入法里安装ficix &amp; 安装搜狗输入法"></a>输入法里安装ficix &amp; 安装搜狗输入法</h3><ul><li>IDEA等jetbrain公司的IDE的搜狗输入法不跟随问题可以采用更改这些IDE的运行环境解决</li></ul><h3 id="完善mint的中文支持"><a href="#完善mint的中文支持" class="headerlink" title="完善mint的中文支持"></a>完善mint的中文支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install language-pack-zh-hans language-pack-gnome-zh-hans</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加微软雅黑字体</span></span><br><span class="line"><span class="comment">#雅黑字体文件放在 Windows/fonts/ 文件夹，或者在控制面板-字体中查找，两个文件名分别为：msyh.ttf和msyhbd.ttf。字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Linux mint 系统字体文件夹中创建对应的字体文件夹：</span></span><br><span class="line">sudo  mkdir  /usr/share/fonts/msyh</span><br><span class="line"><span class="comment"># 移动字体文件到对应的文件夹下：</span></span><br><span class="line">udo  mv  msyh.ttf msyhbd.ttf  /usr/share/fonts/msyh</span><br><span class="line"><span class="comment"># 更新字体：</span></span><br><span class="line">sudo  fc-cache  -fv</span><br></pre></td></tr></table></figure><h3 id="安装typora"><a href="#安装typora" class="headerlink" title="安装typora"></a>安装typora</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add - <span class="comment"># 添加公钥</span></span><br><span class="line">sudo add-apt-repository <span class="string">&#x27;deb https://typora.io/linux ./&#x27;</span> <span class="comment"># 添加typora仓库</span></span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install typora <span class="comment"># 安装typora</span></span><br></pre></td></tr></table></figure><h3 id="安装Qv2ray"><a href="#安装Qv2ray" class="headerlink" title="安装Qv2ray"></a>安装Qv2ray</h3><p><a href="%5Bpan.baidu.com/s/1hPKp0V%5D(https://link.zhihu.com/?target=https://pan.baidu.com/s/1hPKp0V4J54YihTsh05zhOQ)">Qv2ray下载</a>：密码1lph</p><p><a href="%5Bhttps://pan.baidu.com/s/14quUKv%5D(https://link.zhihu.com/?target=https://pan.baidu.com/s/14quUKv1-9_QHYPXjHe-2Aw)">插件下载</a>：密码ha9k</p><ul><li><p>制作启动项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=qv2ray</span><br><span class="line">Comment=network ladder</span><br><span class="line">Exec=/home/jack1024/Programs/Qv2ray/Qv2ray.v2.6.3.AppImage</span><br><span class="line">Icon=/home/jack1024/Programs/Qv2ray/qv2ray.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Network;</span><br></pre></td></tr></table></figure><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3></li><li><p><a href="https://www.pling.com/s/Cinnamon/">Cinnamon主题</a>：选择Full Icon Themes 和 Cinnamon Themes分别下载图标包<strong>Papirus</strong>和主题包<strong>Adapta Colorpack Normal</strong></p></li><li><p>在Gnome主题的GRUB Thmes中选一个开机引导的主题下载安装</p></li><li><p>面板移到顶部，调整面板控件摆放</p></li><li><p>安装<strong>扩展、小程序、桌面小工具</strong>等插件</p></li><li><p>选一张好看的壁纸</p></li></ul><p><img src="http://rn7xzghaf.hb-bkt.clouddn.com/imggdfs.jpg" alt="Linux Mint美化后桌面"></p><h3 id="安装各种软件"><a href="#安装各种软件" class="headerlink" title="安装各种软件"></a>安装各种软件</h3><h4 id="vim简单配置"><a href="#vim简单配置" class="headerlink" title="vim简单配置"></a>vim简单配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim .vimrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> nobackup</span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="built_in">set</span> ruler</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> mouse=c</span><br><span class="line"><span class="built_in">set</span> showmode    </span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br></pre></td></tr></table></figure><h4 id="安装-amp-配置git"><a href="#安装-amp-配置git" class="headerlink" title="安装&amp;配置git"></a>安装&amp;配置git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yangfanjack&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1144536063@qq.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa      <span class="comment"># 生成两把钥匙</span></span><br><span class="line">ssh -T git@github.com  <span class="comment"># 验证ssh配置是否配置好</span></span><br></pre></td></tr></table></figure><h4 id="安装postman"><a href="#安装postman" class="headerlink" title="安装postman"></a>安装postman</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=postman</span><br><span class="line">Comment=API development</span><br><span class="line">Exec=/home/jack1024/Programs/Postman/Postman</span><br><span class="line">Icon=/home/jack1024/Programs/Postman/app/resources/app/assets/icon.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Network,Development;</span><br></pre></td></tr></table></figure><h4 id="安装wireshark"><a href="#安装wireshark" class="headerlink" title="安装wireshark"></a>安装wireshark</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用usermod命令将您自己添加到wirehark组</span></span><br><span class="line">sudo usermod -aG wireshark $(whoami)</span><br></pre></td></tr></table></figure><h4 id="安装picgo-core并配置"><a href="#安装picgo-core并配置" class="headerlink" title="安装picgo-core并配置"></a>安装picgo-core并配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nvm和nodejs</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm --version</span><br><span class="line">nvm ls-remote</span><br><span class="line">nvm install v12.18.0</span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gitee插件</span></span><br><span class="line"><span class="built_in">cd</span> /home/jack1024/.config/Typora/picgo/linux</span><br><span class="line">./picgo install gitee-uploader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置picgo-core</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;current&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uploader&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gitee&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;repo&quot;</span>: <span class="string">&quot;gitee用户名/仓库名&quot;</span>,</span><br><span class="line">      <span class="string">&quot;branch&quot;</span>: <span class="string">&quot;master&quot;</span>,</span><br><span class="line">      <span class="string">&quot;token&quot;</span>: <span class="string">&quot;你的私人令牌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;img/  #你的仓库下的路径&quot;</span>,</span><br><span class="line">      <span class="string">&quot;customPath&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">      <span class="string">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;transformer&quot;</span>: <span class="string">&quot;path&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;picgo-plugin-gitee-uploader&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装zsh-amp-oh-my-zsh"><a href="#安装zsh-amp-oh-my-zsh" class="headerlink" title="安装zsh &amp; oh-my-zsh"></a>安装zsh &amp; oh-my-zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line"><span class="comment"># 安装oh-my-zsh</span></span><br><span class="line">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br><span class="line"><span class="comment"># 移动配置文件到home</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"><span class="comment"># 设置zsh为默认shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"><span class="comment"># 优化zsh</span></span><br><span class="line"><span class="comment"># 添加nvm环境变量到.zshrc</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh速度优化</span></span><br><span class="line"><span class="comment"># Add default node to path</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/.nvm/versions/node/v10.22.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># load nvm</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ]] &amp;&amp; <span class="built_in">source</span> <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> --no-use</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件安装</span></span><br><span class="line">apt install bat</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$ZSH_CUSTOM</span>/plugins/git-open</span><br><span class="line"></span><br><span class="line">plugins=(其他的插件 zsh-autosuggestions zsh-syntax-highlighting git-open Z)</span><br><span class="line">HIST_STAMPS=<span class="string">&quot;yyyy-mm-dd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于powerline主题的字体要求,进入fonts后bash .install.sh</span></span><br><span class="line">https://github.com/powerline/fonts</span><br></pre></td></tr></table></figure><h4 id="安装Powerlevel10k-zsh主题"><a href="#安装Powerlevel10k-zsh主题" class="headerlink" title="安装Powerlevel10k  zsh主题"></a>安装Powerlevel10k  zsh主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载Powerlevel10k</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/romkatv/powerlevel10k.git <span class="variable">$ZSH_CUSTOM</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置.zshrc</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MesloLGS NF字体文件</span></span><br><span class="line">https://github.com/romkatv/powerlevel10k<span class="comment">#meslo-nerd-font-patched-for-powerlevel10k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义主题</span></span><br><span class="line">p10k configure</span><br></pre></td></tr></table></figure><h4 id="安装wps缺失字体"><a href="#安装wps缺失字体" class="headerlink" title="安装wps缺失字体"></a>安装wps缺失字体</h4><p><a href="https://pan.baidu.com/s/1fn2sTNaqNmbK8BcS9iMSGw">字体下载地址</a>：密码n9xc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip wps_symbol_fonts.zip -d /usr/share/fonts/wps-office</span><br></pre></td></tr></table></figure><p>进入wps-office目录，一个一个地安装</p><h3 id="配置各种环境"><a href="#配置各种环境" class="headerlink" title="配置各种环境"></a>配置各种环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk gcc g++ cmake</span><br></pre></td></tr></table></figure><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p><a href="https://downloads.mysql.com/archives/community/">官网下载</a>：安装5.7.31</p><p>解压，得到13个包，删除两个test包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-*.deb</span><br><span class="line">sudo apt install -f</span><br><span class="line">sudo dpkg -i mysql-*.deb</span><br><span class="line">mysql -uroot -proot</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>因为基于ubuntu20.04的mint20.1的默认mysql版本是mysql8，所以需要锁定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁定软件包版本</span></span><br><span class="line">sudo apt-mark hold mysql-common</span><br><span class="line">sudo apt-mark hold mysql-client</span><br><span class="line">sudo apt-mark hold mysql-server</span><br><span class="line"><span class="comment"># 检查标记为锁定的包</span></span><br><span class="line">sudo apt-mark showhold</span><br><span class="line"><span class="comment"># 接触锁定</span></span><br><span class="line">sudo apt-mark xxx</span><br></pre></td></tr></table></figure><h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><p><a href="https://tomcat.apache.org/download-90.cgi">官网下载</a>：安装9.0.43</p><p>解压后移动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-tomcat-9.0.43 /opt/</span><br></pre></td></tr></table></figure><h4 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h4><p><a href="http://maven.apache.org/download.cgi">官网下载</a>：安装3.6.3</p><p>解压后移动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-maven-3.6.3 /opt/</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/profile.d</span><br><span class="line">sudo vim maven.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> M2_HOME=/opt/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$M2_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> maven.sh</span><br></pre></td></tr></table></figure><p>拷贝setting.xml到~/.m2下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改respository--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/jack1024/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA和Clion配置</p><ul><li>大小写不敏感：Editor，General，Code Completion，取消Match case</li><li>取消打开默认项目：Appearanc&amp;Behavior，System Settings，取消Reopen</li><li>主题：Appearanc&amp;Behavior，Appearance，Theme</li><li>编辑区主题：Editor，Color Scheme，Color Scheme Font</li><li>字体：Editor，Font</li><li>自动导包：Editor，General，Auto Import</li><li>自动编译：Build，Compiler，Build Project Auto，Compile independent</li></ul><h2 id="软件："><a href="#软件：" class="headerlink" title="软件："></a>软件：</h2><h3 id="日常："><a href="#日常：" class="headerlink" title="日常："></a>日常：</h3><p>搜狗输入法：中文输入法</p><p>edge：微软浏览器</p><p>chrome：谷歌浏览器</p><p>qv2ray：科学冲浪</p><p>xdm：下载</p><p>utools：让你效率倍增的快速启动软件</p><p>每日英语听力：学英语</p><p>网易云音乐：在线听歌</p><p>1music：一个聚合听歌开源软件</p><p>audacious：本地听歌</p><p>gimp：图片处理</p><p>shotcut：视频剪辑</p><p>steam：游戏</p><p>vlc：视频播放器</p><p>telegram：加密聊天</p><p>qq for linux：复古风qq</p><p>wps：办公套件</p><p>百度网盘：限速达人</p><p>mindmaster：思维导图</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>clion：C/C++开发IDE</p><p>idea：Java开发IDE</p><p>dbeaver：数据库管理客户端</p><p>filezilla：ftp客户端</p><p>smartgit：git客户端</p><p>typora：markdown笔记</p><p>virtualbox：虚拟机</p><p>vscode：强大拓展性文本编辑器</p><p>wireshark：网络抓包</p><p>zeal：离线文档</p><p>ARDM：redis管理客户端</p><p>postman：http调试</p><h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><p>keepassXC：密码管理</p><p>copyQ：剪切板历史</p><p>caffeine：屏幕常亮</p><p>keepassxc：密码管理</p><p>新立得：apt包管理客户端</p><p>Gparted：磁盘管理</p><p>bleachbit：清理垃圾</p><p>zsh：舒服的shell</p><p>oh-my-zsh：zsh快速配置</p><p>tldr：查看命令帮助文档</p><p>htop：系统监视</p><p>kdeconnect：电脑手机强大交互软件</p><p>plank：dock栏</p><p>obs-studio：录屏</p><p>etcher：U盘镜像制作</p><p>Qredshift：根据时区自动调整屏幕亮度，温感</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>jdk1.8</p><p>gcc g++</p><p>maven3.6.3</p><p>mysql5.7</p><p>cmake</p><p>tomcat9</p><p>nvm</p><p>node</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>watermark</p><p>透明面板</p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>Qredshift</p><p>系统监视器</p><h2 id="Linux系统卸载"><a href="#Linux系统卸载" class="headerlink" title="Linux系统卸载"></a>Linux系统卸载</h2><p>在win10+linux双系统的环境下，如果要卸载linux系统，采用以下方式：</p><ol><li>进入win10系统，磁盘管理中直接清空linux的/分区和/home对应的磁盘分区</li><li>如果安装linux系统时新建了linux的efi分区，在win10的磁盘管理工具中是删除不了的，推荐使用Genuis这款windows下的第三方磁盘管理软件来清除efi分区。</li><li>如果安装linux系统时将linux的efi分区和win10的efi放在了一起，那么需要进行如下操作：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以管理员身份进入PowerShell</span></span><br><span class="line">diskpart <span class="comment">#进入diskpart</span></span><br><span class="line">list disk <span class="comment">#列出所有磁盘</span></span><br><span class="line">select disk 0 <span class="comment">#根据自己的情况选择efi分区对应的磁盘</span></span><br><span class="line">list partition <span class="comment">#列出该磁盘所有分区</span></span><br><span class="line">select partition 1 <span class="comment">#根据自己的情况选择efi分区对应的分区</span></span><br><span class="line">assign letter=p: <span class="comment">#为所选分区分配盘符p</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出diskpart</span></span><br><span class="line"></span><br><span class="line">p: <span class="comment">#进入p盘</span></span><br><span class="line"><span class="built_in">cd</span> efi <span class="comment">#进入efi文件夹，然后根据自己的情况删除相应的文件夹</span></span><br></pre></td></tr></table></figure><ol start="4"><li>但是这个时候bios中还是有ubuntu的选项，可以通过easyUEFI或者Bootice来删除</li></ol>]]></content>
    
    
    <summary type="html">Windows娱乐 + Linux工作，更合理利用电脑磁盘空间</summary>
    
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Linux" scheme="https://yangfanjack.github.io/tags/Linux/"/>
    
    <category term="分享" scheme="https://yangfanjack.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>旧手机搭建linux服务器</title>
    <link href="https://yangfanjack.github.io/2021/02/19/%E6%97%A7%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://yangfanjack.github.io/2021/02/19/%E6%97%A7%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-02-19T12:43:01.000Z</published>
    <updated>2022-12-22T02:37:28.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="硬件-amp-软件准备："><a href="#硬件-amp-软件准备：" class="headerlink" title="硬件&amp;软件准备："></a>硬件&amp;软件准备：</h3><p><strong>硬件：</strong></p><ul><li>一台已root的安卓手机</li></ul><p><strong>软件：</strong></p><ul><li>Linux Deploy：<code>https://github.com/meefik/linuxdeploy/releases</code></li><li>busyBox：<code>https://github.com/meefik/busybox/releases</code></li></ul><h3 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h3><ol><li>点开busyBox直接安装，记住安装地址</li><li>点开linux deploy，点击左上角三条杠，修改系统名字，然后进入设置，自己根据需要开关选项</li><li>在PATH环境变量里写上busyBox的安装路径</li><li>点击右下角的属性按钮，根据需要安装linux发行版</li><li>我选的是ubuntu，考虑到国内网络环境，将源地址改为<code>http://mirrors.ustc.edu.cn/ubuntu-ports/</code></li><li>在镜像大小里最好分多点空间，默认只有2G，如果有外置sd卡最好把镜像地址改为sd卡的地址，这样能自行分区更合理。</li><li>修改初始用户的username和password，本地化选择语言，推荐英文</li><li>初始化，挂载，SSH，声音服务 推荐都弄上</li><li>返回主界面，点击右上角三个点开始安装，等待一会儿，直到出现deploy字样，说明安装成功</li><li>此时先点击停止，在点击启动，就可以根据局域网ip通过ssh来远程连接安卓上linux容器了。</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>做一些配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">apt install gcc g++ vim git openjdk-8-jdk net-tools bash-completion htop</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinuxDeploy下ping命令无法运行，提示socket：权限不足，原来android里将一些硬件使用（包括网络）的权限归到不同的用户组. 　而3003就是关于网络权限的组，称为inet. 上述命令是在debian的用户权限系统中给root 添加inte权限．</span></span><br><span class="line">usermod -G 3003 root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改root的密码</span></span><br><span class="line">su - root</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="安装samba服务"><a href="#安装samba服务" class="headerlink" title="安装samba服务"></a>安装samba服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装samba</span></span><br><span class="line">apt install samba samba-common</span><br><span class="line"><span class="comment">#选定需要共享的文件夹</span></span><br><span class="line">mkdir XXX</span><br><span class="line"><span class="comment">#设置文件夹权限</span></span><br><span class="line">chmod 777 XXX</span><br><span class="line"><span class="comment">#设置samba用户密码</span></span><br><span class="line">useradd smbUser</span><br><span class="line">smbpasswd -a smbUser</span><br><span class="line">smbpasswd -xx smbUser</span><br><span class="line"><span class="comment">#配置samba的配置文件</span></span><br><span class="line">vim /etc/samba/smb.conf</span><br><span class="line">[share]</span><br><span class="line">comment = share folder</span><br><span class="line">browseable = yes</span><br><span class="line">path = XXX</span><br><span class="line">create mask = 0700</span><br><span class="line">directory mask = 0700</span><br><span class="line">valid users = smbUser</span><br><span class="line">force user = smbUser</span><br><span class="line">force group = smbUser</span><br><span class="line">public = yes</span><br><span class="line">available = yes</span><br><span class="line">writable = yes</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">service smbd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试了这种通过smb协议实现局域网共享文件的方式，能实现。但是不知道为什么不能共享挂载到安卓的目录，所以有了下面的方案。</p><h3 id="File-Brower"><a href="#File-Brower" class="headerlink" title="File Brower"></a>File Brower</h3><ol><li><p>可以采用网盘实现方式，有很多相似的产品：OwnCloud，NextCloud，Seafile都可以，但是这些都有需要依赖的环境，部署相对麻烦，我选择了一个只需简单配置就能使用的私人网盘：File Brower</p><p>File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。它除了可以让你进行文件管理之外，还有一些其他的功能。它支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限。它还支持文件分享，就行网盘那样，你可以通过它来向你的朋友分享文件。你还可以用它来执行一些 Linux 命令，比如你想要在当前目录下克隆一个代码库，就可以用它来执行<code>git</code>等命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装(之前可能需要配置hosts)</span></span><br><span class="line">curl -fsSL https://filebrowser.xyz/get.sh | bash</span><br><span class="line"><span class="comment">#创建配置数据库</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config init</span><br><span class="line"><span class="comment">#设置监听地址</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --address 0.0.0.0</span><br><span class="line"><span class="comment">#设置监听端口</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --port 8888</span><br><span class="line"><span class="comment">#设置语言环境</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --locale zh-cn</span><br><span class="line"><span class="comment">#设置日志位置</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --<span class="built_in">log</span> /var/<span class="built_in">log</span>/filebrowser.log</span><br><span class="line"><span class="comment">#添加一个用户（已有一个默认的admin:admin用户）</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db users add username password --perm.admin</span><br><span class="line"><span class="comment">#启动服务 &amp; 设置别名简化启动</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db</span><br><span class="line">vim ~/./bashrc</span><br><span class="line"><span class="built_in">alias</span> runnas=<span class="string">&quot;filebrowser -d /etc/filebrowser.db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#支持Https(其中example.com.crt和example.com.key分别是 SSL 证书和**路径，根据自身情况进行更改。配置完 SSL 后，只可以使用 HTTPS 访问，不可以使用 HTTP)</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --cert example.com.crt --key example.com.key</span><br><span class="line"><span class="comment">#取消 SSL</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --cert <span class="string">&quot;&quot;</span> --key <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>开机自启 &amp; 后台运行问题<br>两种方法：nohup和systemd</p><ul><li><p>第一种</p><ol><li><p>运行：<code>nohup filebrowser -d /etc/filebrowser.db &gt;/dev/null 2&gt;&amp;1 &amp;</code></p></li><li><p>停止运行：<code>kill -9 $(pidof filebrowser)</code></p></li><li><p>开机启动：<code>sed -i &#39;/exit 0/i\nohup filebrowser -d \/etc\/filebrowser.db &gt;\/dev\/null 2&gt;&amp;1 &amp;&#39; /etc/rc.local</code></p></li><li><p>取消开机启动：<code>sed -i &#39;/nohup filebrowser -d \/etc\/filebrowser.db &gt;\/dev\/null 2&gt;&amp;1 &amp;/d&#39; /etc/rc.local</code></p></li></ol></li><li><p>第二种</p><ol><li>操作百度</li><li>运行：systemctl start filebrowser.service</li><li>停止运行：systemctl stop filebrowser.service</li><li>开机启动：systemctl enable filebrowser.service</li><li>取消开机启动：systemctl disable filebrowser.service</li><li>查看运行状态：systemctl status filebrowser.service</li></ol></li></ul></li></ol>]]></content>
    
    
    <summary type="html">限制的安卓手机利用起来，借助现成工具搭建Linux服务器，扩展性超乎你的想象。</summary>
    
    
    
    <category term="分享" scheme="https://yangfanjack.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Linux" scheme="https://yangfanjack.github.io/tags/Linux/"/>
    
    <category term="分享" scheme="https://yangfanjack.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="Android" scheme="https://yangfanjack.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
