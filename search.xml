<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实体机安装Arch</title>
      <link href="/2021/06/14/%E5%AE%9E%E4%BD%93%E6%9C%BA%E5%AE%89%E8%A3%85Arch/"/>
      <url>/2021/06/14/%E5%AE%9E%E4%BD%93%E6%9C%BA%E5%AE%89%E8%A3%85Arch/</url>
      
        <content type="html"><![CDATA[<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ol><li><p>机器：华硕飞行堡垒fx-60vm</p></li><li><p>第一系统：win10</p></li><li><p>Arch镜像</p><blockquote><p><a href="https://archlinux.org/download/">https://archlinux.org/download/</a></p></blockquote></li><li><p>镜像考录工具：Rufus</p></li><li><p>U盘</p></li></ol><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h4 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看网卡</span></span><br><span class="line">ip link</span><br><span class="line"><span class="comment">#有线连接</span></span><br><span class="line">dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#无线连接</span></span><br><span class="line"><span class="comment">#查看wifi是否关闭，开启wifi</span></span><br><span class="line">rfkill list</span><br><span class="line">rfkill unblock wifi</span><br><span class="line"><span class="comment">#wifi联网</span></span><br><span class="line">iwctl</span><br><span class="line">[iwd] device list</span><br><span class="line">[iwd] station wlan0 scan</span><br><span class="line">[iwd] station wlan0 get-networks</span><br><span class="line">[iwd] station wlan0 connect SSID</span><br><span class="line"><span class="comment">#分配ip</span></span><br><span class="line">dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试网络连接</span></span><br><span class="line">ping archlinux.org</span><br></pre></td></tr></table></figure><h4 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新系统时间</span></span><br><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br><span class="line"><span class="comment">#检查服务状态</span></span><br><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><h4 id="系统分区"><a href="#系统分区" class="headerlink" title="系统分区"></a>系统分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前分区</span></span><br><span class="line">lsblk</span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment">#新建分区</span></span><br><span class="line">cfdisk /dev/sdX  (X替换成相应的硬盘字母，一般是a或b，默认gpt即可)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分区建议</span></span><br><span class="line"><span class="comment"># /boot/efi:和win10共用</span></span><br><span class="line"><span class="comment"># swap:固态硬盘1G</span></span><br><span class="line"><span class="comment"># /:固态硬盘剩下所有</span></span><br><span class="line"><span class="comment"># /home:机械硬盘剩下所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化分区</span></span><br><span class="line">mkfs.fat -F32 /dev/sdaX <span class="comment">#/boot/efi</span></span><br><span class="line">mkfs.ext4 /dev/sda6 <span class="comment">#/和/home</span></span><br><span class="line">mkfs.ext4 /dev/sdb2</span><br><span class="line">mkswap /dev/sda5 <span class="comment">#交换分区</span></span><br><span class="line">swapon /dev/sda5</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载</span></span><br><span class="line">mount /dev/sda6 /mnt</span><br><span class="line">mkdir /mnt/boot/efi</span><br><span class="line">mount /dev/sda2 /mnt/boot/efi</span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sdb2 /mnt/home</span><br></pre></td></tr></table></figure><h4 id="安装arch核心"><a href="#安装arch核心" class="headerlink" title="安装arch核心"></a>安装arch核心</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br><span class="line"><span class="comment">#找到中国镜像移到最上面或者添加</span></span><br><span class="line">Server = http://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line">Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment">#pacstrap脚本安装arch基础</span></span><br><span class="line">pacstrap /mnt base base-devel linux linux-firmware dhcpcd vim networkmanager intel-ucode git openssh</span><br></pre></td></tr></table></figure><h4 id="生成fstab挂载文件"><a href="#生成fstab挂载文件" class="headerlink" title="生成fstab挂载文件"></a>生成fstab挂载文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h4 id="进入ch-root"><a href="#进入ch-root" class="headerlink" title="进入ch-root"></a>进入ch-root</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br><span class="line"><span class="comment">#设置时间</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="comment">#设置语言</span></span><br><span class="line">vim /etc/locale.gen</span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_TW.UTF-8 UTF-8</span><br><span class="line">locale-gen</span><br><span class="line"><span class="comment">#设置默认语言</span></span><br><span class="line">vim /etc/locale.conf</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"><span class="comment">#本地化设置</span></span><br><span class="line">vim /etc/hostname</span><br><span class="line">myArch</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1myArch.localdomainmyArch</span><br><span class="line"></span><br><span class="line"><span class="comment">#自启动设置</span></span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager sshd</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置root密码</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增普通用户</span></span><br><span class="line">useradd -m -G wheel -s /bin/bash jack1024</span><br><span class="line">passwd jack1024</span><br><span class="line"><span class="comment">#给用户sudo权利</span></span><br><span class="line">pacman -S sudo</span><br><span class="line">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class="line">visudo</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><h4 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober ntfs-3g grub efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成并查看引导配置</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">cat /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="新系统完善和配置"><a href="#新系统完善和配置" class="headerlink" title="新系统完善和配置"></a>新系统完善和配置</h2><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#联网</span></span><br><span class="line">nmcli device wifi list</span><br><span class="line">nmcli device wifi connect yang password XXXXX</span><br><span class="line"><span class="comment">#查看网络配置</span></span><br><span class="line">cat/etc/pacman.d/mirrorlist</span><br><span class="line"><span class="comment">#网络配置</span></span><br><span class="line">vim /etc/pacman.conf</span><br><span class="line"><span class="comment">#打开Color和TotalDownload注释</span></span><br><span class="line"><span class="comment">#文档末尾添加</span></span><br><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新所有软件</span></span><br><span class="line">sudo pacman -Syyu</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 archlinuxcn-keyring 包以导入 GPG key</span></span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装aur管理工具yay</span></span><br><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果安装keyring出错</span></span><br><span class="line">sudo rm -rf /etc/pacman.d/gnupg</span><br><span class="line">sudo pacman-key --init</span><br><span class="line">sudo pacman-key --populate archlinux</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h4 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#窗口系统服务xorg</span></span><br><span class="line">sudo pacman -S xorg xorg-server</span><br><span class="line"><span class="comment">#kde</span></span><br><span class="line">sudo pacman -S plasma</span><br><span class="line"><span class="comment">#不建议kde-applications，太多，选几个就行了</span></span><br><span class="line">sudo pacman -S ark dolphin dolphin-plugins juk kdeconnect kdenlive konsole </span><br><span class="line"><span class="comment">#登录界面sddm</span></span><br><span class="line">sudo pacman -S sddm sddm-kcm</span><br><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br><span class="line"></span><br><span class="line"><span class="comment">#xfce</span></span><br><span class="line">sudo pacman -S xfce4 xfce4-goodies</span><br><span class="line"><span class="comment">#lightdm</span></span><br><span class="line">sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> lightdm</span><br></pre></td></tr></table></figure><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ttf-dejavu wqy-bitmapfont wqy-microhei wqy-zenhei noto-fonts noto-fonts-emoji</span><br><span class="line"><span class="comment">#默认语言</span></span><br><span class="line">vim .xprofile</span><br><span class="line"><span class="built_in">export</span> LC_ALL-zh_CN.UTF-8</span><br></pre></td></tr></table></figure><h4 id="声音-amp-显卡"><a href="#声音-amp-显卡" class="headerlink" title="声音&amp;显卡"></a>声音&amp;显卡</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils pulseaudio pulseaudio-alsa</span><br><span class="line">sudo pacman -S nvidia nvidia-utils lib32-nvidia-utils nvidia-settings</span><br></pre></td></tr></table></figure><h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yay -S fcitx5-im fcitx5-rime fcitx5-chinese-addons fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki-rime fcitx5-pinyin-moegirl-rime</span><br><span class="line"></span><br><span class="line"><span class="comment">#开机自启</span></span><br><span class="line"><span class="built_in">cd</span> ~/.config</span><br><span class="line">mkdir autostart</span><br><span class="line"><span class="built_in">cd</span> autostart</span><br><span class="line">sudo mv /usr/share/applications/fcitx5.desktop ./</span><br><span class="line"><span class="comment">#右下脚输入法右键配置，删掉拼音加入中州韵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量</span></span><br><span class="line">vim ~/.pam_environment</span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法框架构建</title>
      <link href="/2021/05/17/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA/"/>
      <url>/2021/05/17/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Simple-Sentence：主语-谓语"><a href="#Simple-Sentence：主语-谓语" class="headerlink" title="Simple Sentence：主语+谓语"></a>Simple Sentence：主语+谓语</h2><ol><li>可以独立完成的动作：不及物动词Intransitive Verbs<ul><li><strong>主语+不及物动词</strong></li></ul></li><li>有一个动作的承受者：单及物动词Monotransitive Verbs<ul><li><strong>主语+单及物动词+宾语</strong></li></ul></li><li>有两个动作承受者：双及物动词Ditransitive Verbs<ul><li><strong>主语+间接宾语+直接宾语</strong></li></ul></li><li>只有一个动作承受者（不同于2）：复杂及物动词Complex-Transitive Verbs<ul><li><strong>主语+复杂及物动词+宾语+宾语补语</strong></li></ul></li><li>不是狭义的”动作“：系动词Linking Verbs<ul><li><strong>主语+系动词+主语补语(表语)</strong></li></ul></li></ol><h3 id="Parts-Of-Speech：句子成分"><a href="#Parts-Of-Speech：句子成分" class="headerlink" title="Parts Of Speech：句子成分"></a>Parts Of Speech：句子成分</h3><ol><li>Subject：主语</li><li>Predicate Verb：谓语动词</li><li>Object：宾语</li><li>Object Complement：宾语补语</li><li>Subject Complement（Predicative）：主语补语（表语）</li><li>Attributive：定语—修饰主语/宾语</li><li>Adverbial：状语—修饰谓语动词</li><li>Appositive：同位语—再把主语/宾语说一遍</li></ol><h2 id="Non-Simple-Sentence"><a href="#Non-Simple-Sentence" class="headerlink" title="Non Simple Sentence"></a>Non Simple Sentence</h2><p>Compuond Sentence：Simple Sentence+Simple Sentence…</p><p>Complex Sentence：Main Clause（主句）+Subordinate Clause（从句）</p><h3 id="Subordinate-Clause"><a href="#Subordinate-Clause" class="headerlink" title="Subordinate Clause"></a>Subordinate Clause</h3><ol><li>主语从句</li><li>宾语从句</li><li>表语从句</li><li>同位语从句</li><li>定语从句</li><li>状语从句</li></ol><h2 id="词类"><a href="#词类" class="headerlink" title="词类"></a>词类</h2><ol><li>Nouns：名词</li><li>Articles：冠词</li><li>Pronouns：代词</li><li>Adjectives：形容词</li><li>Numerals：数词</li><li>Adverbs：副词</li><li>Prepositions：介词</li><li>Interjections：叹词</li><li>Conjunctions：连词</li><li>Verbs：动词</li></ol><p><strong>注意：对于句子成分和词类的关系而言，除了谓语动词只能用动词，其余句子成份都可能包含不同的词类</strong></p><h2 id="Predicate-Verbs’-Big-Three（谓语动词的三大本领）"><a href="#Predicate-Verbs’-Big-Three（谓语动词的三大本领）" class="headerlink" title="Predicate Verbs’ Big Three（谓语动词的三大本领）"></a>Predicate Verbs’ Big Three（谓语动词的三大本领）</h2><ol><li>表示动作的时间：Tense<ul><li>现在</li><li>过去</li><li>将来</li><li>过去将来</li></ul></li><li>表示动作的状态：Aspect<ul><li>一般</li><li>完成</li><li>进行</li><li>完成进行</li></ul></li><li>表斯动作的假设，情感等：Mood<ul><li>虚拟语气：If i were a boy …</li><li>陈述语气：I ate a carrot and …</li><li>祈使语气：Eat this carrot and …</li></ul></li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210517162806480.png" alt="image-20210517162806480"></p><h3 id="谓语动词充分发挥功能，需要助动词的帮助"><a href="#谓语动词充分发挥功能，需要助动词的帮助" class="headerlink" title="谓语动词充分发挥功能，需要助动词的帮助"></a>谓语动词充分发挥功能，需要助动词的帮助</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210517163213280.png" alt="image-20210517163213280"></p><p><strong>注意：不要把助动词和它的其他身份（实义动词）混淆</strong></p><h2 id="Non-Predicate-Verbs"><a href="#Non-Predicate-Verbs" class="headerlink" title="Non Predicate Verbs"></a>Non Predicate Verbs</h2><p><strong>注意：正如上面介绍词类和句子成份的关系时所讲，动词除了可以充当谓语动词这个句子成份，还可以充当其他任意一个句子成份，这些统称非谓语动词Non Predicate Verbs</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210517163716446.png" alt="image-20210517163716446"></p><ol><li>动词不定式</li><li>现在分词</li><li>动名词</li><li>过去分词</li></ol><h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h3><p><strong>非谓语动词可以充当除谓语动词外所有句子成份，取代所有从句，从而简化句子。</strong></p><p><strong>只是这些动词就不再具有表示动作时间，状态，语句的功能了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>English Grammer的核心就是动词：</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210517165540966.png" alt="image-20210517165540966"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理学习</title>
      <link href="/2021/05/15/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/05/15/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="经济学入门"><a href="#经济学入门" class="headerlink" title="经济学入门"></a>经济学入门</h2><p><strong>宗旨：没有对的经济学理论，只有好的经济学理论</strong></p><p><strong>Let‘s Go</strong></p><h4 id="经济学演变"><a href="#经济学演变" class="headerlink" title="经济学演变"></a>经济学演变</h4><ol><li>自给自足，没有交换</li><li>开始分工，根据劳动量交换产品</li><li>随着生产力发展，更多的产品生产出来，产生货币：从商品中分离出来充当一般等价物的商品，专门用于交换（吾以吾之所有予市场，换吾之所需，货币就是这一过程的约定，它反映的是个体与社会的经济协作关系）</li><li>交换促进了分工，分工带来了生产率提升，反过来又促进了交换</li><li>交换的前提是交换双方彼此信任。</li><li>货币要么是具有稀缺性，要么背后有强权背书。所以一旦遇到乱世，大家都会把货币兑换成普通商品或者硬通货。</li><li>早期交易体系：以铜币为基础的弱信用链（谷物，绢帛，铜钱）</li><li>早期铜钱货币交易体系中，铜钱较稀缺，铜钱铸造速度&lt;生产率提高速度，市场流通货币减少，货币增值，商品价格下降，会导致通货紧缩</li></ol><p><strong>经济由所有市场内的全部交易构成</strong></p><h4 id="信任是分工的基石"><a href="#信任是分工的基石" class="headerlink" title="信任是分工的基石"></a>信任是分工的基石</h4><p><strong>人类社会的每次变革，都伴随着社会信任关系的重构</strong>：</p><ol><li>部落内的分工：私人信用体系</li><li>国家内的分工：政府信用体系</li><li>国家间的分工：银行信用体系</li></ol><p><strong>任何交易都依赖于信用体系：所以理论上，只要构建一个足够完善的信用链将所有人纳入其中，就能让更多的人参与交换活动，从而让更多的交易达成，经济得到发展</strong></p><p>但是由各种问题阻碍这种理想信任链的形成：分配问题，国家对抗，金融危机……</p><h4 id="现代经济学"><a href="#现代经济学" class="headerlink" title="现代经济学"></a>现代经济学</h4><p>以银行发放贷款创造出存款货币的银行信用货币体系</p><ol><li>政府：负责收税，花钱</li><li>中央银行：负责控制货币，信贷数量（通过利率和发行货币）</li></ol><h2 id="曼昆经济学原理（N-Gregory-Mankiw）"><a href="#曼昆经济学原理（N-Gregory-Mankiw）" class="headerlink" title="曼昆经济学原理（N. Gregory Mankiw）"></a>曼昆经济学原理（N. Gregory Mankiw）</h2><h4 id="经济学三类问题："><a href="#经济学三类问题：" class="headerlink" title="经济学三类问题："></a>经济学三类问题：</h4><ol><li>人们如何作出决策（微观）</li><li>人们如何相互作用（微观）</li><li>整体经济如何运行（宏观）</li></ol><h4 id="经济学的十个原理："><a href="#经济学的十个原理：" class="headerlink" title="经济学的十个原理："></a>经济学的十个原理：</h4><p>人们如何作出决策？</p><ol><li>People face tradeoffs：人们面临得失交换</li><li>The cost of somothing is what you give up to get it：某物的成本是为此所放弃的东西</li><li>Rational people think at the margin：理性人考虑边际量</li><li>People respond to incentives：人们会对激励作出反应</li></ol><p>人们如何相互作用？</p><ol start="5"><li>Trade can make everyone better off：贸易使人人收益</li><li>Markets are usually a good way to organize economic activity：市场是组织经济活动的好方式</li><li>Governments can sometimes improve market outcomes：政府有时可以改进市场结果</li></ol><p>整体经济如何运行？ </p><ol start="8"><li>The standard of living depends on a country’s production：一国的生活水平取决于它的生产</li><li>Prices rise when the government prints too much money：当政府发行了过多的货币时，物价上涨</li><li>Society faces a short-run tradeoff between inflation and unemployment：社会面临通货膨胀和失业之间的短期得失交换</li></ol><h2 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h2><h3 id="经济学历史："><a href="#经济学历史：" class="headerlink" title="经济学历史："></a>经济学历史：</h3><ol><li>古希腊经济思想：家庭理财</li><li>重商主义经济理论（大航海时代）：商业贸易和财富(金银)积累，鼓励出口限制进口</li><li>古典经济学的理论（亚当斯密，李嘉图，马克思）：财富的性质与原因：交换，分工，市场</li><li>新古典经济学理论：资源配置及优化问题：Math被广泛应用到经济领域</li><li>经济学的帝国主义：人类选择行为，经济学扩展到其他社会科学领域</li></ol><h3 id="经济学分类"><a href="#经济学分类" class="headerlink" title="经济学分类"></a>经济学分类</h3><ul><li>非常非常多（&gt;1000种）</li><li>微观经济学，宏观经济学，计量经济学</li></ul><h3 id="怎么学？"><a href="#怎么学？" class="headerlink" title="怎么学？"></a>怎么学？</h3><ol><li>经济理论</li><li>数学工具（统计，微积分）</li><li>经济史</li></ol><h3 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h3><h4 id="经济学与资源配置"><a href="#经济学与资源配置" class="headerlink" title="经济学与资源配置"></a>经济学与资源配置</h4><p>经济学</p><ol><li><strong>罗宾斯：</strong>经济学是研究关于目的与可供选择用途的手段之间相互关系的人类行为科学</li><li><strong>赛谬尔森：</strong>经济学是研究人和社会如何进行选择，来使用可以有不同用途的稀缺资源以便生产各种商品，并在现在或者将来把商品分配给社会各个成员或集团以供消费之用</li></ol><p>资源配置</p><ol><li>人的欲望的无限性和多样性</li><li>资源的稀缺性和可选择性</li><li>生产可能性边界图：（资源和技术的改变会向内或向外移动）</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210516205154033.png" alt="image-20210516205154033"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基金理财</title>
      <link href="/2021/05/15/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/"/>
      <url>/2021/05/15/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="理财的几种投资渠道："><a href="#理财的几种投资渠道：" class="headerlink" title="理财的几种投资渠道："></a>理财的几种投资渠道：</h2><ol><li>银行利息<ul><li>年利率1.5%</li><li>银行的利率跑不赢通货膨胀</li></ul></li><li>证券投资：股票<ul><li>收益高</li><li>波动很大，技术要求大</li></ul></li><li>房地产投资</li><li>基金<ul><li>收益低点：货币基金，纯债基金</li><li>收益高点：股票型基金，混合型基金</li></ul></li></ol><h2 id="一些概念："><a href="#一些概念：" class="headerlink" title="一些概念："></a>一些概念：</h2><ol><li><strong>债券</strong>：别人买你，还你利息</li><li><strong>股票</strong>：共同分享开公司的成果</li><li><strong>A股</strong>：中国大陆公司发行的股票</li><li><strong>指数</strong>：一家公司一只股票，多支股票组合形成指数</li><li><strong>大盘（上证指数）</strong>：在上海债券交易所上发行的所有股票组合</li><li><strong>小盘（中证500指数）</strong>：选取了500家中小公司的股票组合</li><li><strong>基金</strong>：由基金公司拿我们的钱，帮我们买股票，债券，帮助我们打理我们的钱<ul><li>我们不会理财，可以找大的基金公司（天弘，富国……），千万不要找P2P</li></ul></li></ol><h2 id="关于基金Fund的一些概念"><a href="#关于基金Fund的一些概念" class="headerlink" title="关于基金Fund的一些概念"></a>关于基金Fund的一些概念</h2><p><strong>开放式基金（随买随卖）按照投资类型一般分为：</strong></p><ul><li>股票型：风险较高收益较多</li><li>债券型：风险较低收益较少</li><li>混合型：股票+债券</li><li>货币型：风险最小，收益最少。投资于货币市场的基金。例：一年以内的银行定期存款，剩余期限397天以内的债券</li></ul><h2 id="经济-amp-金融-？"><a href="#经济-amp-金融-？" class="headerlink" title="经济 &amp; 金融 ？"></a>经济 &amp; 金融 ？</h2><ul><li>经济<ol><li>一次性的买卖，为了自己消费</li><li>供需定价</li></ol></li><li>金融<ol><li>买家炒来炒去，为了自己赚钱</li><li>预期决定价格，大家看涨它就涨</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 基金 </tag>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票入门</title>
      <link href="/2021/05/15/%E8%82%A1%E7%A5%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2021/05/15/%E8%82%A1%E7%A5%A8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="股票分类："><a href="#股票分类：" class="headerlink" title="股票分类："></a>股票分类：</h2><ul><li><p>A股，B股，H股，N股，S股</p></li><li><p>一般做的都是沪深A股（上海证券交易所 &amp; 深圳证券交易所）</p><ol><li>60开头——上证A股</li><li>0开头——深证A股</li><li>3开头——创业版（证券公司去开通）</li><li>688开头——科创版（最低50W资金）</li></ol></li></ul><h2 id="股票交易时间"><a href="#股票交易时间" class="headerlink" title="股票交易时间"></a>股票交易时间</h2><ul><li>周一到周五（09:30-11:30，13:00-15:00）</li><li>周六周日休市，法定节日休市</li><li>09:15-09:20：随便挂单随便撤单</li><li>09:20-09:25：随便挂单不可撤单</li></ul><h2 id="股票的涨跌幅"><a href="#股票的涨跌幅" class="headerlink" title="股票的涨跌幅"></a>股票的涨跌幅</h2><ul><li>0和60股票每天涨跌幅是10%</li><li>3股票每天涨跌幅是20%</li><li>68股票前5个交易日无限制，后面涨跌幅是20%</li><li>新股第一天涨跌幅44%</li><li>ST股（亏损股）：涨跌幅是5%</li></ul><h2 id="股票分时图和K线图"><a href="#股票分时图和K线图" class="headerlink" title="股票分时图和K线图"></a>股票分时图和K线图</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515152428603.png" alt="image-20210515152428603"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515152344839.png" alt="image-20210515152344839"></p><h2 id="股票交易规则"><a href="#股票交易规则" class="headerlink" title="股票交易规则"></a>股票交易规则</h2><ul><li>股票最低买1手=100股，不同上市股票每股价格不同</li><li>股票交易费由三部分组成：佣金，印花税，过户费（仅上股收取）<ol><li>印花税：0.1%</li><li>过户费：0.002%</li><li>交易佣金：最高0.003%，最低5元</li></ol></li><li>交易佣金是双向收取：买 &amp; 卖</li></ul><h2 id="看盘软件界面介绍"><a href="#看盘软件界面介绍" class="headerlink" title="看盘软件界面介绍"></a>看盘软件界面介绍</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515155716825.png" alt="image-20210515155716825"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515155610869.png" alt="image-20210515155610869"></p><h2 id="股票趋势"><a href="#股票趋势" class="headerlink" title="股票趋势"></a>股票趋势</h2><ul><li><strong>顺势而为，不能和大盘逆向操作</strong></li><li><strong>尽量做上涨趋势的股票</strong></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515155828148.png" alt="image-20210515155828148"></p><h2 id="支撑位和压力位"><a href="#支撑位和压力位" class="headerlink" title="支撑位和压力位"></a>支撑位和压力位</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515160558894.png" alt="image-20210515160558894"></p><h2 id="突破和跌破"><a href="#突破和跌破" class="headerlink" title="突破和跌破"></a>突破和跌破</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515160935087.png" alt="image-20210515160935087"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515160958177.png" alt="image-20210515160958177"></p><h2 id="股票盘口"><a href="#股票盘口" class="headerlink" title="股票盘口"></a>股票盘口</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515161700536.png" alt="image-20210515161700536"></p><h2 id="股票买卖机制"><a href="#股票买卖机制" class="headerlink" title="股票买卖机制"></a>股票买卖机制</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515161916150.png" alt="image-20210515161916150"></p><p>自己通过各种软件买卖软件中的模拟买卖来练习</p><h2 id="选股票"><a href="#选股票" class="headerlink" title="选股票"></a>选股票</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515163332683.png" alt="image-20210515163332683"></p><h2 id="做空（Short-Selling）是啥？"><a href="#做空（Short-Selling）是啥？" class="headerlink" title="做空（Short Selling）是啥？"></a>做空（Short Selling）是啥？</h2><ul><li><p>做多：</p><ol><li>股票上升时，低价买入，高价卖出。</li><li>利润无限，亏损有限。</li></ol></li><li><p>做空：</p><ol><li>股票下降时，高价卖出，低价买入。</li><li>从证券公司借股票。高价卖出，低价买入；然后还给证券公司股票，赚差价。</li><li>利润有限，亏损无限。</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210515171343272.png" alt="image-20210515171343272"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 理财 </tag>
            
            <tag> 股票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中加载配置文件的几种方法</title>
      <link href="/2021/03/21/Java%E4%B8%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2021/03/21/Java%E4%B8%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Java的常用web框架中会有很多配置文件，这些配置文件都是为了降低代码耦合性而从代码中剥离出来的。为了在程序运行时动态地加载这些文件进内存，需要加载这些配置文件，学习过程中发现有很多种方法都能将这些配置文件加载进内存，需要总结下方便记忆。</p><h2 id="基于ClassLoader加载配置文件"><a href="#基于ClassLoader加载配置文件" class="headerlink" title="基于ClassLoader加载配置文件"></a>基于ClassLoader加载配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream in = 当前类名.class.getClassLoader().getResourceAsStream(<span class="string">&quot;配置文件相对路径&quot;</span>);</span><br><span class="line">properties.load(in);</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">&quot;password&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="基于Resources读取配置文件"><a href="#基于Resources读取配置文件" class="headerlink" title="基于Resources读取配置文件"></a>基于Resources读取配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User user = userMapper.findById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h2 id="基于ResourceBundle读取配置文件"><a href="#基于ResourceBundle读取配置文件" class="headerlink" title="基于ResourceBundle读取配置文件"></a>基于ResourceBundle读取配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">&quot;配置文件相对路径&quot;</span>);</span><br><span class="line">System.out.println(resourceBundle.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"></span><br><span class="line">InputStream in3 = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filePath));</span><br><span class="line">ResourceBundle resourceBundle2 = <span class="keyword">new</span> PropertyResourceBundle(in3);</span><br><span class="line">System.out.println(resourceBundle2.getString(<span class="string">&quot;username&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2021/03/18/Nginx/"/>
      <url>/2021/03/18/Nginx/</url>
      
        <content type="html"><![CDATA[<ul><li>Nginx 是一款高性能的 http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师伊戈尔·西索夫（Igor Sysoev）所开发，官方测试 nginx 能够支支撑 5 万并发链接，并且 cpu、内存等资源消耗却非常低，运行非常稳定。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><strong>http 服务器</strong>。Nginx 是一个 http 服务可以独立提供 http 服务。可以做<strong>网页静态服务器</strong>。</li><li><strong>虚拟主机</strong>。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li><li><strong>反向代理，负载均衡</strong>。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 nginx 做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。 </li></ol><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><ul><li>将静态网站文件 上传到服务器的/usr/local/nginx/html下即可访问</li></ul><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><ul><li>虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的物理服务器划分成多个“虚拟”服务器。虚拟主机技术极大的促进了网络技术的应用和普及。同时虚拟主机的租用服务也成了网络时代的一种新型经济形式。</li></ul><h3 id="端口绑定"><a href="#端口绑定" class="headerlink" title="端口绑定"></a>端口绑定</h3><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch入教路</title>
      <link href="/2021/03/17/Arch%E5%85%A5%E6%95%99%E8%B7%AF/"/>
      <url>/2021/03/17/Arch%E5%85%A5%E6%95%99%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>我的linux入门是redhat系，跟着兄弟连用的centos。之后一直用的debian系，包括桌面日用，ubuntu，deepin，kubuntu，mint。早就听说了Arch邪教，纯命令安装系统，需要对linux系统有更深的了解，也借这个契机来试试。</p><h2 id="第一步：虚拟机试探"><a href="#第一步：虚拟机试探" class="headerlink" title="第一步：虚拟机试探"></a>第一步：虚拟机试探</h2><ol><li><p>官网下载<a href="https://archlinux.org/download/">安装包</a></p></li><li><p>启动vBox，开始进入安装界面</p></li><li><p>确保开启虚拟机的EFI支持</p></li><li><p>确保网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ip link</span><br><span class="line"><span class="comment">#有线网络</span></span><br><span class="line">dhcpcd</span><br><span class="line"><span class="comment">#无线网络</span></span><br><span class="line">iwctl</span><br><span class="line">[iwd] device list</span><br><span class="line">[iwd] station device scan</span><br><span class="line">[iwd] station device get-networks</span><br><span class="line">[iwd] station device connect SSID</span><br><span class="line"></span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>更新系统时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br><span class="line"><span class="comment">#检查服务状态</span></span><br><span class="line">timedatectl status</span><br></pre></td></tr></table></figure></li><li><p>系统分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l  </span><br><span class="line">cfdisk /dev/sdx  (x替换成相应的硬盘字母，一般是a或b，默认gpt即可)</span><br></pre></td></tr></table></figure><p>分区结果</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210318123200700.png" alt="image-20210318123200700"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1</span><br><span class="line">mkfs.ext4 /dev/sda3</span><br><span class="line">mkswap /dev/sda2</span><br><span class="line">swapon /dev/sda2</span><br></pre></td></tr></table></figure></li><li><p>挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br><span class="line"><span class="comment"># 找到中国镜像移到最上面或者添加</span></span><br><span class="line">Server = http://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br><span class="line"><span class="comment"># pacstrap脚本安装arch基础</span></span><br><span class="line">pacstrap /mnt base base-devel linux linux-firmware dhcpcd vim</span><br></pre></td></tr></table></figure></li><li><p>生成fstab挂载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure></li><li><p>切换根目录，进入安装好的系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure></li><li><p>本地化设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br><span class="line"></span><br><span class="line">vim /etc/locale.gen</span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_TW.UTF-8 UTF-8</span><br><span class="line">locale-gen</span><br><span class="line"></span><br><span class="line">vim /etc/locale.conf</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">vim /etc/hostname</span><br><span class="line">jack1024</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1jack1024.localdomainjack1024</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置root密码</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure></li><li><p>设置微码引导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#intel CPU</span></span><br><span class="line">pacman -S intel-ucode</span><br><span class="line"><span class="comment">#AMD CPU</span></span><br><span class="line">pacman -S amd-ucode</span><br></pre></td></tr></table></figure></li><li><p>安装引导</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober ntfs-3g grub efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成并查看引导配置</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">cat /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210318131450261.png" alt="image-20210318131450261"></p><p>出现这个说明安装一切搞定，重启后进入邪教生活。</p></li><li><p>常用软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重启后登录</span></span><br><span class="line">jack1024 login: root</span><br><span class="line">password: ****</span><br><span class="line"><span class="comment">#联网</span></span><br><span class="line">dhcpd</span><br><span class="line">ping www.baidu.com</span><br><span class="line">systemctl <span class="built_in">enable</span> dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置国内源</span></span><br><span class="line">vim /etc/pacman.conf</span><br><span class="line"><span class="comment">#文档末尾添加</span></span><br><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"><span class="comment">#安装 archlinuxcn-keyring 包以导入 GPG key</span></span><br><span class="line">pacman -S archlinuxcn-keyring</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line">pacman -Syyu</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装常用软件</span></span><br><span class="line">pacman -S openssh man git</span><br><span class="line">systemctl start sshd</span><br><span class="line">systemctl <span class="built_in">enable</span> ssdd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加用户</span></span><br><span class="line">useradd -m -G wheel -s /bin/bash username</span><br><span class="line">passwd username</span><br><span class="line"></span><br><span class="line"><span class="comment">#给用户sudo权利</span></span><br><span class="line">pacman -S sudo</span><br><span class="line"><span class="comment">#第一种方法</span></span><br><span class="line">su - root</span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment">#找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br><span class="line"><span class="comment">#第二种方法</span></span><br><span class="line">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class="line">visudo</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装zsh</span></span><br><span class="line"><span class="comment">#不知道为什么虚拟机无法从github clone，所以采用gitee</span></span><br><span class="line">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh</span><br><span class="line"><span class="comment">#找到以下部分</span></span><br><span class="line"><span class="comment"># Default settings</span></span><br><span class="line">ZSH=<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line">BRANCH=<span class="variable">$&#123;BRANCH:-master&#125;</span></span><br><span class="line"><span class="comment">#把</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line"><span class="comment">#替换为</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://gitee.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line"></span><br><span class="line">chmod 777 install.sh</span><br><span class="line">bash install.sh</span><br><span class="line"><span class="comment"># 然后参考之前的linux工作环境配置那篇博客自定义zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于虚拟机暂时无法访问github，需要通过gitee安装一些插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/mirror-github/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/lxgyChen/zsh-autosuggestions.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestion</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$ZSH_CUSTOM</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经过多次试错终于能让虚拟机从github拉取项目了</span></span><br><span class="line">用浏览器访问 IPAddress.com 使用 IP Lookup 工具获得</span><br><span class="line">github.com</span><br><span class="line">github.global.ssl.fastly.net</span><br><span class="line">raw.githubusercontent.com</span><br><span class="line">三个域名的ip地址</span><br><span class="line">然后写入/etc/hosts中即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210318160332058.png" alt="image-20210318160332058"></p></li><li><p>安装图形界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装声卡驱动</span></span><br><span class="line">sudo pacman -S alsa-utils pulseaudio pulseaudio-alsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看显卡型号</span></span><br><span class="line">lspci | grep VSA</span><br><span class="line"><span class="comment">#查看独显型号</span></span><br><span class="line">lspci | grep 3D</span><br><span class="line"><span class="comment">#参考官网驱动表进行安装</span></span><br><span class="line">sudo pacman -S 驱动包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装输入设备驱动</span></span><br><span class="line">pacman -S xf86-input-libinput</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装笔记本触摸板驱动</span></span><br><span class="line">sudo pacman -S xf86-input-synaptics</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装中文字体</span></span><br><span class="line">sudo pacman -S ttf-dejavu wqy-bitmapfont wqy-microhei wqy-zenhei noto-fonts noto-fonts-emoji</span><br><span class="line"></span><br><span class="line"><span class="comment"># xorg用于实现窗口系统，sddm是登陆管理器，登陆管理器还有lightdm等等，但是个人比较推荐sddm，sddm可以支持多个桌面环境的切换。</span></span><br><span class="line">pacman -S xorg xorg-server</span><br><span class="line"><span class="comment">#安装kde桌面</span></span><br><span class="line">pacman -S plasma</span><br><span class="line"><span class="comment">#安装kde应用</span></span><br><span class="line">pacman -S kde-applications</span><br><span class="line"><span class="comment">#安装sddm图形登录界面</span></span><br><span class="line">sudo pacman -S sddm sddm-kcm</span><br><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装网络管理</span></span><br><span class="line">sudo pacman -S net-tools networkmanager</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager</span><br></pre></td></tr></table></figure></li><li><p>virtualbox安装增强功能（经过反复折腾，最终安装失败）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman</span><br><span class="line">sudo pacman -S linux-headers</span><br><span class="line">sudo pacman -S base-devel</span><br><span class="line"><span class="comment">#理论上安装以上就行了，但是还是失败了，不知道为什么</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="安装主步骤："><a href="#安装主步骤：" class="headerlink" title="安装主步骤："></a>安装主步骤：</h2><ol><li>联网</li><li>更新时间</li><li>创建分区</li><li>格式化挂载点</li><li>挂载分区</li><li>国内镜像置顶</li><li>拉取安装件（包括devel）</li><li>生成挂载文件</li><li>切换根目录</li><li>调整时区</li><li>生成配置文件</li><li>本地化修改</li><li>修改root密码</li><li>网络工具安装</li><li>安装微码引导</li></ol><h2 id="pacman包管理"><a href="#pacman包管理" class="headerlink" title="pacman包管理"></a>pacman包管理</h2><ul><li>简洁高效</li><li>拥有神器：Arch User Repository</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地软件仓库更新情况</span></span><br><span class="line">pacman -Sy</span><br><span class="line"><span class="comment"># 强行更新本地软件仓库</span></span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment"># 从本地仓库更新软件</span></span><br><span class="line">pacman -Su</span><br><span class="line"><span class="comment"># 优雅の一步：同步并更新所有</span></span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line"><span class="comment">#滚动更新</span></span><br><span class="line">pacman -Syyu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">pacman -S 软件名</span><br><span class="line"><span class="comment"># 通过正则表达式搜索软件</span></span><br><span class="line">pacman -Ss 正则表达式</span><br><span class="line"><span class="comment"># 清除本地软件仓库</span></span><br><span class="line">pacman -Sc</span><br><span class="line"><span class="comment"># 完全清空包缓存（Warning: 关于pacman -Scc，仅在你确定不需要做任何软件包降级工作时才这样做。pacman -Scc会从缓存中删除所有软件包）</span></span><br><span class="line">pacman Scc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅仅删除软件本身（不推荐）</span></span><br><span class="line">pacman -R 软件名</span><br><span class="line"><span class="comment"># 删除软件、它的依赖（推荐）</span></span><br><span class="line">pacman -Rs 软件名</span><br><span class="line"><span class="comment"># 删除软件、它的依赖、全局配置文件，本地配置文件不会删除（推荐）</span></span><br><span class="line">pacman -Rns 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装软件包</span></span><br><span class="line">pacman -Q</span><br><span class="line"><span class="comment"># 列出自己安装的软件</span></span><br><span class="line">pacman -Qe</span><br><span class="line"><span class="comment"># 列出安装的软件（只有名字）</span></span><br><span class="line">pacman -Qq</span><br><span class="line"><span class="comment"># 通过正则查询本地安装的软件</span></span><br><span class="line">pacman -Qs 正则表达式</span><br><span class="line"><span class="comment"># 列出所有孤儿包</span></span><br><span class="line">pacman -Qdt</span><br><span class="line"><span class="comment"># 删除所有孤儿包</span></span><br><span class="line">pacman -R $(pacman -Qdtq)</span><br><span class="line"><span class="comment"># 查新哪些包拥有指定文件</span></span><br><span class="line">pacman -Qo 文件名</span><br></pre></td></tr></table></figure><h3 id="AUR助手"><a href="#AUR助手" class="headerlink" title="AUR助手"></a>AUR助手</h3><ul><li><p>Arch 用户软件仓库 通常称为 AUR，是给 Arch 用户的基于社区的软件存储库。</p></li><li><p>什么是 AUR（Arch 用户软件仓库）？</p><p>Arch 用户软件仓库 通常称为 AUR，是给 Arch 用户的基于社区的软件存储库。</p><p>根据软件包在 AUR 社区的流行程度，用户编译的软件包会进入到 Arch 的官方存储库。</p></li><li><p>什么是 AUR 助手？</p><p>AUR 助手是一个包装程序，允许用户从 AUR 存储库安装软件包，而无需手动干预。</p><p>很多用例实现了自动化，比如包搜索、解决依赖关系、检索和构建 AUR 包、Web 内容检索和 AUR 包提交之类。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Yay 是 Arch Linux 下基于 CLI 的最佳 AUR 助手，使用 Go 语言编写。Yay 是基于 yaourt、apacman 和 pacaur 设计的。</span></span><br><span class="line"><span class="comment"># 这是最合适推荐给新手的 AUR 助手。类似于 Pacman，其使用方法和 pacman 中的命令和选项很相似，可以让用户在搜索过程中找到匹配的软件包提供程序，并进行选择。</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay-git</span><br><span class="line">makepkg -si</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后就可以直接使用yay命令了，和pacman几乎一致的命令</span></span><br></pre></td></tr></table></figure><p>用debian系的小伙都惊呆了，AUR是真的牛皮</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210318212110059.png" alt="image-20210318212110059"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis缓存技术</title>
      <link href="/2021/03/16/redis%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/03/16/redis%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis简介："><a href="#Redis简介：" class="headerlink" title="Redis简介："></a>Redis简介：</h2><p><strong>概念：</strong>redis是一款高性能的NOSQL（Not Only SQL）系列的菲关系型数据库</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210316153023744.png" alt="image-20210316153023744"></p><p><strong>Redis特点：</strong></p><ul><li><p>Redis 是一个开源的使用 ANSI、C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p></li><li><p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p></li><li><p>关系型数据库和非关系数据库是<strong>互补的关系</strong>，通常情况下使用关系型数据库，在适合的情况下使用NOSQL数据库能够堆关系型数据库的不足进行弥补从而提高网站的性能。</p></li><li><p>一般会将数据存储在关系型数据库中，在nosql数据库中备份关系型数据库的数据</p></li></ul><p><strong>目前Redis支持的键值数据类型如下：</strong></p><ol><li>字符串类型：string</li><li>哈希类型：hash</li><li>列表类型：list</li><li>集合类型：set</li><li>有序集合类型：sortedset</li></ol><p><strong>Redis的应用场景：</strong></p><ol><li>缓存（数据查询，短连接，新闻内容，商品内容）</li><li>聊天室的在线好友列表</li><li>任务队列（秒杀，抢购，12306抢票）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒级别）</li><li>分布式集群架构中的session分离</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>debian：<code>sudo apt install redis</code></p><p>启动服务：执行<code>sudo systemctl start redis</code></p><p>关闭服务：执行<code>sudo systemctl stop redis</code></p><p>进入客户端：<code>redis-cli</code></p><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><ol><li><p>字符串类型：string</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line">get key</span><br><span class="line">del key</span><br></pre></td></tr></table></figure></li><li><p>哈希类型：hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">hget key field</span><br><span class="line">hgetall key</span><br><span class="line">hdel key field</span><br></pre></td></tr></table></figure></li><li><p>列表类型：list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpush key value</span><br><span class="line">rpush key value</span><br><span class="line">lrange key start end</span><br><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure></li><li><p>集合类型：set</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sadd key value</span><br><span class="line">smembers key</span><br><span class="line">srem key value</span><br></pre></td></tr></table></figure></li><li><p>有序集合类型：sortedset</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zadd key score value</span><br><span class="line">zrange key start end [withscores]</span><br><span class="line">zrem key value</span><br></pre></td></tr></table></figure></li></ol><p><strong>通用命令：</strong></p><ol><li><code>keys *</code>：查询所有的键</li><li><code>type key</code>：获取键对应的value的类型</li><li><code>del key</code>：删除指定的key value</li></ol><h2 id="持久化："><a href="#持久化：" class="headerlink" title="持久化："></a>持久化：</h2><ul><li>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</li></ul><h4 id="Redis的持久化机制"><a href="#Redis的持久化机制" class="headerlink" title="Redis的持久化机制"></a>Redis的持久化机制</h4><ul><li><p><strong>RDB：</strong>默认方式，不需要进行配置，默认就使用这种机制</p><p>在一定的间隔时间中，检测key的变化情况，然后持久化数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">编辑/etc/redis/redis.conf文件</span><br><span class="line"><span class="section"># after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="section"># after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="section"># after 60 sec if at least 10000 keys changed</span></span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>重新启动redis服务器，并指定redis.conf：<code>redis-server /etc/redis/redis.conf</code></p><p><strong>注意：</strong>在linux上通过apt安装的redis，关闭服务器后重启默认会重现之前数据，也就是默认使用了RDB的方式。配置文件在<code>/etc/redis/redis.conf</code>，rdb存储文件在<code>/var/lib/redis</code>目录下。</p></li><li><p><strong>AOF：</strong>日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><p>编辑redis.windwos.conf文件        </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no（关闭aof） --&gt; appendonly yes （开启aof）</span><br><span class="line"></span><br><span class="line"><span class="section"># appendfsync always ： 每一次操作都进行持久化</span></span><br><span class="line">appendfsync everysec ： 每隔一秒进行一次持久化</span><br><span class="line"><span class="section"># appendfsync no ： 不进行持久化</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis的java客户端：Jedis"><a href="#Redis的java客户端：Jedis" class="headerlink" title="Redis的java客户端：Jedis"></a>Redis的java客户端：Jedis</h2><p>使用步骤：</p><ol><li><p><strong>导入Jedis相关jar包</strong></p></li><li><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line">jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>Jedis对于String，hash，list，set，linkedset的操</strong>作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">//存储</span></span><br><span class="line">jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">String username = jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">jedis.setex(<span class="string">&quot;activecode&quot;</span>,<span class="number">20</span>,<span class="string">&quot;hehe&quot;</span>);<span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// 存储hash</span></span><br><span class="line">jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取hash</span></span><br><span class="line">String name = jedis.hget(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">// keyset</span></span><br><span class="line">Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">    <span class="comment">//获取value</span></span><br><span class="line">    String value = user.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// list 存储</span></span><br><span class="line">jedis.lpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从左边存</span></span><br><span class="line">jedis.rpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从右边存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list 弹出</span></span><br><span class="line">String element1 = jedis.lpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element1);</span><br><span class="line"></span><br><span class="line">String element2 = jedis.rpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">System.out.println(element2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list 范围获取</span></span><br><span class="line">List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// set 存储</span></span><br><span class="line">jedis.sadd(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;php&quot;</span>,<span class="string">&quot;c++&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set 获取</span></span><br><span class="line">Set&lt;String&gt; myset = jedis.smembers(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">System.out.println(myset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line"><span class="comment">// sortedset 存储</span></span><br><span class="line">jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">3</span>,<span class="string">&quot;亚瑟&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">30</span>,<span class="string">&quot;后裔&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">55</span>,<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sortedset 获取</span></span><br><span class="line">Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">&quot;mysortedset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(mysortedset);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>Jedis连接池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0.创建一个配置对象</span></span><br><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"><span class="comment">//3. 使用</span></span><br><span class="line">jedis.set(<span class="string">&quot;hehe&quot;</span>,<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line"><span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><p>连接池工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jedis.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxTotal&quot;</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxIdle&quot;</span>)));</span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">&quot;host&quot;</span>),Integer.parseInt(pro.getProperty(<span class="string">&quot;port&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取连接方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb三大组件</title>
      <link href="/2021/03/16/javaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
      <url>/2021/03/16/javaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>见之前的两篇博客：《javaWeb核心-理解servlet》，《javaWeb核心-servlet细节》，讲的很详细</li></ul><h2 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h2><ul><li>拦截请求：完成通用操作（登录验证，统一编码，敏感字符过滤）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span><span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filterDemo1被执行了....&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>web.xml配置</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>过滤器执行流程</strong></p><ol><li>执行放行前的代码</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下边的代码（一般是对response对象做增强）</li></ol></li><li><p><strong>过滤器生命周期方法</strong></p><ol><li>**init:**在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</li><li>**doFilter:**每一次请求被拦截资源时，会执行。执行多次</li><li>**destroy:**在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源</li></ol></li><li><p><strong>过滤器配置详解</strong></p><ul><li>拦截路径配置：<pre><code>      1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行   2. 拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行   3. 后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行   4. 拦截所有资源：/*        访问所有资源时，过滤器都会被执行</code></pre></li><li>拦截方式配置：<strong>资源被访问的方式</strong><ul><li>注解配置：设置dispatcherTypes属性<ol><li>REQUEST：默认值。浏览器直接请求资源</li><li>FORWARD：转发访问资源</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ol></li><li>web.xml配置：设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签即可</li></ul></li></ul></li><li><p><strong>过滤器链（配置多个过滤器）</strong></p><ul><li>执行顺序：如果有两个过滤器：过滤器1和过滤器2<pre><code>      1. 过滤器1   2. 过滤器2   3. 资源执行   4. 过滤器2   5. 过滤器1 </code></pre></li><li>过滤器先后顺序问题：<ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行<ul><li>如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li>web.xml配置： <code>&lt;filter-mapping&gt;</code>谁定义在上边，谁先执行</li></ol></li></ul><h3 id="敏感词汇过滤"><a href="#敏感词汇过滤" class="headerlink" title="敏感词汇过滤"></a>敏感词汇过滤</h3><ul><li><p>在Filter中对request中的请求参数进行过滤操作，但是由于只有<code>getProperty()</code>这个方法，没有<code>setProperty()</code>这个方法，所以，我们需要对request对象的getParameter方法进行<strong>增强</strong>。产生一个新的request对象。</p></li><li><p>增强对象功能，可以使用两种模式：装饰者模式和代理模式</p><ol><li><p><strong>装饰模式</strong></p></li><li><p><strong>代理模式</strong></p></li></ol><ul><li><p>概念：</p><ol><li>真实对象：被代理的对象</li><li>代理对象：</li><li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li></ol><ul><li>实现方式：<br>  1</li></ul><ol><li>静态代理：有一个类文件描述代理对象<ol start="2"><li>动态代理：在内存中形成代理类<ul><li>实现步骤：<ol><li>代理对象和真实对象实现相同的接口</li></ol></li></ul><ol start="2"><li>代理对象 = Proxy.newProxyInstance();</li><li>使用代理对象调用方法。</li><li>增强方法</li></ol></li></ol><ul><li>增强方式：<pre><code>   1. 增强参数列表    2. 增强返回值类型    3. 增强方法体执行逻辑    </code></pre></li></ul></li></ol></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">接口类 proxy = Proxy.newProxyInstance(</span><br><span class="line">    <span class="comment">// 参数1：真实对象的类加载器</span></span><br><span class="line">    myBeanpostProcessor.class.getClassLoader(),</span><br><span class="line">    <span class="comment">//参数2：真实对象实现的所有的接口,接口是特殊的类，使用Class[]装载多个接口</span></span><br><span class="line">    bean.getClass().getInterfaces(), </span><br><span class="line">    <span class="comment">//参数3： 接口，传递一个匿名内部类对象</span></span><br><span class="line">    <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">        <span class="comment">//proxy 代理对象</span></span><br><span class="line">        <span class="comment">//method:代理的方法对象</span></span><br><span class="line">        <span class="comment">//args:方法调用时参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">            Object obj=method.invoke(bean, args);<span class="comment">//代理类，参数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ul><li><strong>事件：</strong>一件事情</li><li><strong>事件源：</strong>事件发生的地方</li><li><strong>监听器：</strong>一个对象</li><li><strong>注册监听：</strong>将事件，事件源绑定在一起。当事件源发生某个事件时，执行监听器代码</li></ul><p><strong>说一个用来加载配置文件的监听器类</strong>（web框架中这种监听器已经写好，我们只需要配置即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletContextListener类 <span class="comment">//监听ServletContext对象的创建和销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> <span class="comment">//服务器启动后自动调用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> <span class="comment">//ServletContext对象创建后会调用该方法</span></span></span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p></li><li><p>配置<br>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.itcast.web.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br></pre></td></tr></table></figure><p>​    </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础快速回顾-下</title>
      <link href="/2021/03/09/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%8B/"/>
      <url>/2021/03/09/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul><li>匿名内部类可以省去定义实现类，但是语法太复杂</li><li>lambda表达式不关注面向对象，返璞归真，仅仅关注内容本身。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一些参数，一个箭头，一段重写代码</span></span><br><span class="line">() -&gt; System.out.println(<span class="string">&quot;lambda&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>将Runnable接口作为参数进行传递，可以使用两种方法：</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210309120501501.png" alt="image-20210309120501501"></p><ul><li>使用lambda必须满足接口中有且仅有一个抽象方法</li><li>有且仅有一个抽象方法的接口称为 “函数式接口”</li><li>Lambda的省略写法有如下要求：<ol><li>括号中参数列表的数据类型可以省略</li><li>括号中的参数只有一个，那么类型和（）都可以省略</li><li>如果{}的代码只有一行，都可以省略{} return 分号，且必须要一起省略，不能只省略部分</li></ol></li></ul><h2 id="FIle类"><a href="#FIle类" class="headerlink" title="FIle类"></a>FIle类</h2><ul><li><strong>文件和目录</strong>的抽象表示，用于文件&amp;目录的创建、查找和删除等操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File类的4个成员变量</span></span><br><span class="line"><span class="comment">//路径分隔符(windows分号,linux冒号)</span></span><br><span class="line"><span class="keyword">static</span> String pathSeparator;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> pathSeparatorChar;</span><br><span class="line"><span class="comment">//默认名称分隔符(windows反斜杠，linux正斜杠)</span></span><br><span class="line"><span class="keyword">static</span> String separator;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> separator;</span><br><span class="line"><span class="comment">//注意：操作路径的时候，路径不能写死了，根据不同系统更换</span></span><br></pre></td></tr></table></figure><ul><li>File构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">File(String pathname);</span></span><br><span class="line"><span class="comment">File(String parent,String child);</span></span><br><span class="line"><span class="comment">File(File parent,String child)</span></span><br><span class="line"><span class="comment">路径可以是文件名，也可以是文件夹名</span></span><br><span class="line"><span class="comment">可以相对路径，也可以绝对路径</span></span><br><span class="line"><span class="comment">路径可以是存在的，也可以是不存在的</span></span><br><span class="line"><span class="comment">创建File对象，只是把字符串封装为File对象，不考虑路径的真假情况</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File f1 = <span class="keyword">new</span> File(<span class="string">&quot;/home/jack1024/桌面/a.txt&quot;</span>);</span><br><span class="line">    File f2 = <span class="keyword">new</span> File(<span class="string">&quot;/home/jack1024/桌面/a&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>File类常用方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span></span>;<span class="comment">//文件/目录绝对路径名字符串（无论构造方法中传递相对还是绝对，都返回绝对路径）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span>;<span class="comment">//文件/目录路径名字符串（构造方法中传递的字符串）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//文件/目录名字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//文件字节大小(目录没有大小概念)</span></span><br></pre></td></tr></table></figure><ul><li>判断功能：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;<span class="comment">//该文件/目录是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span>;<span class="comment">//是否为目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>;<span class="comment">//是否为文件</span></span><br></pre></td></tr></table></figure><ul><li>创建 &amp; 删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span></span>;<span class="comment">//当该名字的文件不存在时，创建一个新的空文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;<span class="comment">//删除由此File表示的文件或目录，不走回收站</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>;<span class="comment">//创建由此File表示的目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span>;<span class="comment">//创建由此File表示的目录，包括任何必须但不存在的父目录</span></span><br></pre></td></tr></table></figure><ul><li>目录遍历<ul><li>包含隐藏文件/文件夹</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] list();<span class="comment">//返回一个String数组，表示该File目录中所有子文件或目录</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles();<span class="comment">//返回一个File数组，表示该File目录中所有子文件或目录</span></span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>直接递归 &amp; 间接递归</li><li>递归一定要有停止的条件约束，否则会出现栈内存溢出StackOverFlowError</li><li>递归的次数也不能太多，否则也可能发生栈内存溢出</li><li>构造方法中禁止递归</li></ul><p>递归图示：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210310002114259.png" alt="image-20210310002114259"></p><h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> File[] listFiles(FileFilter filter);</span><br><span class="line"><span class="keyword">public</span> File[] listFiles(FilenameFilter filter);</span><br></pre></td></tr></table></figure><p>通过重写accept()方法来实现</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210310010209212.png" alt="image-20210310010209212"></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h4><ul><li>OutputStream：所有输出字节流的超类，接下来主要探讨其子类FileOutputStream：<ol><li>close()：释放资源</li><li>flush()：刷新此输出流并强制写出所有缓冲的输出字节</li><li>void write(byte[] b)：往文件写入多个字节</li><li>void write(int b)：往文件写入一个字节</li><li>void write(byte[] b,int off,int len)：往文件写入指定位置指定长度的放入的数组中的字节</li></ol></li><li>FileOutputStream构造方法：<ol><li>FileOutputStream(File file)</li><li>FileOutputStream(String name)</li><li>FileOutputStream(File file, boolean append)</li><li>FileOutputStream(String name, boolean append) </li></ol></li></ul><h4 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h4><ul><li>InputStream：表示字节输入流的所有子类超类。接下来主要探讨其子类FileInputStream：<ol><li>close()：释放资源</li><li>int read(byte[] b)：从文件读取一定数量的字节，并将其存在缓冲区数组b中</li><li>int read()：从文件读取一个字节</li></ol></li><li>FileInputStream构造方法：<ol><li>FileInputStream(File file)</li><li>FileInputStream(String name)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><ul><li><p>Reader：是一个抽象类</p><ol><li>int read()</li><li>int read(char[] cbuf)</li><li>void close()</li></ol></li><li><p>FileReader：文件字符输入流</p><p>构造方法：</p><ol><li>FileReader(File file)</li><li>FileReader(String name)</li></ol></li></ul><h4 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h4><ul><li><p>Writer：是一个抽象类</p><ol><li>void write(int c)：写入单个字符</li><li>void write(char[] cbuf)：写入字符数组</li><li>abstract void write(char[] cbuf,int off,int len)：写入字符数组的某一部分，off表示开始索引，len表示写的字符个数</li><li>void write(String str)：写入字符串</li><li>void write(String str, int off, int len)：写入字符串的某一部分</li><li>void flush()：刷新流的缓冲</li><li>void close()：刷新缓冲后关闭此流</li></ol></li><li><p>字符输出流和字节输出流的最大的区别就是字符输出流要将内容先写到内存缓冲区中（进行 字符——&gt;字节 过程），所以之后必须进行flush或者close。</p></li><li><p>FileWriter构造方法：</p><ol><li>FileWriter(File file)</li><li>FileWriter(String name)</li><li>FileWriter(File file, boolean append)</li><li>FileWriter(String name, boolean append) </li></ol></li><li><p>jdk1.7之前进行异常处理的过程</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类参数对象)&#123;</span><br><span class="line">    <span class="comment">//异常的处理逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//资源释放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jdk1.7后中进行流异常处理的过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象)&#123;<span class="comment">//流对象使用完毕自动释放</span></span><br><span class="line">    <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>()&#123;</span><br><span class="line">    <span class="comment">//异常的处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性集Properties"><a href="#属性集Properties" class="headerlink" title="属性集Properties"></a>属性集Properties</h3><ul><li>唯一一个和io流结合的集合</li><li>store：集合中数据持久化到硬盘存储</li><li>load：硬盘中的键值对读取到集合使用</li><li>Properties是一个双列集合，key和value都默认是字符串</li><li>setProperty方法相当于map中的put方法</li><li>getProperty方法相当于map中的set方法</li><li>stringPropertyNames方法相当于map中的keySet方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>);</span><br><span class="line">Proterties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">prop.setProperty(<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">prop.store(fw,<span class="string">&quot;save data&quot;</span>);</span><br><span class="line">fw.close;</span><br><span class="line"></span><br><span class="line">prop.load(fw);</span><br><span class="line">Set&lt;String&gt; set = prop.stringPropertyNames();</span><br><span class="line"><span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">    String value = prop.getProperty(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>properties文件中可以使用等号或者空格来分隔键值对</li><li>对中文进行处理的时候必须使用字符输入/出流</li></ul><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><ul><li><p>增强基本流（普通流都是一个一个地传，效率低下）</p></li><li><p>给基本字节输入输出流增加一个缓冲区，提高传输速率</p></li><li><p>BufferedInputStream(InputStream fis)</p><p>BufferedInputStream(InputStream fis, int size)</p></li><li><p>BufferedOutputStream(OutputStream fos)</p><p>BufferedOutputStream(OutputStream fos, int size)</p></li><li><p>BufferedWriter(Writer fw)</p><p>BufferedWriter(Writer fw, int size)</p></li><li><p>BufferedReader(Reader fr)</p><p>BufferedReader(Reader fr, int size)</p></li><li><p><strong>写和读的方法和基本流一致</strong></p><ol><li>BufferedWriter有一个特有的成员方法void newLine：写入一个行分隔符(不同操作系统统一一个方法)</li><li>BufferReader有一个特有的成员方法String readLine：读取一行数据(不同操作系统统一一个方法)</li></ol></li></ul><p>测试复制文件的效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入需要复制的文件路径:&quot;</span>);</span><br><span class="line">        String sourcePath = scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入粘贴的路径:&quot;</span>);</span><br><span class="line">        String targetPath = scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(sourcePath));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(targetPath));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(len);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        byte[] bytes = new byte[1024];</span></span><br><span class="line"><span class="comment">//        while((len = bis.read(bytes)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//            bos.write(bytes,0,len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> sumT = t2-t1;</span><br><span class="line">        System.out.println(<span class="string">&quot;复制过程总共耗时:&quot;</span>+sumT+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><ul><li>编码：字符——&gt;字节</li><li>解码：字节——&gt;字符</li><li>制定了编码，字节文件对应的字符集也就确定了，每个软件也就能根据软件功能转化字节为对应的字符供我们查看了</li><li>常见的字符集有ASCII字符集，GBK字符集，Unicode字符集</li><li>FileReader只能读取系统默认编码utf-8格式的文件，如果读取GBK格式的文件，就会产生乱码</li><li>引入转换流来解决：InputStreamReader和OutputStreamWriter是字节流和字符流的桥梁，可以指定编码表</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210311100154292.png" alt="image-20210311100154292"></p><ul><li><p>InputStreamReader(InputStream fis) //默认编码</p><p>InputStreamReader(InputStream fis, String charsetName) //指定编码</p></li><li><p>OutputStreamWriter(OutputStream fos)</p><p>OutputStreamWriter(OutputStream fos, String charsetName)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>,<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">osw.close();</span><br><span class="line"></span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>,<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.print((<span class="keyword">char</span>)len);</span><br><span class="line">&#125;</span><br><span class="line">isr.close();</span><br></pre></td></tr></table></figure><h3 id="序列化-amp-反序列化流"><a href="#序列化-amp-反序列化流" class="headerlink" title="序列化 &amp; 反序列化流"></a>序列化 &amp; 反序列化流</h3><p>把对象以字节的形式写入到文件中存储 并 从文件中读取对象到内存中继续使用，即是<strong>对象持久化</strong></p><ul><li><p>ObjectOutputStream(OutputStream os)：对象的序列化流</p><ul><li>void writeObject(Object obj)</li></ul></li><li><p>ObjectInputStream(IutputStream is)：对象的反序列化流</p><ul><li>Object readObject()</li></ul></li><li><p>要对对象进行序列化 or 反序列化，必须在类中实现<strong>Serializable</strong>接口</p></li><li><p>序列化的内容都是对象的内容，所以static的变量不能被序列化。如果想让一个成员变量不被序列化但是又没有static的含义，可以使用transient关键字声明变量</p></li><li><p>如果一个类实现了Serializable接口，编译后的.class文件中会带有一个序列号。序列化时，会将这个序号一同写入文件；<strong>当反序列化时，会将文件的序列号和.class文件中的序列号作对比</strong>，如果不同会抛<strong>InvalidClassException</strong>异常。（每次对类修改后都会重新生成一个序列号，为了避免异常，我们可以手动给Serializable实现类加上一个序列号）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serivalVersionUID = <span class="number">42L</span>;</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><ul><li>PrintStream：为其他输出流添加功能，使他们能方便打印各种数据值的表示形式<ol><li>print()</li><li>pringln()</li><li>继承自OutputStream的方法（如果使用write方法会查询编码表97-&gt;a；如果使用println or print方法会原样输出）</li></ol></li><li>构造方法：<ol><li>PrintStream(File file)</li><li>PrintStream(OutputStream out)</li><li>PrintStream(String fileName)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;/home/jack1024/a.txt&quot;</span>);</span><br><span class="line">ps.write(<span class="number">97</span>);<span class="comment">//转化为字节</span></span><br><span class="line">ps.println(<span class="number">97</span>);<span class="comment">//原样打印到文件</span></span><br><span class="line">ps.close;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.setOut(ps);<span class="comment">//改变输出语句的目的地为ps的目的地</span></span><br><span class="line">System.out.println(<span class="string">&quot;haha&quot;</span>);<span class="comment">//会将haha字符串写到/home/jack1024/a.txt中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java网络编程"><a href="#Java网络编程" class="headerlink" title="Java网络编程"></a>Java网络编程</h2><p>TCP/IP协议是Internet中最基本，最广泛的协议，他定义了计算机计算机如何进因特网，数据如何在计算机间传输数据。它的内部包含一系列用于处理数据通信的协议</p><ul><li>TCP协议：无连接，效率更高，不安全</li><li>UDP协议：三次握手建立连接，四次挥手解除连接，效率较低，安全</li></ul><p>网络变成三要素：</p><ol><li>协议</li><li>IP地址：ipv4(32位：8<em>4)，ipv6(128位：16</em>8)，连接两台主机</li><li>端口：两个字节(0—1024—65535)，连接两台主机的两个进程</li></ol><h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><ul><li>客户端主动请求服务端建立连接，连接中包含一个IO对象，这个对象只能是字节流对象</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210311113110227.png" alt="image-20210311113110227"></p><p><strong>代码实现：</strong></p><p><strong>客户端</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210311113550491.png" alt="image-20210311113550491"></p><p><strong>服务器</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210311115105384.png" alt="image-20210311115105384"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"><span class="comment">//往服务器写</span></span><br><span class="line">OutputStream os = socket.getOutputStream();</span><br><span class="line">os.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">//从服务端拿</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        InputStream is = accept.getInputStream();</span><br><span class="line">        OutputStream os = accept.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        os.write(<span class="string">&quot;收到了&quot;</span>.getBytes());</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP文件上传案例"><a href="#TCP文件上传案例" class="headerlink" title="TCP文件上传案例"></a>TCP文件上传案例</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210311142418192.png" alt="image-20210311142418192"></p><h3 id="模拟B-S通信案例"><a href="#模拟B-S通信案例" class="headerlink" title="模拟B/S通信案例"></a>模拟B/S通信案例</h3><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li>函数式接口：有且仅有一个抽象方法的接口，但是可以包含其他方法（默认，静态，私有）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名称</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(可选参数信息)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lambda是延迟加载的，可以提升部分代码的性能。也就是说只有满足执行lambda中方法的条件，才会执行方法中的内容，否则不会执行。</li><li>函数式接口作为方法的参数，我们可以用lambda表达式 或者 匿名内部类 作为实参</li><li>函数式接口作为方法的返回值，我们可以返回这个接口的匿名内部类 或者 lambda表达式</li></ul><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.funciton.Supplier&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; sup)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sup.get();<span class="comment">//用来返回一个指定类型的数据对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = getString(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sam Smith&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.function.Consumer&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String name,Consumer&lt;String&gt; con)</span></span>&#123;</span><br><span class="line">    con.accept(name);<span class="comment">//用来消费name字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    method(<span class="string">&quot;Mariah Carey&quot;</span>,(String name)-&gt;&#123;</span><br><span class="line">        <span class="comment">//对传递的字符串进行处理消费</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//andThen()默认方法，连续组合多个Consumer的accept方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.function.Predicate&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s,Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.test(s);<span class="comment">//对传入的参数进行判断，返回真假</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">    <span class="keyword">boolean</span> b = checkString(s,()-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> s.length()&gt;<span class="number">5</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Predicate的and()，or()默认方法可以用来连接两个判断条件</span></span><br><span class="line"><span class="comment">//negate()默认方法可以对一个判断条件取反</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.function.Function&lt;T,R&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s,Function&lt;String,Integer&gt; fun)</span></span>&#123;</span><br><span class="line">    Integer in = fun.apply(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> staic <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    change(s,(String s)-&gt;&#123;<span class="comment">//将一个值从原类型转化为另一个类型</span></span><br><span class="line">    <span class="keyword">return</span> Ingeter.parseInt(s);    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//andThen()默认方法，连续组合多个Function的apply方法</span></span><br></pre></td></tr></table></figure><h2 id="Stream流式编程"><a href="#Stream流式编程" class="headerlink" title="Stream流式编程"></a>Stream流式编程</h2><ul><li><strong>Stream和io流</strong>不能说差不多，只能说是<strong>毫无关系</strong></li><li>极大地简化了对集合进行过滤 &amp; 遍历的操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">    .filter(name-&gt;name.startWith(<span class="string">&quot;杨&quot;</span>))</span><br><span class="line">    .filter(name-&gt;name.length==<span class="number">3</span>)</span><br><span class="line">    .foreach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><ul><li><strong>流式操作过程：</strong><ol><li>获取数据源(集合,数组)</li><li>数据转换(把数据源转化为Stream流)</li><li>执行操作获取想要的结果</li></ol></li></ul><h3 id="获得Stream流对象"><a href="#获得Stream流对象" class="headerlink" title="获得Stream流对象"></a>获得Stream流对象</h3><ol><li>所有collection集合可通过stream()方法获得</li><li>Stream接口有一个static方法of()，可以把数组转化为stream流</li></ol><h3 id="Stream对象的方法"><a href="#Stream对象的方法" class="headerlink" title="Stream对象的方法"></a>Stream对象的方法</h3><ul><li>stream属于管道流，只能使用一次，第一个Stream流调用完毕，数据会流到下一个Stream流身上，此时第一个Stream流就不能再调用方法了</li></ul><h4 id="延迟方法"><a href="#延迟方法" class="headerlink" title="延迟方法"></a>延迟方法</h4><ul><li>返回值类型仍然是Stream接口自身类型的方法，支持链式调用</li><li>每个流 流到下一步，上一步的流就关闭了，这个要注意，这也是为什么叫流，它是一个动态的过程</li></ul><p><strong>filter方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Sam&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = stream.filter(name-&gt;&#123;</span><br><span class="line">    reuturn name.startWith(<span class="string">&quot;J&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>map方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream2 = stream.map(String s-&gt;&#123;</span><br><span class="line">    reuturn Integer.parse(s);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>limit方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;T&gt; limit(long maxSize)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>,<span class="string">&quot;咚咚&quot;</span>);</span><br><span class="line"><span class="comment">//只取前两个元素</span></span><br><span class="line">stream.limit(<span class="number">2</span>).forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><p><strong>skip方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;T&gt; skip(long n)：跳过前n个元素</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>,<span class="string">&quot;咚咚&quot;</span>);</span><br><span class="line"><span class="comment">//只取前两个元素</span></span><br><span class="line">stream.skip(<span class="number">2</span>).forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><p><strong>concat方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span><br><span class="line"><span class="comment">//两个流合并为一个新的流</span></span><br><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; concat = Stream.concat(stream1,stream2);</span><br><span class="line">concat.forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><h4 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h4><ul><li>返回值类型不再是Stream接口自身类型的方法，不再支持链式调用</li></ul><p><strong>count方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//long count():统计个数</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Stream&lt;Ingeter&gt; stream = list.stream();</span><br><span class="line"><span class="keyword">long</span> count = stream.count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><p><strong>forEach方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void forEach(Consumer&lt;? super T&gt; con)</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Sam&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">stream.forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul><li>虽然lambda已经很简单了，但是方法引用还可以堆lambda表达式继续简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name-&gt;System.out.println(name);<span class="comment">//lambda表达式</span></span><br><span class="line">System.out::println;<span class="comment">//方法引用</span></span><br></pre></td></tr></table></figure><p>几种情况：</p><ol><li>通过对象名引用成员方法</li><li>通过类名引用静态方法</li><li>通过super引用父类成员方法</li><li>通过this引用本类成员方法</li><li>构造方法的方法引用</li><li>数组的构造器引用</li></ol><h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><ul><li>黑盒测试：不需要关注代码，只需要看输入是否能得到输出</li><li>白盒测试：通过代码来测试程序的流程正确性（Junit属于白盒测试）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义测试类</span></span><br><span class="line"><span class="comment">/**几个建议</span></span><br><span class="line"><span class="comment">1.类名：被测试类名Test</span></span><br><span class="line"><span class="comment">2.包名：XXX.XXX.test</span></span><br><span class="line"><span class="comment">3.方法名：test被测试的方法名</span></span><br><span class="line"><span class="comment">4.返回值：void</span></span><br><span class="line"><span class="comment">5.参数列表：空参</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前需要导入junit依赖</span></span><br><span class="line"><span class="keyword">public</span> CaculateTest&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Before和@After注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有测试方法前和后都会执行的两个注解@Before和@After</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>查看之前写的一片博客《java-反射》</p></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>查看之前写的一片博客《java-注解》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础快速回顾-中</title>
      <link href="/2021/03/06/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%AD/"/>
      <url>/2021/03/06/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="Java某些类"><a href="#Java某些类" class="headerlink" title="Java某些类"></a>Java某些类</h2><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><ul><li>java的根类</li></ul><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><ul><li>Object类的toString()方法默认返回该对象实现类的“类名+@+hashcode”值</li><li>看一个类是否重写了toString方法，可以通过直接打印对象名字，没有重写的显示对象地址值，重写的按照toString重写内容自定义打印</li></ul><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><ul><li>Object类的equals()方法默认就是用==来进行比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Person p = (Person)obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age==p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">10</span>;</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.name = <span class="string">&quot;sam&quot;</span>;</span><br><span class="line">        p2.age = <span class="number">14</span>;</span><br><span class="line">        p1.equals(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h3><ul><li>Objectsq工具类提供了一些静态方法来操作对象，这些方法是空指针安全，容忍空指针的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">null</span>;</span><br><span class="line">String s2 = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">//会报空指针异常</span></span><br><span class="line">System.out.println(Objects.equals(s1,s2));<span class="comment">//一切正常</span></span><br></pre></td></tr></table></figure><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><ul><li>毫秒是日期计算的最小单位</li><li>0毫秒点：1970年1月1日00:00:00（中国属于东八区，会+8小时）</li><li>日期转化为时间戳，就是距离0毫秒点经过了多少毫秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();<span class="comment">//获取系统当前日期时间</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">long</span> ms);<span class="comment">//时间戳转化为日期时间</span></span><br><span class="line"><span class="keyword">long</span> ms = date.getTime();<span class="comment">//把日期转化为毫秒时间戳</span></span><br></pre></td></tr></table></figure><h3 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h3><ul><li>根据自定义格式相互转化Date &amp; String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是抽象类，无法直接使用</span></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="comment">//使用SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="comment">//参数是格式(y年，M月，d日，H时，m分，s秒)</span></span><br><span class="line">DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//两个方法：format(Date d)和parse(String s)</span></span><br><span class="line">DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String text = sdf.format(date);<span class="comment">//Date——&gt;String</span></span><br><span class="line">Date date2 = sdf.parse(text);<span class="comment">//String——&gt;Date，这是一个抛异常的方</span></span><br></pre></td></tr></table></figure><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是抽象类，无法直接使用</span></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="comment">//获得Calendar类的子类对象</span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">int</span> y = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> m = c.get(Calendar.MONTH);<span class="comment">//0——11</span></span><br><span class="line"><span class="keyword">int</span> d = c.get(Calendar.Date);</span><br><span class="line"><span class="keyword">int</span> h = c.get(Calendar.HOUR);</span><br><span class="line"><span class="keyword">int</span> m = c.get(Calendar.MINUTE);</span><br><span class="line"><span class="keyword">int</span> s = c.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">c.set(Calendar.YEAR,<span class="number">1999</span>);</span><br><span class="line">c.add(Calendar.YEAR,<span class="number">2</span>);<span class="comment">//2001</span></span><br><span class="line">c.add(Calendar.YEAR,-<span class="number">4</span>);<span class="comment">//1997</span></span><br><span class="line"></span><br><span class="line">Date date = c.getTime();<span class="comment">//Calendar——&gt;Date</span></span><br></pre></td></tr></table></figure><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> s = System.currentTimeMillis();<span class="comment">//一般用来测试程序执行时间</span></span><br><span class="line"><span class="comment">//arraycopy(源数组，源数组中的起始位置，目标数组，目标数组中的起始位置，要复制的数组元素数量);</span></span><br><span class="line"><span class="keyword">int</span>[] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//复制后dest=&#123;1,2,3,9,10&#125;</span></span><br></pre></td></tr></table></figure><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><ul><li>字符串底层是一个final常亮，每次对String修改后都需要新建一个String类型的对象，效率很低，为了应对这种情况，StringBuilder应运而生。</li><li>StringBuiler是字符串缓冲区，可以提高字符串操作效率，可以看做是长度可以变化的字符串，底层是一个不被final修饰的byte数组，初始容量16，在修改过程中如果不够会自动扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">StringBuilder sb2 = sb.append(<span class="string">&quot;cde&quot;</span>);<span class="comment">//返回sb自己，内部return this</span></span><br><span class="line">System.out.println(sb == sb2);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//String——&gt;StringBuilder</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="comment">//StringBuilder——&gt;String</span></span><br><span class="line">String s = sb.toString();</span><br></pre></td></tr></table></figure><h3 id="基本数据类型的包装类"><a href="#基本数据类型的包装类" class="headerlink" title="基本数据类型的包装类"></a>基本数据类型的包装类</h3><ul><li>目的是提供一些方法来操作数据类型</li></ul><table><thead><tr><th>Byte</th><th>Short</th><th>Integer</th><th>Long</th><th>Float</th><th>Double</th><th>Character</th><th>Boolean</th></tr></thead><tbody><tr><td>byte</td><td>short</td><td>int</td><td>long</td><td>float</td><td>double</td><td>character</td><td>boolean</td></tr></tbody></table><ul><li><p>装箱：基本类型——&gt;包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer i = Interger.valueOf(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>拆箱：包装类——&gt;基本类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ii = i.intValue();</span><br></pre></td></tr></table></figure></li><li><p>自动装拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> a = list.get(<span class="number">0</span>);<span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure></li><li><p>基本类型和字符串之间转换：</p><ul><li>基本类型——&gt;字符串<ol><li><code>+&quot;&quot;</code></li><li>包装类中的静态方法toString</li><li>String类中的静态方法valueOf</li></ol></li><li>字符串——&gt;基本类型<ol><li>包装类中的静态方法parseXX</li></ol></li></ul></li></ul><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><ul><li>会使用集合存储数据</li><li>会遍历集合，把数据取出来</li><li>掌握每种集合的特性</li><li>所有集合的父类：<strong>Collection</strong></li></ul><h3 id="Collection集合（单列集合）"><a href="#Collection集合（单列集合）" class="headerlink" title="Collection集合（单列集合）"></a>Collection集合（单列集合）</h3><ul><li>Collection&lt; T &gt;</li></ul><p>公共方法：</p><ol><li>boolean add(E e)</li><li>boolean remove(E e)</li><li>void clear()</li><li>boolean contains(E e)</li><li>boolean isEmpty()</li><li>int size()</li><li>Object[] toArray()</li></ol><h4 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h4><ol><li>boolean hasNext()</li><li>E next()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Collection中的iterator()方法获得</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;sam&quot;</span>);</span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;sam&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String s : coll)&#123;</span><br><span class="line">    System.out.println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含有泛型的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>集合如果不使用泛型，默认就是Object类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含有泛型的方法</span></span><br><span class="line"><span class="comment">//修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表)&#123;方法体&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用的时候传递什么参数就调用什么类型的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含有泛型的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种用法：实现的时候确定泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种用法：创建对象的时候确定泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传值的时候：泛型通配符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">Iterator&lt;?&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上限限定：? extends E：?只能是E的子类或本身</span></span><br><span class="line"><span class="comment">//下限限定：? super E：?只能是E的父类或本身</span></span><br></pre></td></tr></table></figure><h3 id="List接口：Collection的第一个子类"><a href="#List接口：Collection的第一个子类" class="headerlink" title="List接口：Collection的第一个子类"></a>List接口：Collection的第一个子类</h3><ul><li>有序的集合</li><li>允许存储重复的元素</li><li>有索引index，可以使用普通的for遍历</li></ul><p>特有方法：(带索引)</p><ol><li>public void add(int index,E element)</li><li>public E get(int index)</li><li>public E remove(int index)</li><li>public E set(int index,E element)</li></ol><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>底层是数组，查询快，增删慢</li><li>单线程（所以被ArrayList取代）</li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul><li>底层是数组，查询快，增删慢</li><li>多线程</li></ul><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul><li>底层是双向链表，查询慢，增删快</li><li>多线程</li></ul><p>特有方法：</p><ol><li>public void addFirst(E e) == public void push(E e)</li><li>public void addLast(E e) == public void add(E e)</li><li>public E getFirst()</li><li>public E getLast()</li><li>public E removeFirst() == public E pop()</li><li>public E removeLast()</li></ol><h3 id="Set接口：Collection的第二个子类"><a href="#Set接口：Collection的第二个子类" class="headerlink" title="Set接口：Collection的第二个子类"></a>Set接口：Collection的第二个子类</h3><ul><li>无序的集合</li><li>不允许存储重复元素（原理上来看，必须保证元素类重写hashcode和equals方法）</li><li>没有索引index，不能使用普通的for遍历，只能用迭代器遍历</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li>底层是二叉树，一般用于排序</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>底层是<code>哈希表(数组+红黑树)</code>实现的，查询速度极快</li></ul><h4 id="LinkedHashSet（有序）"><a href="#LinkedHashSet（有序）" class="headerlink" title="LinkedHashSet（有序）"></a>LinkedHashSet（有序）</h4><ul><li>底层是<code>哈希表(数组+红黑树)+链表</code>实现的，<strong>可以保证存取顺序</strong></li></ul><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);<span class="comment">//同时加多个</span></span><br><span class="line">Collections.shuffle(list);<span class="comment">//打乱顺序</span></span><br><span class="line">Collections.sort(list);<span class="comment">//按照默认顺序排序；要排序自定义类型，元素类必须实现Comparable接口，重写compareto方法</span></span><br><span class="line">Collections.sort(list,<span class="keyword">new</span> Comparator&lt;String&gt;&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();<span class="comment">//升序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Map集合（双列集合）"><a href="#Map集合（双列集合）" class="headerlink" title="Map集合（双列集合）"></a>Map集合（双列集合）</h3><ul><li><p>Map&lt; K,V &gt;</p></li><li><p>双列集合，一个元素包含两个值</p></li><li><p>key不能重复，value不能重复，且一一对应</p></li></ul><p>公共方法：</p><ol><li>public V put(K key,V value)：key存在返回null，key不存在返回被替代的value</li><li>public V get(Object key)：key存在返回对应value，key不存在返回nul</li><li>public V remove(Object key)：key存在返回被删除value，key不存在返回null</li><li>public boolean containsKey(Object key)：判断是否包含指定key</li><li>public boolean containsValue(Object value)：判断是否包含指定value</li><li>keySet：Map集合的第一种遍历方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = map.keySet();<span class="comment">//获得map集合的所有key，存在set集合中</span></span><br><span class="line">Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String key = it.next();</span><br><span class="line">    Integer value = map.get(key);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">    Integer value = map.get(key);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>entryset：Map集合的第二种遍历方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String,Integer&gt;&gt; set = map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; e : set)&#123;</span><br><span class="line">    System.out.println(e.getKey());</span><br><span class="line">    System.out.println(e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要存储自定义元素，对于key的元素，必须重写hashCode和equals方法来保证key唯一</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>底层是<code>哈希表(数组+红黑树)</code></li><li>无序</li></ul><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><ul><li>底层是<code>哈希表(数组+红黑树)+链表</code></li><li>有序(存储顺序==取出顺序)</li></ul><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><ul><li>不能存储null键，null值，已经被hashmap取代</li><li>Hashtable的子类<strong>Properties</strong>依然在IO流中使用</li></ul><h3 id="JDK9中集合添加的优化"><a href="#JDK9中集合添加的优化" class="headerlink" title="JDK9中集合添加的优化"></a>JDK9中集合添加的优化</h3><ul><li>只适用于List，Set，Map接口</li><li>of返回值是一个不能改变的集合，之后不能再使用add，put等方法</li><li>Set和Map在调用of方法时，不能有重复的元素，否则会报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">Set&lt;String&gt; set = Set.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">Map&lt;String,Integer&gt; map = Map.of(<span class="string">&quot;张三&quot;</span>,<span class="number">14</span>,<span class="string">&quot;赵四&quot;</span>,<span class="number">12</span>,<span class="string">&quot;刘能&quot;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>当参数列表数据类型确定，但是参数个数不确定，就可以使用可变参数</li><li>底层会根据传递参数的不同创建不同长度的数组（0到多个）</li><li>一个方法中最多有一个可变参数</li><li>如果参数有多个，可变参数必须写在参数列表最后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际上传递的是数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>语法错误——&gt;编译失败</li><li>异常——&gt;编译/运行失败</li><li>Throwable的两个子类：Error 和 Exception<ol><li>Error类一般是指与虚拟机相关的问题，如<strong>系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢</strong>等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。</li><li>Exception类表示程序可以处理的异常，<strong>可以捕获且可能恢复</strong>。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。</li></ol></li></ul><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><h4 id="Exception：编译期异常"><a href="#Exception：编译期异常" class="headerlink" title="Exception：编译期异常"></a>Exception：编译期异常</h4><ul><li>在方法名后 throws Exception：虚拟机中断程序打印处理</li><li>try catch处理异常：无需中断，程序正常执行</li></ul><h4 id="RuntimException：运行期异常"><a href="#RuntimException：运行期异常" class="headerlink" title="RuntimException：运行期异常"></a>RuntimException：运行期异常</h4><ul><li>try catch处理异常</li></ul><h4 id="Error：错误"><a href="#Error：错误" class="headerlink" title="Error：错误"></a>Error：错误</h4><ul><li>程序无法治愈，<strong>必须修改源码</strong></li></ul><h3 id="异常产生过程"><a href="#异常产生过程" class="headerlink" title="异常产生过程"></a>异常产生过程</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308122500908.png" alt="image-20210308122500908"></p><h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><ul><li>5个关键字：<strong>try、catch、finally、throw、throws</strong></li></ul><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><ul><li>只能用在方法内部</li><li>后边的对象只能是Exception或者Exception子类对象</li><li>必须处理throw的异常对象<ul><li>如果throw RuntimeException或者RuntimeException子类对象，可以自动交给JVM处理，自己不做手动处理</li><li>如果throw 编译期异常，必须手动处理，要么连续throws到jvm处理，要么try…catch…</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">常见的编译期异常和运行期异常</span><br><span class="line">a)编译期异常：</span><br><span class="line">          1.ClassNotFoundException(类找不到异常)</span><br><span class="line">          2.FileNotFoundException（编译文件夹中找不到，就是发布到tomcat中的，不是工程中）</span><br><span class="line">          3.SQLException ：提供有关数据库访问错误或其他错误的信息的异常。（ 比如SQL语句写错，访问的表不存在，连接数据库失败等等）</span><br><span class="line">          4.IOexception：IO流异常。一般在读写数据的时候会出现这种问题。</span><br><span class="line">          5.EOFException:当输入过程中意外到达文件或流的末尾时，抛出此异常。</span><br><span class="line">b)运行期异常：</span><br><span class="line">          1.NullPointerException(空指针异常)</span><br><span class="line">          2.ArithmeticException（运算非法异常）</span><br><span class="line">          3.IndexOutOfBoundsException(数组越界异常)</span><br><span class="line">          4.ClassCastException(类转换异常)</span><br><span class="line">          5.ArrayStoreException(数据存储异常，操作数组时类型不一致)</span><br><span class="line">          6.BufferOverflowException(字节溢出异常—IO流操作)</span><br></pre></td></tr></table></figure><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><ul><li>一步一步往上抛</li><li>如果同时throw多个异常且含有父子关系，throws后面只需写 父类</li></ul><h4 id="try…catch…"><a href="#try…catch…" class="headerlink" title="try…catch…"></a>try…catch…</h4><ul><li>try中如果产生了异常，会直接执行catch中内容，之后执行try…catch后代码</li><li>try中如果没有异常，不会执行catch中内容，直接执行try…catch后代码</li><li>Throwable中的3个异常处理的方法<ol><li>getMessage()</li><li>toString()</li><li>printStackTrace()：默认</li></ol></li></ul><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><ul><li>解决try语句块中异常后的代码无法执行的问题</li><li>不能单独使用，只能和try一起使用</li><li>一般用于资源释放</li><li>避免在finally语句中写return语句</li></ul><h3 id="异常处理时注意："><a href="#异常处理时注意：" class="headerlink" title="异常处理时注意："></a>异常处理时注意：</h3><ol><li>多异常分别处理，多异常一次捕获多次处理，多异常一次捕获一次处理</li><li>父类方法抛出多个异常，子类重写时只能抛出同样异常 or 异常子类 or 不抛</li><li>父类方法没有抛出异常，子类重写时也不能抛异常，如果子类有异常只能捕获</li></ol><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><ul><li>继承Exception：编译时异常</li><li>继承RuntimeException：运行时异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">//异常信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取异常信息,由于构造函数调用了super(message),不用重写此方法</span></span><br><span class="line">    <span class="comment">//public String getMessage()&#123;</span></span><br><span class="line">    <span class="comment">//    return message;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li>进程是操作系统资源分配的基本单位，负责为程序分配内存空间</li><li>而线程是任务调度和执行的基本单位，负责程序实际的执行</li><li>一个进程中至少有一个线程</li><li>同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。</li><li>每个线程拥有自己的<strong>栈段</strong>， 寄存器的内容，栈段又叫运行时段，用来存放所有局部变量和临时变量。</li></ul><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul><li>java程序属于抢占式调度，哪个线程优先级高就会优先执行哪个线程；同一优先级会随机选择一个执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;<span class="comment">//重写Thread类的run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;prime-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PrimeThread p = <span class="keyword">new</span> PrimeThread();</span><br><span class="line">        p.start();<span class="comment">//会调用线程的run方法，只能调用一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308165029075.png" alt="image-20210308165029075"></p><p><strong>多线程内存图</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308165656672.png" alt="image-20210308165656672"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308173426698.png" alt="image-20210308173426698"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得指定线程名称</span></span><br><span class="line">PrimeThread primeThread = <span class="keyword">new</span> PrimeThread();</span><br><span class="line">System.out.println(primeThread.getName());</span><br><span class="line"><span class="comment">//获得当前线程名称</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line"><span class="comment">//修改线程名称</span></span><br><span class="line">primeThread.setName(<span class="string">&quot;线程0&quot;</span>);</span><br><span class="line"><span class="comment">//也可以修改PrimeThread构造函数直接修改名字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//让父类Thread构造方法给子线程起名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h4><ul><li>是当前正在执行的线程暂停</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;<span class="comment">//重写Thread类的run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;prime-----&gt;&quot;</span>+i);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//1000毫秒==1秒</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Runnable类：创建多线程的第二种方式"><a href="#Runnable类：创建多线程的第二种方式" class="headerlink" title="Runnable类：创建多线程的第二种方式"></a>Runnable类：创建多线程的第二种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;prime-----&gt;&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        RunnableImpl ri = <span class="keyword">new</span> RunnableImpl();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(ri)</span><br><span class="line">        t.start();<span class="comment">//会调用线程的run方法，只能调用一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>好处：<ol><li>Runnable方式避免了单继承的局限性</li><li>Runnable方式降低了耦合性：RunnableImpl设置线程 &amp; Thread开启线程 解耦</li></ol></li></ul><h3 id="使用匿名内部类的方式创建线程"><a href="#使用匿名内部类的方式创建线程" class="headerlink" title="使用匿名内部类的方式创建线程"></a>使用匿名内部类的方式创建线程</h3><ul><li>Thread和Runnable两种方式都可以</li></ul><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><ul><li>多线程访问了共享的数据，会出现线程安全问题</li><li>这种线程安全问题是不能发生的，我们要确保某个时刻只能由一个线程访问共享资源</li></ul><h4 id="解决线程安全问题"><a href="#解决线程安全问题" class="headerlink" title="解决线程安全问题"></a>解决线程安全问题</h4><ol><li><p><strong>同步代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">    <span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308180822199.png" alt="image-20210308180822199"></p><ol start="2"><li><strong>同步方法</strong></li></ol><ul><li>方法修饰符：synchronized</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">    <span class="comment">//锁对象是this对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">    <span class="comment">//锁对象是本类的class属性对象</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Lock锁机制</strong></li></ol><ul><li>Lock接口中的两个方法：<ol><li>void lock()：获取锁</li><li>void unlock()：释放锁</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lock l = <span class="keyword">new</span> ReentrantLock();<span class="comment">//创建类的成员变量l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在某个方法中</span></span><br><span class="line">l.lock();</span><br><span class="line"><span class="comment">//多线程访问共享数据的代码</span></span><br><span class="line">l.unlock();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.State：Thread类的内部类State</span><br></pre></td></tr></table></figure><ul><li><strong>一共6种状态</strong></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308214423553.png" alt="image-20210308214423553"></p><ul><li>sleep(参数) 和 wait(参数) 其实都是一样的</li><li>notify() 是唤醒一个等待的线程，notifyAll()是唤醒所有等待的线程</li></ul><h3 id="线程间通信（等待唤醒机制）"><a href="#线程间通信（等待唤醒机制）" class="headerlink" title="线程间通信（等待唤醒机制）"></a>线程间通信（等待唤醒机制）</h3><ul><li>多个线程处理同一个资源，一个生产，一个消费</li><li>wait和notify方法必须要使用同一个锁对象调用</li><li>wait和notify方法属于Object类的方法</li><li>wait方法和notify方法必须在同步代码块或者同步函数中使用</li></ul><h4 id="生产者-amp-消费者问题"><a href="#生产者-amp-消费者问题" class="headerlink" title="生产者&amp;消费者问题"></a>生产者&amp;消费者问题</h4><ul><li>以包子铺为例</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308230625128.png" alt="image-20210308230625128"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包子类（锁对象）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">    String pi;</span><br><span class="line">    String xian;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包子铺类（生产者）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(BaoZi bz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                bz.pi = <span class="string">&quot;薄皮&quot;</span>;</span><br><span class="line">                bz.xian = <span class="string">&quot;三鲜馅&quot;</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;包子铺正在生产&quot;</span>+bz.pi+bz.xian+<span class="string">&quot;的包子&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                bz.flag = <span class="keyword">true</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;包子铺已经生产好了包子&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//吃货类（消费者类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(BaoZi bz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货正在吃&quot;</span>+bz.pi+bz.xian+<span class="string">&quot;的包子&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                bz.flag = <span class="keyword">false</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货已经吃完了包子&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;*************************************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaoZi bz = <span class="keyword">new</span> BaoZi();</span><br><span class="line">        <span class="keyword">new</span> BaoZiPu(bz).start();</span><br><span class="line">        <span class="keyword">new</span> ChiHuo(bz).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li>线程池就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建对象的操作，无需反复创建线程而消耗过多资源</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210308232553076.png" alt="image-20210308232553076"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.concurrent.Executors:线程池的工厂类</span></span><br><span class="line"><span class="comment">//生产一个指定线程数量的线程池</span></span><br><span class="line">ExecutorService es = Executors.newFixedThreadPool();</span><br><span class="line"><span class="comment">//实现一个Runnable实现类</span></span><br><span class="line"><span class="comment">//调用ExecutorService中的方法submit，执行线程</span></span><br><span class="line">es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line"><span class="comment">//调用ExecutorService中的方法shutdown销毁线程池</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Linux工作平台搭建</title>
      <link href="/2021/03/06/%E6%88%91%E7%9A%84Linux%E5%B7%A5%E4%BD%9C%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/03/06/%E6%88%91%E7%9A%84Linux%E5%B7%A5%E4%BD%9C%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Mint-LInux安装概述"><a href="#Mint-LInux安装概述" class="headerlink" title="Mint LInux安装概述"></a>Mint LInux安装概述</h2><ol><li>rufus录入iso镜像到U盘</li><li>进入bios界面调节启动位置为U盘</li><li>开机进入安装界面，下一步…</li><li>efi分区自动放入win10的efi分区，/分区45G，/home分区300G，swap分区1G</li></ol><h2 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h2><h3 id="双系统时间不同步"><a href="#双系统时间不同步" class="headerlink" title="双系统时间不同步"></a>双系统时间不同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 禁用Ubuntu的UTC</span></span><br><span class="line">timedatectl set-local-rtc 1 --adjust-system-clock</span><br><span class="line"><span class="comment"># 更新本地时间</span></span><br><span class="line">sudo apt install ntpdate</span><br><span class="line">sudo ntpdate time.windows.com</span><br><span class="line"><span class="comment"># 将本地时间更新到硬件上</span></span><br><span class="line">sudo hwclock --localtime --systohc</span><br></pre></td></tr></table></figure><h3 id="输入法里安装ficix-amp-安装搜狗输入法"><a href="#输入法里安装ficix-amp-安装搜狗输入法" class="headerlink" title="输入法里安装ficix &amp; 安装搜狗输入法"></a>输入法里安装ficix &amp; 安装搜狗输入法</h3><ul><li>IDEA等jetbrain公司的IDE的搜狗输入法不跟随问题可以采用更改这些IDE的运行环境解决</li></ul><h3 id="完善mint的中文支持"><a href="#完善mint的中文支持" class="headerlink" title="完善mint的中文支持"></a>完善mint的中文支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install language-pack-zh-hans language-pack-gnome-zh-hans</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加微软雅黑字体</span></span><br><span class="line"><span class="comment">#雅黑字体文件放在 Windows/fonts/ 文件夹，或者在控制面板-字体中查找，两个文件名分别为：msyh.ttf和msyhbd.ttf。字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Linux mint 系统字体文件夹中创建对应的字体文件夹：</span></span><br><span class="line">sudo  mkdir  /usr/share/fonts/msyh</span><br><span class="line"><span class="comment"># 移动字体文件到对应的文件夹下：</span></span><br><span class="line">udo  mv  msyh.ttf msyhbd.ttf  /usr/share/fonts/msyh</span><br><span class="line"><span class="comment"># 更新字体：</span></span><br><span class="line">sudo  fc-cache  -fv</span><br></pre></td></tr></table></figure><h3 id="安装typora"><a href="#安装typora" class="headerlink" title="安装typora"></a>安装typora</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add - <span class="comment"># 添加公钥</span></span><br><span class="line">sudo add-apt-repository <span class="string">&#x27;deb https://typora.io/linux ./&#x27;</span> <span class="comment"># 添加typora仓库</span></span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install typora <span class="comment"># 安装typora</span></span><br></pre></td></tr></table></figure><h3 id="安装Qv2ray"><a href="#安装Qv2ray" class="headerlink" title="安装Qv2ray"></a>安装Qv2ray</h3><p><a href="%5Bpan.baidu.com/s/1hPKp0V%5D(https://link.zhihu.com/?target=https://pan.baidu.com/s/1hPKp0V4J54YihTsh05zhOQ)">Qv2ray下载</a>：密码1lph</p><p><a href="%5Bhttps://pan.baidu.com/s/14quUKv%5D(https://link.zhihu.com/?target=https://pan.baidu.com/s/14quUKv1-9_QHYPXjHe-2Aw)">插件下载</a>：密码ha9k</p><ul><li><p>制作启动项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=qv2ray</span><br><span class="line">Comment=network ladder</span><br><span class="line">Exec=/home/jack1024/Programs/Qv2ray/Qv2ray.v2.6.3.AppImage</span><br><span class="line">Icon=/home/jack1024/Programs/Qv2ray/qv2ray.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Network;</span><br></pre></td></tr></table></figure></li></ul><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><ul><li><a href="https://www.pling.com/s/Cinnamon/">Cinnamon主题</a>：选择Full Icon Themes 和 Cinnamon Themes分别下载图标包<strong>Papirus</strong>和主题包<strong>Adapta Colorpack Normal</strong></li><li>在Gnome主题的GRUB Thmes中选一个开机引导的主题下载安装</li><li>面板移到顶部，调整面板控件摆放</li><li>安装<strong>扩展、小程序、桌面小工具</strong>等插件</li><li>选一张好看的壁纸</li></ul><h3 id="安装各种软件"><a href="#安装各种软件" class="headerlink" title="安装各种软件"></a>安装各种软件</h3><h4 id="vim简单配置"><a href="#vim简单配置" class="headerlink" title="vim简单配置"></a>vim简单配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim .vimrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> nobackup</span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="built_in">set</span> ruler</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> mouse=c</span><br><span class="line"><span class="built_in">set</span> showmode    </span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br></pre></td></tr></table></figure><h4 id="安装-amp-配置git"><a href="#安装-amp-配置git" class="headerlink" title="安装&amp;配置git"></a>安装&amp;配置git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yangfanjack&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1144536063@qq.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa      <span class="comment"># 生成两把钥匙</span></span><br><span class="line">ssh -T git@github.com  <span class="comment"># 验证ssh配置是否配置好</span></span><br></pre></td></tr></table></figure><h4 id="安装postman"><a href="#安装postman" class="headerlink" title="安装postman"></a>安装postman</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=postman</span><br><span class="line">Comment=API development</span><br><span class="line">Exec=/home/jack1024/Programs/Postman/Postman</span><br><span class="line">Icon=/home/jack1024/Programs/Postman/app/resources/app/assets/icon.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Network,Development;</span><br></pre></td></tr></table></figure><h4 id="安装wireshark"><a href="#安装wireshark" class="headerlink" title="安装wireshark"></a>安装wireshark</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用usermod命令将您自己添加到wirehark组</span></span><br><span class="line">sudo usermod -aG wireshark $(whoami)</span><br></pre></td></tr></table></figure><h4 id="安装picgo-core并配置"><a href="#安装picgo-core并配置" class="headerlink" title="安装picgo-core并配置"></a>安装picgo-core并配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nvm和nodejs</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm --version</span><br><span class="line">nvm ls-remote</span><br><span class="line">nvm install v12.18.0</span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gitee插件</span></span><br><span class="line"><span class="built_in">cd</span> /home/jack1024/.config/Typora/picgo/linux</span><br><span class="line">./picgo install gitee-uploader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置picgo-core</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;current&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uploader&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gitee&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;repo&quot;</span>: <span class="string">&quot;gitee用户名/仓库名&quot;</span>,</span><br><span class="line">      <span class="string">&quot;branch&quot;</span>: <span class="string">&quot;master&quot;</span>,</span><br><span class="line">      <span class="string">&quot;token&quot;</span>: <span class="string">&quot;你的私人令牌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;img/  #你的仓库下的路径&quot;</span>,</span><br><span class="line">      <span class="string">&quot;customPath&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">      <span class="string">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;transformer&quot;</span>: <span class="string">&quot;path&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;picgo-plugin-gitee-uploader&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装zsh-amp-oh-my-zsh"><a href="#安装zsh-amp-oh-my-zsh" class="headerlink" title="安装zsh &amp; oh-my-zsh"></a>安装zsh &amp; oh-my-zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line"><span class="comment"># 安装oh-my-zsh</span></span><br><span class="line">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br><span class="line"><span class="comment"># 移动配置文件到home</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"><span class="comment"># 设置zsh为默认shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"><span class="comment"># 优化zsh</span></span><br><span class="line"><span class="comment"># 添加nvm环境变量到.zshrc</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh速度优化</span></span><br><span class="line"><span class="comment"># Add default node to path</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/.nvm/versions/node/v10.22.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># load nvm</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ]] &amp;&amp; <span class="built_in">source</span> <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> --no-use</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件安装</span></span><br><span class="line">apt install bat</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$ZSH_CUSTOM</span>/plugins/git-open</span><br><span class="line"></span><br><span class="line">plugins=(其他的插件 zsh-autosuggestions zsh-syntax-highlighting git-open Z)</span><br><span class="line">HIST_STAMPS=<span class="string">&quot;yyyy-mm-dd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于powerline主题的字体要求,进入fonts后bash .install.sh</span></span><br><span class="line">https://github.com/powerline/fonts</span><br></pre></td></tr></table></figure><h4 id="安装Powerlevel10k-zsh主题"><a href="#安装Powerlevel10k-zsh主题" class="headerlink" title="安装Powerlevel10k  zsh主题"></a>安装Powerlevel10k  zsh主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载Powerlevel10k</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/romkatv/powerlevel10k.git <span class="variable">$ZSH_CUSTOM</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置.zshrc</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MesloLGS NF字体文件</span></span><br><span class="line">https://github.com/romkatv/powerlevel10k<span class="comment">#meslo-nerd-font-patched-for-powerlevel10k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义主题</span></span><br><span class="line">p10k configure</span><br></pre></td></tr></table></figure><h4 id="安装wps缺失字体"><a href="#安装wps缺失字体" class="headerlink" title="安装wps缺失字体"></a>安装wps缺失字体</h4><p><a href="https://pan.baidu.com/s/1fn2sTNaqNmbK8BcS9iMSGw">字体下载地址</a>：密码n9xc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip wps_symbol_fonts.zip -d /usr/share/fonts/wps-office</span><br></pre></td></tr></table></figure><p>进入wps-office目录，一个一个地安装</p><h3 id="配置各种环境"><a href="#配置各种环境" class="headerlink" title="配置各种环境"></a>配置各种环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk gcc g++ cmake</span><br></pre></td></tr></table></figure><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p><a href="https://downloads.mysql.com/archives/community/">官网下载</a>：安装5.7.31</p><p>解压，得到13个包，删除两个test包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-*.deb</span><br><span class="line">sudo apt install -f</span><br><span class="line">sudo dpkg -i mysql-*.deb</span><br><span class="line">mysql -uroot -proot</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>因为基于ubuntu20.04的mint20.1的默认mysql版本是mysql8，所以需要锁定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁定软件包版本</span></span><br><span class="line">sudo apt-mark hold mysql-common</span><br><span class="line">sudo apt-mark hold mysql-client</span><br><span class="line">sudo apt-mark hold mysql-server</span><br><span class="line"><span class="comment"># 检查标记为锁定的包</span></span><br><span class="line">sudo apt-mark showhold</span><br><span class="line"><span class="comment"># 接触锁定</span></span><br><span class="line">sudo apt-mark xxx</span><br></pre></td></tr></table></figure><h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><p><a href="https://tomcat.apache.org/download-90.cgi">官网下载</a>：安装9.0.43</p><p>解压后移动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-tomcat-9.0.43 /opt/</span><br></pre></td></tr></table></figure><h4 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h4><p><a href="http://maven.apache.org/download.cgi">官网下载</a>：安装3.6.3</p><p>解压后移动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-maven-3.6.3 /opt/</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/profile.d</span><br><span class="line">sudo vim maven.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> M2_HOME=/opt/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$M2_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> maven.sh</span><br></pre></td></tr></table></figure><p>拷贝setting.xml到~/.m2下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改respository--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/jack1024/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA和Clion配置</p><ul><li>大小写不敏感：Editor，General，Code Completion，取消Match case</li><li>取消打开默认项目：Appearanc&amp;Behavior，System Settings，取消Reopen</li><li>主题：Appearanc&amp;Behavior，Appearance，Theme</li><li>编辑区主题：Editor，Color Scheme，Color Scheme Font</li><li>字体：Editor，Font</li><li>自动导包：Editor，General，Auto Import</li><li>自动编译：Build，Compiler，Build Project Auto，Compile independent</li></ul><h2 id="软件："><a href="#软件：" class="headerlink" title="软件："></a>软件：</h2><h3 id="日常："><a href="#日常：" class="headerlink" title="日常："></a>日常：</h3><p>搜狗输入法：中文输入法</p><p>edge：微软浏览器</p><p>chrome：谷歌浏览器</p><p>qv2ray：科学冲浪</p><p>xdm：下载</p><p>utools：让你效率倍增的快速启动软件</p><p>每日英语听力：学英语</p><p>网易云音乐：在线听歌</p><p>1music：一个聚合听歌开源软件</p><p>audacious：本地听歌</p><p>gimp：图片处理</p><p>shotcut：视频剪辑</p><p>steam：游戏</p><p>vlc：视频播放器</p><p>telegram：加密聊天</p><p>qq for linux：复古风qq</p><p>wps：办公套件</p><p>百度网盘：限速达人</p><p>mindmaster：思维导图</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>clion：C/C++开发IDE</p><p>idea：Java开发IDE</p><p>dbeaver：数据库管理客户端</p><p>filezilla：ftp客户端</p><p>smartgit：git客户端</p><p>typora：markdown笔记</p><p>virtualbox：虚拟机</p><p>vscode：强大拓展性文本编辑器</p><p>wireshark：网络抓包</p><p>zeal：离线文档</p><p>ARDM：redis管理客户端</p><p>postman：http调试</p><h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><p>keepassXC：密码管理</p><p>copyQ：剪切板历史</p><p>caffeine：屏幕常亮</p><p>keepassxc：密码管理</p><p>新立得：apt包管理客户端</p><p>Gparted：磁盘管理</p><p>bleachbit：清理垃圾</p><p>zsh：舒服的shell</p><p>oh-my-zsh：zsh快速配置</p><p>tldr：查看命令帮助文档</p><p>htop：系统监视</p><p>kdeconnect：电脑手机强大交互软件</p><p>plank：dock栏</p><p>obs-studio：录屏</p><p>etcher：U盘镜像制作</p><p>Qredshift：根据时区自动调整屏幕亮度，温感</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>jdk1.8</p><p>gcc g++</p><p>maven3.6.3</p><p>mysql5.7</p><p>cmake</p><p>tomcat9</p><p>nvm</p><p>node</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>watermark</p><p>透明面板</p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>Qredshift</p><p>系统监视器</p><h3 id="桌面小工具"><a href="#桌面小工具" class="headerlink" title="桌面小工具"></a>桌面小工具</h3><p><strong>桌面大致模样：</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/gdfs.jpg" alt="MintLinux"></p><h2 id="Linux系统卸载"><a href="#Linux系统卸载" class="headerlink" title="Linux系统卸载"></a>Linux系统卸载</h2><p>在win10+linux双系统的环境下，如果要卸载linux系统，采用以下方式：</p><ol><li>进入win10系统，磁盘管理中直接清空linux的/分区和/home对应的磁盘分区</li><li>如果安装linux系统时新建了linux的efi分区，在win10的磁盘管理工具中是删除不了的，推荐使用Genuis这款windows下的第三方磁盘管理软件来清除efi分区。</li><li>如果安装linux系统时将linux的efi分区和win10的efi放在了一起，那么需要进行如下操作：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以管理员身份进入PowerShell</span></span><br><span class="line">diskpart <span class="comment">#进入diskpart</span></span><br><span class="line">list disk <span class="comment">#列出所有磁盘</span></span><br><span class="line">select disk 0 <span class="comment">#根据自己的情况选择efi分区对应的磁盘</span></span><br><span class="line">list partition <span class="comment">#列出该磁盘所有分区</span></span><br><span class="line">select partition 1 <span class="comment">#根据自己的情况选择efi分区对应的分区</span></span><br><span class="line">assign letter=p: <span class="comment">#为所选分区分配盘符p</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出diskpart</span></span><br><span class="line"></span><br><span class="line">p: <span class="comment">#进入p盘</span></span><br><span class="line"><span class="built_in">cd</span> efi <span class="comment">#进入efi文件夹，然后根据自己的情况删除相应的文件夹</span></span><br></pre></td></tr></table></figure><ol start="4"><li>但是这个时候bios中还是有ubuntu的选项，可以通过easyUEFI或者Bootice来删除</li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧手机搭建linux服务器</title>
      <link href="/2021/02/19/%E6%97%A7%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/02/19/%E6%97%A7%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="硬件-amp-软件准备："><a href="#硬件-amp-软件准备：" class="headerlink" title="硬件&amp;软件准备："></a>硬件&amp;软件准备：</h3><p><strong>硬件：</strong></p><ul><li>一台已root的安卓手机</li></ul><p><strong>软件：</strong></p><ul><li>Linux Deploy：<code>https://github.com/meefik/linuxdeploy/releases</code></li><li>busyBox：<code>https://github.com/meefik/busybox/releases</code></li></ul><h3 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h3><ol><li>点开busyBox直接安装，记住安装地址</li><li>点开linux deploy，点击左上角三条杠，修改系统名字，然后进入设置，自己根据需要开关选项</li><li>在PATH环境变量里写上busyBox的安装路径</li><li>点击右下角的属性按钮，根据需要安装linux发行版</li><li>我选的是ubuntu，考虑到国内网络环境，将源地址改为<code>http://mirrors.ustc.edu.cn/ubuntu-ports/</code></li><li>在镜像大小里最好分多点空间，默认只有2G，如果有外置sd卡最好把镜像地址改为sd卡的地址，这样能自行分区更合理。</li><li>修改初始用户的username和password，本地化选择语言，推荐英文</li><li>初始化，挂载，SSH，声音服务 推荐都弄上</li><li>返回主界面，点击右上角三个点开始安装，等待一会儿，直到出现deploy字样，说明安装成功</li><li>此时先点击停止，在点击启动，就可以根据局域网ip通过ssh来远程连接安卓上linux容器了。</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>做一些配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">apt install gcc g++ vim git openjdk-8-jdk net-tools bash-completion htop</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinuxDeploy下ping命令无法运行，提示socket：权限不足，原来android里将一些硬件使用（包括网络）的权限归到不同的用户组. 　而3003就是关于网络权限的组，称为inet. 上述命令是在debian的用户权限系统中给root 添加inte权限．</span></span><br><span class="line">usermod -G 3003 root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改root的密码</span></span><br><span class="line">su - root</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="安装samba服务"><a href="#安装samba服务" class="headerlink" title="安装samba服务"></a>安装samba服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装samba</span></span><br><span class="line">apt install samba samba-common</span><br><span class="line"><span class="comment">#选定需要共享的文件夹</span></span><br><span class="line">mkdir XXX</span><br><span class="line"><span class="comment">#设置文件夹权限</span></span><br><span class="line">chmod 777 XXX</span><br><span class="line"><span class="comment">#设置samba用户密码</span></span><br><span class="line">useradd smbUser</span><br><span class="line">smbpasswd -a smbUser</span><br><span class="line">smbpasswd -xx smbUser</span><br><span class="line"><span class="comment">#配置samba的配置文件</span></span><br><span class="line">vim /etc/samba/smb.conf</span><br><span class="line">[share]</span><br><span class="line">comment = share folder</span><br><span class="line">browseable = yes</span><br><span class="line">path = XXX</span><br><span class="line">create mask = 0700</span><br><span class="line">directory mask = 0700</span><br><span class="line">valid users = smbUser</span><br><span class="line">force user = smbUser</span><br><span class="line">force group = smbUser</span><br><span class="line">public = yes</span><br><span class="line">available = yes</span><br><span class="line">writable = yes</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">service smbd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试了这种通过smb协议实现局域网共享文件的方式，能实现。但是不知道为什么不能共享挂载到安卓的目录，所以有了下面的方案。</p><h3 id="File-Brower"><a href="#File-Brower" class="headerlink" title="File Brower"></a>File Brower</h3><ol><li><p>可以采用网盘实现方式，有很多相似的产品：OwnCloud，NextCloud，Seafile都可以，但是这些都有需要依赖的环境，部署相对麻烦，我选择了一个只需简单配置就能使用的私人网盘：File Brower</p><p>File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。它除了可以让你进行文件管理之外，还有一些其他的功能。它支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限。它还支持文件分享，就行网盘那样，你可以通过它来向你的朋友分享文件。你还可以用它来执行一些 Linux 命令，比如你想要在当前目录下克隆一个代码库，就可以用它来执行<code>git</code>等命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装(之前可能需要配置hosts)</span></span><br><span class="line">curl -fsSL https://filebrowser.xyz/get.sh | bash</span><br><span class="line"><span class="comment">#创建配置数据库</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config init</span><br><span class="line"><span class="comment">#设置监听地址</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --address 0.0.0.0</span><br><span class="line"><span class="comment">#设置监听端口</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --port 8888</span><br><span class="line"><span class="comment">#设置语言环境</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --locale zh-cn</span><br><span class="line"><span class="comment">#设置日志位置</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --<span class="built_in">log</span> /var/<span class="built_in">log</span>/filebrowser.log</span><br><span class="line"><span class="comment">#添加一个用户（已有一个默认的admin:admin用户）</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db users add username password --perm.admin</span><br><span class="line"><span class="comment">#启动服务 &amp; 设置别名简化启动</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db</span><br><span class="line">vim ~/./bashrc</span><br><span class="line"><span class="built_in">alias</span> runnas=<span class="string">&quot;filebrowser -d /etc/filebrowser.db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#支持Https(其中example.com.crt和example.com.key分别是 SSL 证书和**路径，根据自身情况进行更改。配置完 SSL 后，只可以使用 HTTPS 访问，不可以使用 HTTP)</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --cert example.com.crt --key example.com.key</span><br><span class="line"><span class="comment">#取消 SSL</span></span><br><span class="line">filebrowser -d /etc/filebrowser.db config <span class="built_in">set</span> --cert <span class="string">&quot;&quot;</span> --key <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>开机自启 &amp; 后台运行问题<br>两种方法：nohup和systemd</p><ul><li><p>第一种</p><ol><li><p>运行：<code>nohup filebrowser -d /etc/filebrowser.db &gt;/dev/null 2&gt;&amp;1 &amp;</code></p></li><li><p>停止运行：<code>kill -9 $(pidof filebrowser)</code></p></li><li><p>开机启动：<code>sed -i &#39;/exit 0/i\nohup filebrowser -d \/etc\/filebrowser.db &gt;\/dev\/null 2&gt;&amp;1 &amp;&#39; /etc/rc.local</code></p></li><li><p>取消开机启动：<code>sed -i &#39;/nohup filebrowser -d \/etc\/filebrowser.db &gt;\/dev\/null 2&gt;&amp;1 &amp;/d&#39; /etc/rc.local</code></p></li></ol></li><li><p>第二种</p><ol><li>操作百度</li><li>运行：systemctl start filebrowser.service</li><li>停止运行：systemctl stop filebrowser.service</li><li>开机启动：systemctl enable filebrowser.service</li><li>取消开机启动：systemctl disable filebrowser.service</li><li>查看运行状态：systemctl status filebrowser.service</li></ol></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 分享 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2021/02/18/JDBC/"/>
      <url>/2021/02/18/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="JDBC本质："><a href="#JDBC本质：" class="headerlink" title="JDBC本质："></a>JDBC本质：</h3><p>其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</li><li>右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入驱动jar包</span></span><br><span class="line"><span class="comment">//2.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//3.获取数据库连接对象</span></span><br><span class="line"><span class="comment">//如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db3&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//4.定义sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;update account set balance = 500 where id = 1&quot;</span>;</span><br><span class="line"><span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line"><span class="comment">//prepareStatement(String sql)解决sql注入问题</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//6.执行sql</span></span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//7.处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//8.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h3 id="几个重要对象"><a href="#几个重要对象" class="headerlink" title="几个重要对象"></a>几个重要对象</h3><ol><li><p><strong>DriverManager</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</span></span><br><span class="line"><span class="comment">//mysql5之后的驱动jar包可以省略注册驱动的步骤。</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Connection</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Statement <span class="title">createStatement</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事务管理</span></span><br><span class="line"><span class="comment">//开启事务:调用该方法设置参数为false，即开启事务</span></span><br><span class="line">setAutoCommit(<span class="keyword">boolean</span> autoCommit);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">commit();</span><br><span class="line"><span class="comment">//回滚事务</span></span><br><span class="line">rollback();</span><br></pre></td></tr></table></figure></li><li><p><strong>Statement</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以执行任意的sql</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句</span></span><br><span class="line"><span class="comment">//返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行DQL（select)语句</span></span><br><span class="line"><span class="function">ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>Resultment</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getXxx(参数):获取数据</span></span><br><span class="line"><span class="comment">//Xxx：代表数据类型   如： int getInt() ,String getString()</span></span><br><span class="line"><span class="comment">//参数：</span></span><br><span class="line"><span class="comment">//1. int：代表列的编号,从1开始   如： getString(1)</span></span><br><span class="line"><span class="comment">//2. String：代表列名称。 如： getDouble(&quot;balance&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="comment">//循环判断游标是否是最后一行末尾。</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="comment">//6.2 获取数据</span></span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="keyword">double</span> balance = rs.getDouble(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(id + <span class="string">&quot;---&quot;</span> + name + <span class="string">&quot;---&quot;</span> + balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>PreparedStatement</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</span></span><br><span class="line"><span class="comment">//输入用户随便，输入密码：a&#x27; or &#x27;a&#x27; = &#x27;a</span></span><br><span class="line">select * from user where username = <span class="string">&#x27;fhdsjkf&#x27;</span> and password = <span class="string">&#x27;a&#x27;</span> or <span class="string">&#x27;a&#x27;</span> = <span class="string">&#x27;a&#x27;</span> </span><br></pre></td></tr></table></figure></li></ol><h3 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res  = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            System.out.println(path);<span class="comment">///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">            <span class="comment">// pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p><strong>概念：</strong>其实就是一个容器(集合)，存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre><code> 1. 标准接口：`DataSource   javax.sql`包下的   * 获取连接：`getConnection()`   * 归还连接：`Connection.close()`。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</code></pre><ol start="2"><li>一般我们不去实现它，有数据库厂商来实现<ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C3P0</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</span></span><br><span class="line"><span class="comment">* 不要忘记导入数据库驱动jar包</span></span><br><span class="line"><span class="comment">2. 定义配置文件：</span></span><br><span class="line"><span class="comment">* 名称： c3p0.properties 或者 c3p0-config.xml</span></span><br><span class="line"><span class="comment">jdbc.driver=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">jdbc.url=jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line"><span class="comment">jdbc.username=root</span></span><br><span class="line"><span class="comment">jdbc.password=root</span></span><br><span class="line"><span class="comment">* 路径：直接将文件放在src目录下即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 创建核心对象 数据库连接池对象 ComboPooledDataSource</span></span><br><span class="line"><span class="comment">4. 获取连接： getConnection</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line">DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2. 获取连接对象</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Druid</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 导入jar包 druid-1.0.9.jar</span></span><br><span class="line"><span class="comment">2. 定义配置文件：</span></span><br><span class="line"><span class="comment">* 是properties形式的</span></span><br><span class="line"><span class="comment">* 可以叫任意名称，可以放在任意目录下</span></span><br><span class="line"><span class="comment">3. 加载配置文件。Properties</span></span><br><span class="line"><span class="comment">4. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</span></span><br><span class="line"><span class="comment">5. 获取连接：getConnection</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">//3.加载配置文件</span></span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//4.获取连接池对象</span></span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//5.获取连接</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><ul><li>Spring框架对JDBC的简单封装为Spring JDBC。提供了一个JDBCTemplate对象简化JDBC的开发</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p></li></ol><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul><ol start="3"><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li><p>**update():**执行DML语句。增、删、改语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//2. 定义sql</span></span><br><span class="line">    String sql = <span class="string">&quot;update emp set salary = 10000 where id = 1001&quot;</span>;</span><br><span class="line">    <span class="comment">//3. 执行sql</span></span><br><span class="line">    <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2. 添加一条记录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;delete from emp where id = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**queryForMap():**查询结果将结果集封装为map集合，将列名作key，将值作为value 将这条记录封装为一个map集合</p><ul><li>注意：这个方法查询的结果集长度只能是1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">* 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from emp where id = ? or id = ?&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**queryForList():**查询结果将结果集封装为list集合</p><ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">        System.out.println(stringObjectMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**query():**查询结果，将结果封装为JavaBean对象</p><ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">    <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>queryForObject：</strong>查询结果，将结果封装为一个对象</p><ul><li>一般用于聚合函数的查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 7. 查询总记录数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select count(id) from emp&quot;</span>;</span><br><span class="line">    Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">    System.out.println(total);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩儿转MySQL</title>
      <link href="/2021/02/11/%E7%8E%A9%E5%84%BF%E8%BD%ACMySQL/"/>
      <url>/2021/02/11/%E7%8E%A9%E5%84%BF%E8%BD%ACMySQL/</url>
      
        <content type="html"><![CDATA[<p>数据库的特点：</p><ol><li>持久化存储数据，数据库就是一个文件系统</li><li>方便存储并管理数据</li><li>提供了方式统一操作数据</li></ol><p>常见的数据库软件：</p><ul><li>数据库软件是对数据库的不同实现</li><li>常见的有：<ol><li>Oracle</li><li>MySQL</li><li>Microsoft SQL Server</li><li>DB2</li><li>MongoDB</li><li>SQLite</li><li>Redis</li></ol></li></ul><h2 id="MySQL准备"><a href="#MySQL准备" class="headerlink" title="MySQL准备"></a>MySQL准备</h2><h3 id="安装：推荐5-7版本"><a href="#安装：推荐5-7版本" class="headerlink" title="安装：推荐5.7版本"></a>安装：推荐5.7版本</h3><ul><li><p>Windows直接官网下载安装包，然后根据提示选择并下一步，如果要删除除了在控制面板卸载，还需要在C盘的ProgramData的目录下的mysql目录卸载</p></li><li><p>Linux下的安装/卸载参考博客另一篇博文《我的linux工作平台搭建》</p></li></ul><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地启动</span></span><br><span class="line">mysql -uroot -proot</span><br><span class="line"><span class="comment">#远程连接</span></span><br><span class="line">mysql -h127.0.0.1 -uroot -proot</span><br><span class="line"><span class="comment">#详细写</span></span><br><span class="line">mysql --host=127.0.0.1 --user=root --password=root</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="built_in">exit</span> or quit</span><br></pre></td></tr></table></figure><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><ul><li><strong>SQL：</strong>Structured Qurey Language，结构化查询语言实际上就是定义了操作所有关系型数据库的规则</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- SQL语句注意事项：</span><br><span class="line"># SQL语句特有的注释</span><br><span class="line">/**</span><br><span class="line">SQL语句可以单行或者多行书写，以分号结尾</span><br><span class="line">SQL语句不区分大小写，关键字建议使用大写</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">-- 查看该操作系统下的mysql各文件的存储位置</span><br><span class="line">show variables like &#x27;%dir%&#x27;;</span><br><span class="line">-- 查看该操作系统下的编码情况</span><br><span class="line">show variables like &#x27;%character%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h3><h4 id="DDL（操作数据库、表）"><a href="#DDL（操作数据库、表）" class="headerlink" title="DDL（操作数据库、表）"></a>DDL（操作数据库、表）</h4><ul><li>数据定义语言</li><li>drop，create，alter</li></ul><p><strong>Create</strong></p><p>数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists db1;</span><br><span class="line">create database db2 character set gbk;</span><br></pre></td></tr></table></figure><p>数据库类型：</p><ol><li>int(位数)：整数类型</li><li>double(位数)：小数类型</li><li>date：日期（yyyy-MM-dd）</li><li>datetime：日期（yyyy-MM-dd HH:mm:ss）</li><li>timestamp：时间戳类型，默认是当前系统的时间</li><li>varchar(位数)：字符串类型</li></ol><p>表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table 表名&#123;</span><br><span class="line">列名1 数据类型1,</span><br><span class="line">列名2 数据类型2,</span><br><span class="line">......</span><br><span class="line">列名n 数据类型n</span><br><span class="line">&#125;</span><br><span class="line"># 复制表</span><br><span class="line">create table 表名1 like 表名2;</span><br></pre></td></tr></table></figure><p><strong>Retrieve</strong></p><p>数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询mysql目前所有数据库</span><br><span class="line">show databases;</span><br><span class="line"># 查看数据库字符集</span><br><span class="line">show create database mysql;</span><br></pre></td></tr></table></figure><p>表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前数据库中所有表</span><br><span class="line">show tables;</span><br><span class="line"># 查询表结构</span><br><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><p><strong>Update</strong></p><p>数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改数据库字符集</span><br><span class="line">alter database db2 character set utf8;</span><br></pre></td></tr></table></figure><p>表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 修改表名 </span><br><span class="line">alter table 表名 rename to 新表名;</span><br><span class="line"># 修改字符集</span><br><span class="line">show create table 表名;</span><br><span class="line">alter table 表名 character set utf8;</span><br><span class="line"># 添加一列</span><br><span class="line">alter table 表名 add 列名 数据类型;</span><br><span class="line"># 修改列名 类型</span><br><span class="line">alter table 表名 change 列名 新列名 数据类型;#列名数据类型一起改</span><br><span class="line">alter table 表名 modify 列名 数据类型;#只改类型</span><br><span class="line"># 删除列</span><br><span class="line">alter table 表名 drop 列名;</span><br></pre></td></tr></table></figure><p><strong>Delete</strong></p><p>数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists db2 ;</span><br></pre></td></tr></table></figure><p>表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br><span class="line">drop table if exists 表名;</span><br></pre></td></tr></table></figure><p><strong>使用数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前正在使用您的数据库</span><br><span class="line">select database();</span><br><span class="line"># 使用数据库</span><br><span class="line">use db1;</span><br></pre></td></tr></table></figure><h4 id="DML（增删改表中的数据）"><a href="#DML（增删改表中的数据）" class="headerlink" title="DML（增删改表中的数据）"></a>DML（增删改表中的数据）</h4><ul><li>数据操作语言</li><li>insert，delete，update</li></ul><p><strong>基础查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select [distintct结果去重]</span><br><span class="line">字段列表[可四则运算，如果有null则结果都为null，用IFNULL解决]</span><br><span class="line">[as 别名]</span><br><span class="line">from </span><br><span class="line">表名列表</span><br><span class="line">where</span><br><span class="line">条件列表[比较运算符，and or，between and，in(x,x...)]</span><br><span class="line">[null只能用is null来判断]</span><br><span class="line">[like 占位符：_，%]</span><br><span class="line">group by</span><br><span class="line">分组字段</span><br><span class="line">having</span><br><span class="line">分组后条件</span><br><span class="line">order by</span><br><span class="line">排序字段 ASC/DESC</span><br><span class="line">limit</span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><p><strong>add</strong></p><ul><li>如果不写表名，表示所有字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(列名1,列名2...列名n) values(值1,值2...值n);</span><br><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure><p><strong>delete</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete form 表名 where 条件;</span><br><span class="line"># 删除所有记录</span><br><span class="line">delete from 表名; #多少记录删除多少下</span><br><span class="line">truncate table 表名; #先删除表，然后创建一张一样的表，效率更高</span><br></pre></td></tr></table></figure><p><strong>modify</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名1=值1,列名2=值2 where 条件;</span><br></pre></td></tr></table></figure><h4 id="DQL（查询表中的数据）"><a href="#DQL（查询表中的数据）" class="headerlink" title="DQL（查询表中的数据）"></a>DQL（查询表中的数据）</h4><ul><li>数据查询语言</li><li>select，where</li></ul><p><strong>排序查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 order by 排序字段1 DESC,排序字段2 ASC;</span><br></pre></td></tr></table></figure><p><strong>聚合函数</strong></p><ul><li>将一列数据作为一个整体进行纵向计算</li><li>count，max，min，sum，avg</li><li>聚合函数的计算会排除null值<ol><li>解决方案1：选择非空列（主键 or *）</li><li>解决方案2：IFNULL函数</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(列名) from 表名;</span><br></pre></td></tr></table></figure><p><strong>分组查询</strong></p><ul><li>查询显示列只能是当前分组字段 或者 纵向处理后的聚合函数</li><li>where是分组之前的条件限制，having是分组之后的条件限制</li><li>where后筛选出条目—&gt;group分组—&gt;having分组后筛选</li><li>where后不能跟聚合函数，having后可以跟聚合函数，因为聚合函数是对where后的结果进行计算的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 分组字段/聚合函数 from 表名 where 条件 group by 分组字段 having 条件;</span><br></pre></td></tr></table></figure><p><strong>分页查询</strong></p><ul><li>当前索引 = (当前页码 - 1) * 每页条数</li><li>limit语句是mysql的“方言”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名 from 表名 limit 开始的索引,每页查询的条数;</span><br></pre></td></tr></table></figure><h4 id="DCL（授权）"><a href="#DCL（授权）" class="headerlink" title="DCL（授权）"></a>DCL（授权）</h4><ul><li>数据控制语言</li><li>GRANT，REVOKE</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line"></span><br><span class="line"># 删除用户</span><br><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br><span class="line"># 修改用户</span><br><span class="line">UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span><br><span class="line">SET PASSWORD FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; = PASSWORD(&#x27;新密码&#x27;);</span><br><span class="line"></span><br><span class="line"># 查询用户</span><br><span class="line">-- 1. 切换到mysql数据库</span><br><span class="line">USE myql;</span><br><span class="line">-- 2. 查询user表</span><br><span class="line">SELECT * FROM USER;</span><br><span class="line"></span><br><span class="line"># 忘记root密码？</span><br><span class="line">1. 停止mysql服务</span><br><span class="line">2. 使用无验证方式启动mysql服务：</span><br><span class="line">mysqld --skip-grant-tables</span><br><span class="line">3. 直接输入:use mysql</span><br><span class="line">4. update user set password = password(&#x27;你的新密码&#x27;) where user = &#x27;root&#x27;;</span><br><span class="line">5. 结束mysqld进程</span><br><span class="line">6. 使用新密码登录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 查询权限：</span><br><span class="line">-- 查询权限</span><br><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br><span class="line">2. 授予权限：</span><br><span class="line">-- 授予权限</span><br><span class="line">grant 权限列表 on 数据库名.表名 to &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line">-- 给张三用户授予所有权限，在任意数据库任意表上</span><br><span class="line">GRANT ALL ON *.* TO &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line">3. 撤销权限：</span><br><span class="line">-- 撤销权限：</span><br><span class="line">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line">REVOKE UPDATE ON db3.`account` FROM &#x27;lisi&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>对表中的数据进行限定，保证数据的正确性，有效性和完整性</li><li>mysql中约束分类：<ol><li>主键约束：primary key<ul><li>主键：非空 且 唯一</li><li>一张表只能有一个字段是主键</li><li>主键是表中每条记录的唯一标识</li><li>自增长：如果某一列是数值类型，使用auto_increment可以来完成自动增长，一般配合主键一起使用</li></ul></li><li>非空约束：not null</li><li>唯一约束：unique<ul><li>mysql中多个null不算重复</li></ul></li><li>外键约束：foreign key<ul><li>如果关系模式R1中的某属性集不是自己的主键，而是关系模式R2的主键，则该属性集称为是关系模式R1的外键</li></ul></li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 1. 主键约束：primary key</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key auto_increment;</span><br><span class="line">name vachar(30);</span><br><span class="line">);</span><br><span class="line">alter table stu drop primary key;#删主键约束</span><br><span class="line">alter table stu modify id int;#删自动增长（删不掉主键）</span><br><span class="line">alter table stu modify name varchar(30) primay key auto_increment#添加主键约束 &amp; 自动增长</span><br><span class="line"></span><br><span class="line"># 2. 非空约束：not null</span><br><span class="line">create table stu(</span><br><span class="line">id int;</span><br><span class="line">name vachar(30) not null;</span><br><span class="line">);</span><br><span class="line">alter table stu modify id varchar(30);#删非空约束</span><br><span class="line">alter table stu modify id varchar(30) not null;#添加非空约束</span><br><span class="line"></span><br><span class="line"># 3. 唯一约束：unique</span><br><span class="line">create table stu(</span><br><span class="line">id int unique;</span><br><span class="line">name vachar(30);</span><br><span class="line">);</span><br><span class="line">alter table stu drop index id;#删唯一约束</span><br><span class="line">alter table stu modify id int unique;#添加唯一约束</span><br><span class="line"></span><br><span class="line"># 4. 外键约束：foreign key</span><br><span class="line">create table 表名(</span><br><span class="line">    ....</span><br><span class="line">    外键列</span><br><span class="line">    constraint 外键名称 foreign key (外键列名称) references 主表名称(主表唯一约束列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称; #删除外键</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称); #添加外键</span><br><span class="line"># 外键级联操作（谨慎使用）</span><br><span class="line">1. 级联更新：ON UPDATE CASCADE</span><br><span class="line">2. 级联删除：ON DELETE CASCADE</span><br></pre></td></tr></table></figure><h2 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul><li>人和身份证</li><li>可以在任意一方添加外键指向另一方的主键，然后将外键设置为unique</li></ul><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><ul><li>部门和员工</li><li>在多的一方建立外键，指向一的一方的主键</li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ul><li>学生和课程</li><li>需要借助第三张中间表，中间表中的两个字段作为中间表两个外键，分别指向两个表的主键</li></ul><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul><li><p>设计关系型数据库时需要遵循的一些规范</p></li><li><p>各种范式成递次规范，越高的范式数据库冗余越小</p></li><li><p>目前关系型数据库有6中范式：</p><ol><li><strong>第一范式（1NF）：</strong>每一列都是不可分割的原子项</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210313140809522.png" alt="image-20210313140809522"></p><ol start="2"><li><strong>第二范式（2NF）：</strong>在1NF的基础上消除了非主属性对主码的部分函数依赖</li></ol><ul><li><strong>函数依赖：</strong>通过A可以 确定唯一B，则B依赖于A</li><li><strong>完全函数依赖：</strong>如果A是一个属性组，则B的确定需要依赖于A属性组中所有属性，此时B完全依赖于A属性组</li><li><strong>部分函数依赖：</strong>B属性的确定只需要依赖于A属性组中某一些值，则B部分依赖于A属性组</li><li><strong>传递函数依赖：</strong>A—&gt;B，B—&gt;C，C传递函数依赖于A</li><li><strong>码：</strong>一个表中，如果一个属性或属性组被其他所有属性所<strong>完全依赖</strong>，则这个属性或属性组为该表的码。（也称为候选码，同一张表中可以有多个候选码）</li><li><strong>主属性：</strong>候选码中的所有属性</li><li><strong>非主属性：</strong>一张表中，除了主属性以外的其他所有属性</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210313140916162.png" alt="image-20210313140916162"></p><ol start="3"><li><strong>第三范式（3NF）：</strong>在2NF的基础上消除了传递依赖</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210313141101564.png" alt="image-20210313141101564"></p><ol start="4"><li><p>巴斯-科德范式（BCNF）：需要消除“表中的主属性部分依赖于某个候选码“这种情况，也就是<strong>主属性内部不能有部分或传递依赖</strong></p></li><li><p>第四范式（4NF）</p></li><li><p>第五范式（5NF）</p></li></ol></li></ul><h2 id="数据库备份和还原"><a href="#数据库备份和还原" class="headerlink" title="数据库备份和还原"></a>数据库备份和还原</h2><ul><li>也就是把目前的数据库所有状态写进sql文件中持久化保存</li></ul><ol><li>命令行：<ul><li>语法：<ul><li>备份：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</span><br></pre></td></tr></table></figure><ul><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行备份文件</li></ol></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 文件路径</span><br></pre></td></tr></table></figure></li></ul></li><li>图形化工具备份</li></ol><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">列名列表</span><br><span class="line">from</span><br><span class="line">表名列表</span><br><span class="line">where</span><br><span class="line">表1,表2...</span><br></pre></td></tr></table></figure><p>不同where加条件就会得到笛卡尔积，多表查询要做的就是消除笛卡尔积的无用内容</p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><h4 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br><span class="line"></span><br><span class="line">-- 查询员工表的名称，性别。部门表的名称</span><br><span class="line">SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br><span class="line"></span><br><span class="line">-- 加上别名</span><br><span class="line">SELECT </span><br><span class="line">t1.name, -- 员工表的姓名</span><br><span class="line">t1.gender,-- 员工表的性别</span><br><span class="line">t2.name -- 部门表的名称</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line">WHERE </span><br><span class="line">t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure><h4 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;</span><br><span class="line">SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><ul><li>查询的左表所有信息以及和右表的交集部分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span><br><span class="line">SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><ul><li>查询的右表所有信息以及和左表的交集部分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>查询中嵌套查询，称嵌套查询为子查询。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资最高的员工信息</span><br><span class="line">-- 1 查询最高的工资是多少 9000</span><br><span class="line">SELECT MAX(salary) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2 查询员工信息，并且工资等于9000的</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = 9000;</span><br><span class="line"></span><br><span class="line">-- 一条sql就完成这个操作。子查询</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);</span><br></pre></td></tr></table></figure><ul><li>子查询结果的几种情况：<ol><li><strong>单行单列：</strong>子查询结果可以作为条件（用比较运算符）</li><li><strong>多行单列：</strong>子查询结果可以作为集合条件（用 in）</li><li><strong>多行多列：</strong>子查询结果集可以作为一张虚拟表继续进行查询</li></ol></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务的基本介绍"><a href="#事务的基本介绍" class="headerlink" title="事务的基本介绍"></a>事务的基本介绍</h3><ul><li><p>如果一个包含多个步骤的业务操作，被食物管理，那么这些操作要么同时成功，要么同事失效</p></li><li><p>操作：</p><ol><li>开启事务：<code>start transactoin</code></li><li>回滚：<code>rollback</code></li><li>提交：<code>commit</code></li></ol></li><li><p>mysql数据库中事务默认自动提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查看默认事务提交方式</span><br><span class="line">select @@autocommit; #1自动，0手动</span><br><span class="line">set @@autocommit = 0;</span><br></pre></td></tr></table></figure></li></ul><h3 id="事务的四大特征"><a href="#事务的四大特征" class="headerlink" title="事务的四大特征"></a>事务的四大特征</h3><ol><li>原子性：不可分割最小操作单位</li><li>持久性：当事务提交或回滚后，数据库会持久化保存数据</li><li>隔离性：多个事务之间应该相互独立</li><li>一致性：事务 操作前后，数据总量保持不变</li></ol><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul><li><p>概念：多个事务之间是隔离的，相互隔离的。但是如果多个事务（线程）操作<strong>同一批数据，则会引发一些问题</strong>，设置不同的隔离级别就可以解决这些问题。</p></li><li><p><strong>脏读：</strong>读取到另一个事务没有提交的数据</p></li><li><p><strong>不可重复读（虚读）：</strong>同一个事务中，两次读到的数据不一样</p></li><li><p><strong>幻读：</strong>一个事务操作（DML）数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</p></li><li><p>4中隔离级别：级别从小到大安全性越高，效率越低</p><ol><li><p><strong>read uncommitted：</strong>读未提交</p><p>产生的问题：脏读，虚读，幻读</p></li><li><p><strong>read committed：</strong>读已提交（Oracle默认）</p><p>产生的问题：虚读，幻读</p></li><li><p><strong>repeatable read：</strong>可重复读（MySQL默认）</p><p>产生的问题：幻读</p></li><li><p><strong>Serializable：</strong>串行化</p><p>产生的问题：无</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询隔离级别</span><br><span class="line">select @@tx_isolation</span><br><span class="line">#数据库设置级别</span><br><span class="line">set global transaction isolation level 级别字符串;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>接下来是MySQL高级部分</p></blockquote><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>索引是帮助MySQL高效获取数据的数据结构</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210313203919303.png" alt="image-20210313203919303"></p><ul><li>优势：<ol><li>快速查询</li><li>降低数据排序成本，降低CPU消耗</li></ol></li><li>劣势<ol><li>索引占用磁盘控件</li><li>降低了更新表速率</li></ol></li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><ul><li>MySQL目前有以下4种索引<ol><li>BTREE索引</li><li>HASH索引</li><li>R-tree索引</li><li>Full-text索引</li></ol></li><li>MySQL默认支持的InnoDB引擎主要就是支持BTREE索引，主要也是介绍BTREE引擎</li></ul><h3 id="BTREE索引"><a href="#BTREE索引" class="headerlink" title="BTREE索引"></a>BTREE索引</h3><ul><li>MySQL中的BTREE索引默认是用的B+树</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架-Mybatis</title>
      <link href="/2021/01/22/SSM%E6%A1%86%E6%9E%B6-Mybatis/"/>
      <url>/2021/01/22/SSM%E6%A1%86%E6%9E%B6-Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="原始jdbc操作的分析"><a href="#原始jdbc操作的分析" class="headerlink" title="原始jdbc操作的分析"></a>原始jdbc操作的分析</h3><p>原始jdbc开发<strong>存在的问题</strong>如下：</p><ol><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</li><li>sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码。</li><li>查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</li></ol><p>应对上述问题给出的<strong>解决方案</strong>：</p><ol><li>使用数据库连接池初始化连接资源</li><li>将sql语句抽取到xml配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li></ol><h3 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h3><ol><li>mybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</li><li>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</li><li>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM（对象关系映射）思想解决了<strong>实体和数据库映射</strong>的问题，对jdbc 进行了封装，<strong>屏蔽了jdbc api 底层访问细节</strong>，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</li></ol><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p><strong>MyBatis开发步骤：</strong></p><ol><li>添加MyBatis的坐标</li><li>创建user数据表</li><li>编写User实体类 </li><li>编写映射文件UserMapper.xml</li><li>编写核心文件SqlMapConfig.xml</li><li>编写测试类</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;    </span><br><span class="line"><span class="keyword">private</span> String username;    </span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略get个set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>        </span></span><br><span class="line"><span class="meta"><span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span>        </span><br><span class="line">select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN“ &quot;</span>http://mybatis.org/dtd/mybatis-3-config.dtd<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;configuration&gt;    </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;environments default=&quot;</span>development<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;environment id=&quot;</span>development<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;transactionManager type=&quot;</span>JDBC<span class="meta-string">&quot;/&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;dataSource type=&quot;</span>POOLED<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;property name=&quot;</span>driver<span class="meta-string">&quot; value=&quot;</span>com.mysql.jdbc.Driver<span class="meta-string">&quot;/&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;property name=&quot;</span>url<span class="meta-string">&quot; value=&quot;</span>jdbc:mysql:///test<span class="meta-string">&quot;/&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;property name=&quot;</span>username<span class="meta-string">&quot; value=&quot;</span>root<span class="meta-string">&quot;/&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;property name=&quot;</span>password<span class="meta-string">&quot; value=&quot;</span>root<span class="meta-string">&quot;/&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;/dataSource&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;/environment&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;/environments&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;mappers&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;mapper resource=&quot;</span>com/itheima/mapper/UserMapper.xml<span class="meta-string">&quot;/&gt; </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">    &lt;/mappers&gt;</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">&lt;/configuration&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载核心配置文件</span></span><br><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获得sqlSession工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line"><span class="comment">//获得sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line">System.out.println(userList);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h2 id="Mybatis的增删改查操作"><a href="#Mybatis的增删改查操作" class="headerlink" title="Mybatis的增删改查操作"></a>Mybatis的增删改查操作</h2><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>上面那个例子就是查询操作</p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span>        </span><br><span class="line">insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)    </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> insert = sqlSession.insert(<span class="string">&quot;userMapper.add&quot;</span>, user);</span><br><span class="line">System.out.println(insert);</span><br><span class="line"><span class="comment">//提交事务（JDBC事务默认提交，Mybatis事务默认不提交）</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ol><li>插入语句使用insert标签</li><li>在映射文件中使用parameterType属性指定要插入的数据类型</li><li>Sql语句中使用#{实体属性名}方式引用实体中的属性值</li><li>插入操作使用的API是sqlSession.insert(“命名空间.id”,实体对象);</li><li>插入操作涉及数据库数据变化，所以要使用sqlSession对象显式的提交事务，即sqlSession.commit() </li></ol><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> update = sqlSession.update(<span class="string">&quot;userMapper.update&quot;</span>, user);</span><br><span class="line">System.out.println(update);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ol><li>修改语句使用update标签</li><li>修改操作使用的API是sqlSession.update(“命名空间.id”,实体对象);</li></ol><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> delete = sqlSession.delete(<span class="string">&quot;userMapper.delete&quot;</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(delete);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ol><li>删除语句使用delete标签</li><li>Sql语句中使用#{任意字符串}方式引用传递的单个参数</li><li>删除操作使用的API是sqlSession.delete(“命名空间.id”,Object);</li></ol><h2 id="Mybatis核心配置文件"><a href="#Mybatis核心配置文件" class="headerlink" title="Mybatis核心配置文件"></a>Mybatis核心配置文件</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321155721489.png" alt="image-20210321155721489" style="zoom:67%;" /><h3 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h3><p>数据库环境的配置，支持多环境配置</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321160006282.png" alt="image-20210321160006282"></p><p>其中，事务管理器（transactionManager）类型有两种：</p><ol><li><strong>JDBC：</strong>这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</li><li><strong>MANAGED：</strong>这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。</li></ol><p>其中，数据源（dataSource）类型有三种：</p><ol><li><strong>UNPOOLED：</strong>这个数据源的实现只是每次被请求时打开和关闭连接。</li><li><strong>POOLED：</strong>这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</li><li><strong>JNDI：</strong>这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</li></ol><h3 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h3><p>该标签的作用是加载映射的，加载方式有如下几种：</p><ol><li>使用相对于类路径的资源引用，例如：</li></ol><p><code>&lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</code></p><ol start="2"><li>使用完全限定资源定位符（URL），例如：</li></ol><p><code>&lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</code></p><ol start="3"><li>使用映射器接口实现类的完全限定类名，例如：</li></ol><p><code>&lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</code></p><ol start="4"><li>将包内的映射器接口实现全部注册为映射器，例如：</li></ol><p><code>&lt;package name=&quot;org.mybatis.builder&quot;/&gt;</code></p><h3 id="Properties标签"><a href="#Properties标签" class="headerlink" title="Properties标签"></a>Properties标签</h3><p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321160935425.png" alt="image-20210321160935425"></p><h3 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h3><p>类型别名是为Java 类型设置一个短的名字。原来的类型名称配置如下</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321161007745.png" alt="image-20210321161007745"></p><p>配置typeAliases，为com.itheima.domain.User定义别名为user</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321161023078.png" alt="image-20210321161023078"></p><p>上面我们是自定义的别名，mybatis框架已经为我们设置好的一些常用的类型的别名</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321161220049.png" alt="image-20210321161220049"></p><p><strong>注意：Mybatis的核心配置文件的标签是有顺序的，必须按照顺序来书写，否则将报错</strong></p><h2 id="Mybatis相应API"><a href="#Mybatis相应API" class="headerlink" title="Mybatis相应API"></a>Mybatis相应API</h2><h3 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h3><p>常用API：SqlSessionFactory  build(InputStream inputStream)</p><p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/builder/mybatis-config.xml&quot;</span>; </span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder(); </span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);</span><br></pre></td></tr></table></figure><p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。</p><h3 id="SqlSession工厂对象SqlSessionFactory"><a href="#SqlSession工厂对象SqlSessionFactory" class="headerlink" title="SqlSession工厂对象SqlSessionFactory"></a>SqlSession工厂对象SqlSessionFactory</h3><p>SqlSessionFactory 有多个个方法创建SqlSession 实例。常用的有如下两个：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321162020518.png" alt="image-20210321162020518"></p><h3 id="SqlSession会话对象"><a href="#SqlSession会话对象" class="headerlink" title="SqlSession会话对象"></a>SqlSession会话对象</h3><p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。</p><p>执行语句的方法主要有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function">&lt;E&gt; List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>操作事务的方法主要有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure><h2 id="Mybatis的Dao层实现"><a href="#Mybatis的Dao层实现" class="headerlink" title="Mybatis的Dao层实现"></a>Mybatis的Dao层实现</h2><h3 id="传统方式实现"><a href="#传统方式实现" class="headerlink" title="传统方式实现"></a>传统方式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTraditionDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    List&lt;User&gt; all = userDao.findAll();</span><br><span class="line">    System.out.println(all);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口代理方式实现"><a href="#接口代理方式实现" class="headerlink" title="接口代理方式实现"></a>接口代理方式实现</h3><p><strong>代理开发方式介绍</strong></p><p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流。</p><p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义<strong>创建接口的动态代理对象</strong>，代理对象的方法体同上边Dao接口实现类方法。</p><p><strong>Mapper 接口开发需要遵循以下规范：</strong></p><ol><li>Mapper.xml文件中的namespace与mapper接口的全限定名相同</li><li>Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol><p><strong>编写UserMapper接口</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321193412070.png" alt="image-20210321193412070"></p><p><strong>测试代理方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProxyDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis映射文件深入"><a href="#Mybatis映射文件深入" class="headerlink" title="Mybatis映射文件深入"></a>Mybatis映射文件深入</h2><h3 id="动态sql语句"><a href="#动态sql语句" class="headerlink" title="动态sql语句"></a>动态sql语句</h3><p><strong>动态sql语句概述</strong></p><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL是动态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。</p><p><strong>动态 SQL  之<code>&lt;if&gt;</code></strong> </p><p>我们根据实体类的不同取值，使用不同的 SQL语句来进行查询。比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当查询条件id和username都存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User condition = <span class="keyword">new</span> User();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line">condition.setUsername(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">User user = userMapper.findByCondition(condition);</span><br></pre></td></tr></table></figure><p>当查询条件只有id存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User condition = <span class="keyword">new</span> User();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line">User user = userMapper.findByCondition(condition);</span><br></pre></td></tr></table></figure><p><strong>动态 SQL  之<code>&lt;foreach&gt;</code></strong></p><p>循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">int</span>[] ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">List&lt;User&gt; userList = userMapper.findByIds(ids);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><p>foreach标签的属性含义如下：</p><p><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：</p><ol><li>collection：代表要遍历的集合元素，注意编写时不要写#{}</li><li>open：代表语句的开始部分</li><li>close：代表结束部分</li><li>item：代表遍历集合的每个元素，生成的变量名</li><li>sperator：代表分隔符</li></ol><h3 id="SQL片段抽取"><a href="#SQL片段抽取" class="headerlink" title="SQL片段抽取"></a>SQL片段抽取</h3><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取sql片段简化编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span>select * from User<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis核心配置文件深入"><a href="#Mybatis核心配置文件深入" class="headerlink" title="Mybatis核心配置文件深入"></a>Mybatis核心配置文件深入</h2><h3 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h3><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器（截取部分）。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321170520947.png" alt="image-20210321170520947"></p><p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个JDBC类型。例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一个1970年至今的毫秒数，取出来时转换成java的Date，即java的Date与数据库的varchar毫秒值之间转换。</p><p>开发步骤：</p><ol><li>定义转换类继承类<code>BaseTypeHandler&lt;T&gt;</code></li><li>覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult为查询时 mysql的字符串类型转换成 java的Type类型的方法</li><li>在MyBatis核心配置文件中进行注册</li></ol><p>测试转换是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType type)</span> </span>&#123;</span><br><span class="line">        preparedStatement.setString(i,date.getTime()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(resultSet.getLong(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(resultSet.getLong(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callableStatement.getDate(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.itheima.typeHandlers.MyDateTypeHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试添加操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">userMapper.add2(user);</span><br></pre></td></tr></table></figure><h4 id="Java数据类型和MySql数据类型对应表"><a href="#Java数据类型和MySql数据类型对应表" class="headerlink" title="Java数据类型和MySql数据类型对应表"></a>Java数据类型和MySql数据类型对应表</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20180102140923442" alt="这里写图片描述"></p><h3 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h3><p>MyBatis可以使用<strong>第三方的插件来对功能进行扩展</strong>，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</p><p>开发步骤：</p><ol><li>导入通用PageHelper的坐标</li><li>在mybatis核心配置文件中配置PageHelper插件</li><li>测试分页数据获取</li></ol><p><strong>导入通用PageHelper坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在mybatis核心配置文件中配置PageHelper插件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：分页助手的插件  配置在通用馆mapper之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试分页代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper2.select(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获得分页相关的其他参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他分页的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(userList);</span><br><span class="line">System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;上一页:&quot;</span>+pageInfo.getPrePage());</span><br><span class="line">System.out.println(<span class="string">&quot;上一页:&quot;</span>+pageInfo.getNextPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否最后一页：&quot;</span>+pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure><h2 id="Mybatis多表操作"><a href="#Mybatis多表操作" class="headerlink" title="Mybatis多表操作"></a>Mybatis多表操作</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p><strong>一对一</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321184552993.png" alt="image-20210321184552993"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321184610801.png" alt="image-20210321184610801"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">    select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一对多</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321190045301.png" alt="image-20210321190045301"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321190058689.png" alt="image-20210321190058689"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321190140515.png" alt="image-20210321190140515"></p><p><strong>多对多</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321190302450.png" alt="image-20210321190302450"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321190310051.png" alt="image-20210321190310051"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321190446678.png" alt="image-20210321190446678"></p><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper<br>映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p><ol><li>@Insert：实现新增</li><li>@Update：实现更新</li><li>@Delete：实现删除</li><li>@Select：实现查询</li><li>@Result：实现结果集封装</li><li>@Results：可以与@Result 一起使用，封装多个结果集</li><li>@One：实现一对一结果集封装</li><li>@Many：实现一对多结果集封装</li></ol><h4 id="基础增删改查"><a href="#基础增删改查" class="headerlink" title="基础增删改查"></a>基础增删改查</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="复杂关系查询"><a href="#复杂关系查询" class="headerlink" title="复杂关系查询"></a>复杂关系查询</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321195005295.png" alt="image-20210321195005295"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321195021427.png" alt="image-20210321195021427"></p><p><strong>一对一</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321195154358.png" alt="image-20210321195154358"></p><p><strong>一对多</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321195240470.png" alt="image-20210321195240470"></p><p><strong>多对多</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210321195312897.png" alt="image-20210321195312897"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架-SpringMVC</title>
      <link href="/2021/01/21/SSM%E6%A1%86%E6%9E%B6-SpringMVC/"/>
      <url>/2021/01/21/SSM%E6%A1%86%E6%9E%B6-SpringMVC/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC的简介"><a href="#SpringMVC的简介" class="headerlink" title="SpringMVC的简介"></a>SpringMVC的简介</h2><h3 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h3><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 中。</p><p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求。</p><h3 id="SpringMVC快速入门"><a href="#SpringMVC快速入门" class="headerlink" title="SpringMVC快速入门"></a>SpringMVC快速入门</h3><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210320084642972.png" alt="image-20210320084642972"></p><p><strong>开发步骤</strong></p><ol><li>导入SpringMVC相关坐标</li><li>配置SpringMVC核心控制器DispathcerServlet</li><li>创建Controller类和视图页面</li><li>使用注解配置Controller类中业务方法的映射地址</li><li>配置SpringMVC核心文件 spring-mvc.xml</li><li>客户端发起请求测试</li></ol><p><strong>代码实现</strong></p><p>①导入Spring和SpringMVC的坐标、导入Servlet和Jsp的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Spring坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--SpringMVC坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jsp坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②在web.xml配置SpringMVC的核心控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>③创建Controller和业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickController</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">quickMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;quickMethod running.....&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③创建视图页面index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Hello SpringMVC!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>④配置注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">quickMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;quickMethod running.....&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤创建spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/mvc   </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/mvc/spring-mvc.xsd  </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑥访问测试地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/itheima_springmvc1/quick </span><br></pre></td></tr></table></figure><h2 id="SpringMVC的组件解析"><a href="#SpringMVC的组件解析" class="headerlink" title="SpringMVC的组件解析"></a>SpringMVC的组件解析</h2><h3 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210320092050800.png" alt="image-20210320092050800"></p><ol><li>用户发送请求至前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</li></ol><h3 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h3><ol><li><strong>前端控制器：DispatcherServlet</strong></li></ol><p>​    用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由</p><p>它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p><ol start="2"><li><strong>处理器映射器：HandlerMapping</strong></li></ol><p>​    HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的</p><p>映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><ol start="3"><li><strong>处理器适配器：HandlerAdapter</strong></li></ol><p>​    通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理</p><p>器进行执行。</p><ol start="4"><li><strong>处理器：Handler</strong></li></ol><p>​    它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由</p><p>Handler 对具体的用户请求进行处理。</p><ol start="5"><li><strong>视图解析器：View Resolver</strong></li></ol><p>​    View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><ol start="6"><li><strong>视图：View</strong></li></ol><p>​    SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p><h3 id="SpringMVC注解解析"><a href="#SpringMVC注解解析" class="headerlink" title="SpringMVC注解解析"></a>SpringMVC注解解析</h3><p><strong>@RequestMapping</strong></p><p>作用：用于建立请求 URL 和处理请求方法之间的对应关系</p><p><strong>位置：</strong></p><ol><li><strong>类上，</strong>请求URL 的第一级访问目录。此处不写的话，就相当于应用的根目录</li><li><strong>方法上，</strong>请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</li></ol><p><strong>属性：</strong></p><ol><li><p><strong>value：</strong>用于指定请求的URL。它和path属性的作用是一样的</p></li><li><p><strong>method：</strong>用于指定请求的方式</p></li><li><p><strong>params：</strong>用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样</p><ul><li><p>例如：</p><p>params = {“accountName”}，表示请求参数必须有accountName</p><p>params = {“moeny!100”}，表示请求参数中money不能是100</p></li></ul></li></ol><p>1.mvc命名空间引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命名空间：xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">        xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">约束地址：http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc </span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br></pre></td></tr></table></figure><p>2.组件扫描</p><p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用@Controller注解标注的话，就需要使用&lt;context:component-scan base-package=“com.itheima.controller”/&gt;进行组件扫描。</p><h3 id="SpringMVC的XML配置解析"><a href="#SpringMVC的XML配置解析" class="headerlink" title="SpringMVC的XML配置解析"></a>SpringMVC的XML配置解析</h3><p><strong>注意：SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的</strong>，该配置文件地址org/springframework/web/servlet/DispatcherServlet.properties，该文件中配置了默认的视图解析器，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br></pre></td></tr></table></figure><p>翻看该解析器源码，可以看到该解析器的默认设置，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">REDIRECT_URL_PREFIX</span> = <span class="string">&quot;redirect:&quot;  --重定向前缀</span></span><br><span class="line"><span class="attr">FORWARD_URL_PREFIX</span> = <span class="string">&quot;forward:&quot;    --转发前缀（默认值）</span></span><br><span class="line"><span class="attr">prefix</span> = <span class="string">&quot;&quot;;     --视图名称前缀</span></span><br><span class="line"><span class="attr">suffix</span> = <span class="string">&quot;&quot;;     --视图名称后缀</span></span><br></pre></td></tr></table></figure><ol><li>视图解析器</li></ol><p>我们可以通过属性注入的方式修改视图的的前后缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p><strong>SpringMVC的相关组件</strong> </p><p>前端控制器：DispatcherServlet</p><p>处理器映射器：HandlerMapping</p><p>处理器适配器：HandlerAdapter</p><p>处理器：Handler</p><p>视图解析器：View Resolver</p><p>视图：View</p><p><strong>SpringMVC的注解和配置</strong> </p><p>请求映射注解：@RequestMapping</p><p>视图解析器配置：</p><p>REDIRECT_URL_PREFIX = “redirect:”  </p><p>FORWARD_URL_PREFIX = “forward:”    </p><p>prefix = “”;     </p><p>suffix = “”;</p><h2 id="SpringMVC的请求和响应"><a href="#SpringMVC的请求和响应" class="headerlink" title="SpringMVC的请求和响应"></a>SpringMVC的请求和响应</h2><h3 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h3><p><strong>SpringMVC的数据响应-数据响应方式(理解)</strong></p><ol><li>   页面跳转</li></ol><p>直接返回字符串</p><p>通过ModelAndView对象返回</p><p>2） 回写数据 </p><p>直接返回字符串</p><p>返回对象或集合</p><p><strong>SpringMVC的数据响应-页面跳转-返回字符串形式（应用）</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/1.jpg"></p><p><strong>SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)</strong></p><p>在Controller中方法返回ModelAndView对象，并且设置视图名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Model:模型 作用封装数据</span></span><br><span class="line"><span class="comment">            View：视图 作用展示数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//设置模型数据(放进request域中)</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)</strong></p><p>n在Controller中方法形参上直接声明ModelAndView，无需在方法中自己创建，在方法中直接使用该对象设置视图，同样可以跳转页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(value=&quot;/quick3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save3</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save4</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;博学谷&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)</strong></p><p>在Controller方法的形参上可以直接使用原生的HttpServeltRequest对象，只需声明即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save5</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;酷丁鱼&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的数据响应-回写数据-直接回写字符串(应用)</strong></p><p>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”) 回写数据，此时不需要视图跳转，业务方法返回值为void</p><p>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick7&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//告知SpringMVC框架 不进行视图跳转 直接进行数据响应</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save7</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello itheima&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save6</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;hello itcast&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;zhangsan\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串，我们可以使用web阶段学习过的json转换工具jackson进行转换,通过jackson转换json格式字符串，回写字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick9&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save9</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">//使用json的转换工具将对象转换成json格式字符串在返回</span></span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = objectMapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的数据响应-回写数据-返回对象或集合(应用)</strong></p><p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick10&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//期望SpringMVC自动将User转换成json格式的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save10</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;lisi2&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的数据响应-回写数据-返回对象或集合2(应用)</strong></p><p>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p></li><li><p>使用<code>&lt;mvc:annotation-driven /&gt;</code>自动加载 RequestMappingHandlerMapping（处理映射器）和</p></li><li><p>RequestMappingHandlerAdapter（ 处 理 适 配 器 ），可用在Spring-xml.xml配置文件中使用</p></li><li><p><code>&lt;mvc:annotation-driven /&gt;</code>替代注解处理器和适配器的配置。</p></li></ul><p>同时使用<code>&lt;mvc:annotation-driven /&gt;</code><strong>默认底层就会集成jackson进行对象或集合的json格式字符串的转换</strong></p><h3 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h3><p><strong>SpringMVC的请求-获得请求参数-请求参数类型(理解)</strong></p><p>客户端请求参数的格式是：name=value&amp;name=value……</p><p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数</p><ol><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ol><p><strong>SpringMVC的请求-获得请求参数-获得基本类型参数(应用)</strong></p><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。并且能自动做类型转换；</p><p>自动的类型转换是指从String向其他类型的转换</p><p><code>http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&amp;age=12</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick11&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save11</span><span class="params">(String username,<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)</strong></p><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick12&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save12</span><span class="params">(User user)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-获得数组类型参数(应用)</strong></p><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick13&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save13</span><span class="params">(String[] strs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(Arrays.asList(strs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)</strong></p><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick14&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;%--表明是第一个User对象的username age--%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick14&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save14</span><span class="params">(VO vo)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)</strong></p><p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> userList = <span class="keyword">new</span> Array();</span><br><span class="line">    userList.push(&#123;username:<span class="string">&quot;zhangsan&quot;</span>,age:<span class="number">18</span>&#125;);</span><br><span class="line">    userList.push(&#123;username:<span class="string">&quot;lisi&quot;</span>,age:<span class="number">28</span>&#125;);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick15&quot;</span>,</span><br><span class="line">        data:JSON.stringify(userList),</span><br><span class="line">        contentType:<span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick15&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save15</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)</strong></p><p>当有静态资源需要加载时，比如jquery文件，通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是/,代表对所有的资源都进行过滤操作，我们可以通过以下两种方式指定放行静态资源：</p><p>•在spring-mvc.xml配置文件中指定放行的资源</p><p>​     <code>&lt;mvc:resources mapping=&quot;/js/**&quot;location=&quot;/js/&quot;/&gt; </code></p><p>•使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开发资源的访问--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;mvc:resources mapping=&quot;/img/**&quot; location=&quot;/img/&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)</strong></p><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局过滤的filter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中/和/<em>的区别：<br>&lt; url-pattern &gt; / &lt;/ url-pattern &gt;   不会匹配到</em>.jsp，即：*.jsp不会进入spring的 DispatcherServlet类 。<br>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配*.jsp，会出现返回jsp视图时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。 </li></ul><p><strong>SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)</strong></p><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/quick16&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick16&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save16</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;,required = false,defaultValue = &quot;itcast&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)</strong></p><p>Restful是一种<strong>软件架构风格、设计风格，而不是标准</strong>，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p><p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p><ol><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源  </li></ol><p>例如：</p><ol><li>/user/1    GET ：       得到 id = 1 的 user</li><li>/user/1   DELETE：  删除 id = 1 的 user</li><li>/user/1    PUT：       更新 id = 1 的 user</li><li>/user       POST：      新增 user</li></ol><p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成/user/{id}，占位符{id}对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作。</p><p><code>http://localhost:8080/itheima_springmvc1/quick17/zhangsan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick17/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save17</span><span class="params">(<span class="meta">@PathVariable(value=&quot;name&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-自定义类型转换器(应用)</strong></p><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</p><p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型转换器GoodsConverter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.jack1024.converter.DateConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将日期字符串转换成日期对象 返回</span></span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = format.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick18&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save18</span><span class="params">(Date date)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)</strong></p><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p><ol><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick19&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save19</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-获得请求参数-获得请求头信息(应用)</strong></p><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)</p><p>@RequestHeader注解的属性如下：</p><ol><li>value：请求头的名称</li><li>required：是否必须携带此请求头</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick20&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save20</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;User-Agent&quot;,required = false)</span> String user_agent)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(user_agent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用@CookieValue可以获得指定Cookie的值@CookieValue注解的属性如下：</p><ol><li>value：指定cookie的名称</li><li>required：是否必须携带此cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick21&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save21</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionId)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       System.out.println(jsessionId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC的特殊请求：文件上传"><a href="#SpringMVC的特殊请求：文件上传" class="headerlink" title="SpringMVC的特殊请求：文件上传"></a>SpringMVC的特殊请求：文件上传</h3><p><strong>SpringMVC的请求-文件上传-客户端表单实现(应用)</strong></p><p>文件上传客户端表单需要满足：</p><ol><li>表单项type=“file”</li><li>表单的提交方式是post  </li><li>表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick22&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    文件<span class="number">1</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-文件上传-文件上传的原理(理解)</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/5.jpg"></p><p><strong>SpringMVC的请求-文件上传-单文件上传的代码实现1(应用)</strong></p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置多媒体解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save22</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(uploadFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-文件上传-单文件上传的代码实现2(应用)</strong></p><p>完成上传文件的服务器保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save22</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="comment">//获得上传文件的名称</span></span><br><span class="line">    String originalFilename = uploadFile.getOriginalFilename();</span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalFilename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC的请求-文件上传-多文件上传的代码实现(应用)</strong></p><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick23&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    文件<span class="number">1</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    文件<span class="number">2</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick23&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save23</span><span class="params">(String username, MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">        String originalFilename = multipartFile.getOriginalFilename();</span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h2><p><strong>SpringMVC拦截器-拦截器的作用(理解)</strong></p><p>Spring MVC 的拦截器类似于 Servlet  开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</p><p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（InterceptorChain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p><p><strong>SpringMVC拦截器-interceptor和filter区别(理解，记忆)</strong></p><p>关于interceptor和filter的区别，如图所示：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/1.png"></p><p><strong>SpringMVC拦截器-快速入门(应用)</strong></p><p>自定义拦截器很简单，只有如下三步：</p><ol><li>创建拦截器类实现HandlerInterceptor接口</li><li>配置拦截器</li><li>测试拦截器的拦截效果</li></ol><p>编写拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle.....&quot;</span>);</span><br><span class="line">        retrun <span class="keyword">true</span>;<span class="comment">//true表示放行，false表示不放行</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置：在SpringMVC的配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写测试程序测试：</p><p>编写Controller,发请求到controller,跳转页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标资源执行......&quot;</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World! $&#123;name&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>SpringMVC拦截器-快速入门详解(应用)</strong></p><p>拦截器在预处理后什么情况下会执行目标资源，什么情况下不执行目标资源，以及在有多个拦截器的情况下拦截器的执行顺序是什么?</p><p>再编写一个拦截器2，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle22222.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle2222...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion2222....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>当拦截器的preHandle方法返回true则会执行目标资源，如果返回false则不执行目标资源</p><p>多个拦截器情况下，配置在前的先执行，配置在后的后执行</p><p>拦截器中的方法执行顺序是：preHandler——-目标资源—-postHandle—- afterCompletion</p><p><strong>SpringMVC拦截器-知识小结(记忆)</strong></p><p>拦截器中的方法说明如下</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/2.png"></p><p><strong>SpringMVC拦截器-用户登录权限控制分析(理解)</strong></p><p>在day06-Spring练习案例的基础之上：用户没有登录的情况下，不能对后台菜单进行访问操作，点击菜单跳转到登录页面，只有用户登录成功后才能进行后台功能的操作</p><p>需求图：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3.jpg"></p><p><strong>SpringMVC拦截器-用户登录权限控制代码实现1(应用)</strong></p><p>判断用户是否登录  本质：判断session中有没有user，如果没有登陆则先去登陆，如果已经登陆则直接放行访问目标资源</p><p>先编写拦截器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//逻辑：判断用户是否登录  本质：判断session中有没有user</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有登录</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行  访问目标资源</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后配置该拦截器：找到项目案例的spring-mvc.xml，添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置权限拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.PrivilegeInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringMVC拦截器-用户登录权限控制代码实现2(应用)</strong></p><p>在登陆页面输入用户名密码，点击登陆，通过用户名密码进行查询，如果登陆成功，则将用户信息实体存入session，然后跳转到首页，如果登陆失败则继续回到登陆页面</p><p>在UserController中编写登陆逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password,HttpSession session)</span></span>&#123;</span><br><span class="line">    User user = userService.login(username,password);</span><br><span class="line">    <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//登录成功  将user存储到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>service层代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    User user = userDao.findByUsernameAndPassword(username,password);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dao层代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dao层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> EmptyResultDataAccessException</span>&#123;</span><br><span class="line">    User user = jdbcTemplate.queryForObject(<span class="string">&quot;select * from sys_user where username=? and password=?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), username, password);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时仍然登陆不上，因为我们需要将登陆请求url让拦截器放行,添加资源排除的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置权限拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些资源排除拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/login&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.PrivilegeInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringMVC拦截器-用户登录权限控制代码实现3(应用)</strong></p><p>JdbcTemplate.queryForObject对象如果查询不到数据会抛异常，导致程序无法达到预期效果，如何来解决该问题？</p><p>在业务层处理来自dao层的异常，如果出现异常service层返回null,而不是将异常抛给controller</p><p>因此改造登陆的业务层代码,添加异常的控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        User user = userDao.findByUsernameAndPassword(username,password);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (EmptyResultDataAccessException e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><strong>异常处理的思路</strong></p><p>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p><p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210320191054456.png" alt="image-20210320191054456"></p><p><strong>异常处理两种方式</strong></p><ol><li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</li><li>实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器</li></ol><p><strong>简单异常处理器SimpleMappingExceptionResolver</strong></p><p>SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">“org.springframework.web.servlet.handler.SimpleMappingExceptionResolver”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorView&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“exceptionMappings”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;com.itheima.exception.MyException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ClassCastException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义异常处理步骤</strong></p><ol><li>创建异常处理器类实现HandlerExceptionResolver</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="params"><span class="function">        HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//处理异常的代码实现</span></span><br><span class="line">        <span class="comment">//创建ModelAndView对象</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(); </span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;exceptionPage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置异常处理器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exceptionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.exception.MyExceptionResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写异常页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">这是一个最终异常的显示页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④测试异常跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/quick22&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickMethod22</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class="line">    simpleDateFormat.parse(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架-Spring</title>
      <link href="/2021/01/20/SSM%E6%A1%86%E6%9E%B6-Spring/"/>
      <url>/2021/01/20/SSM%E6%A1%86%E6%9E%B6-Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><ul><li>Spring前身：EJB框架</li></ul><h3 id="Spring优点"><a href="#Spring优点" class="headerlink" title="Spring优点"></a>Spring优点</h3><ol><li>方便解耦，简化开发：IOC容器使对象的依赖关系由Spring控制，编程者更专注于上层的应用</li><li>AOP编程的支持：方便面向切面编程</li><li>声明式事务的控制：配置的方式简化开发</li><li>Junit：方便程序测试</li><li>方便集成各种优秀的框架：Mybatis等</li><li>降低JavaEE API的使用难度：提供了一些工具的封装类</li><li>开源：方便学习</li></ol><p><img src="https://img-blog.csdnimg.cn/2020031110534271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlbGxvX3dvcmQy,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="Spring程序大致步骤"><a href="#Spring程序大致步骤" class="headerlink" title="Spring程序大致步骤"></a>Spring程序大致步骤</h3><p><img src="http://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210312105112356.png" alt="image-20210312105112356"></p><ol><li>导入Spring开发的maven依赖</li><li>编写Dao接口和实现类</li><li>创建Spring核心配置文件applicationContext.xml</li><li>在Spring配置文件中配置实现类</li><li>使用Spring的API获得Bean实例</li></ol><h2 id="Spring核心配置文件"><a href="#Spring核心配置文件" class="headerlink" title="Spring核心配置文件"></a>Spring核心配置文件</h2><h3 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h3><ol><li><strong>id：</strong>唯一性标识，通过其获得对象</li><li><strong>class：</strong>bean的全限定名称</li><li><strong>scope：</strong>singleton(默认)，prototype等5个<ul><li>scope：bean对象在核心配置文件加载时就创建，只有一个，spring容器销毁时才会销毁bean</li><li>prototype：bean对象在每次getBean时创建一个，对象长时间不用会被GC垃圾回收机制回收</li></ul></li><li><strong>init-method：</strong>指定类中初始化方法名称，对象创建后执行</li><li><strong>destory-method：</strong>指定类中销毁方法名称，对象销毁前执行</li><li><strong>bean实例化的三种方式：</strong><ol><li>无参构造实例化：默认</li><li>工厂静态方法实例化：factory-method=“工厂方法”，class中写工厂类</li><li>工厂实例方法实例化：需要先bean一个工厂对象，然后factory-bean=“工厂实例”，factory-method=“工厂方法”</li></ol></li></ol><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul><li>依赖注入是Spring框架核心IOC的具体体现</li><li>通过控制反转，把对象的控制权交给Spring容器。IOC解耦可以降低Service业务层和Dao持久层之间的关系，此时依赖关系就由Spring来维护了，Spring容器会自己把持久层对象传入业务层。</li><li>如何把UserDao依赖注入到UserService中？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">userServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        usreDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name指的构造函数的参数名</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;userDao&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.dao.impl.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="line">&lt;constructor-arg name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">set方法</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        usreDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name指的set的方法除去set后首字母小写后的</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;userDao&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.dao.impl.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以使用p命名空间注入: xmlns=&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.service.impl.UserServiceImpl&quot;</span> p:userDao-ref=<span class="string">&quot;userDao&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>依赖注入的数据类型：<ol><li>普通数据类型</li><li>集合数据类型</li><li>引用数据类型</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//Getter &amp; Setter 省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="comment">//Setter 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;userDao&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;Sam Smith&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;26&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;value&gt;aaa&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;bbb&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;ccc&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;userMap&quot;</span>&gt;</span><br><span class="line">    &lt;map&gt;</span><br><span class="line">        &lt;entry key=<span class="string">&quot;firstUser&quot;</span> value-ref=<span class="string">&quot;user1&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;entry key=<span class="string">&quot;secondUser&quot;</span> value-ref=<span class="string">&quot;user2&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.domain.User&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Jobs&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;112233@qq.com&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;link.jack1024.domain.User&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Marks&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;445566@qq.com&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="Sprng配置文件拆解合并"><a href="#Sprng配置文件拆解合并" class="headerlink" title="Sprng配置文件拆解合并"></a>Sprng配置文件拆解合并</h3><ul><li>如果所有Spring容器的配置文件都放在applicationContext.xml核心配置文件中，那将会十分庞大，所以可以按照程序分层Controller，Service，Dao将配置文件也拆分为几个xml文件，最后在applicationContext.xml核心配置文件中import即可</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-sevice.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring相关API"><a href="#Spring相关API" class="headerlink" title="Spring相关API"></a>Spring相关API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserDao userDao1 = (UserDao) ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="ApplicationContext继承体系"><a href="#ApplicationContext继承体系" class="headerlink" title="ApplicationContext继承体系"></a>ApplicationContext继承体系</h3><ul><li>ApplicationContext的3个常用实现类<ol><li>ClassPathXmlApplicationContext：从类的根路径下加载配置文件</li><li>FileSystemXmlApplicationContext：从磁盘路径下加载配置文件</li><li>AnnotationConfigApplicationContext：当使用你注解配置容器对象时，需要使用此类创建spring容器。它用来读取注解</li></ol></li></ul><h3 id="getBean方法"><a href="#getBean方法" class="headerlink" title="getBean方法"></a>getBean方法</h3><ol><li>getBean(bean的id)：配置文件中可以有多个同类型的bean</li><li>getBean(bean对应类.class)：配置文件中一个类型只能有一个bean，否则无法识别</li></ol><h2 id="Spring配置数据源（连接池）"><a href="#Spring配置数据源（连接池）" class="headerlink" title="Spring配置数据源（连接池）"></a>Spring配置数据源（连接池）</h2><p><strong>常见数据源：</strong>DBCP，C3P0，BnoeCP，Druid</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>之前创建数据库连接池都是通过代码手动创建的，通过Spring完全可以将数据库连接池的控制反转给Spring容器，将数据库信息注入给数据库连接池对象。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">DataSource dataSource = (DataSource) applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">Connection connection = dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续解耦，把数据库信息解到properties文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">applicationContext.xml加载jdbc.properties配置文件获得连接信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">首先，需要引入context命名空间和约束路径：</span></span><br><span class="line"><span class="comment">命名空间：xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line"><span class="comment">约束路径：</span></span><br><span class="line"><span class="comment">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="comment">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:c3p0.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h2><ul><li>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以<strong>注解开发是一种趋势</strong>，注解代替xml配置文件可以简化配置，提高开发效率。 </li></ul><h3 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a>原始注解</h3><ul><li>Spring原始注解主要是替代<code>&lt;Bean&gt;</code>的配置</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319092521680.png" alt="image-20210319092521680"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jack1024&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*@Autowired</span></span><br><span class="line"><span class="comment">    @Qualifier(&quot;userDao&quot;)*/</span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>@Autowired默认按照数据类型匹配注入</li><li>@Autowired结合@Qualifier会按照id匹配注入</li><li>@Resource相当于@Autowired+@resource</li><li>注解方式@Autowired、@Qualifier，@resource来依赖注入，不需要写set方法了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Value注入普通数据类型</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;注入普通数据&quot;)</span><span class="comment">//没多大意义</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><span class="comment">//很有意义：Spring配置类中会用</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Bean的创建形式</span></span><br><span class="line"><span class="comment">//@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="comment">//此处省略代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化方法....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;销毁方法.....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h3><ul><li>使用原始注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下<ol><li>非自定义的Bean的配置：<code>&lt;bean&gt;</code>（例如Datasource）</li><li>加载properties文件的配置：<code>&lt;context:property-placeholder&gt;</code></li><li>组件扫描的配置：<code>&lt;context:component-scan&gt;</code></li><li>引入其他文件：<code>&lt;import&gt;</code></li></ol></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319101631835.png" alt="image-20210319101631835"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring的配置类，使用class电梯xml，使用注解代替标签</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.jack1024&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//Spring将当前方法的返回值以指定名称存在Spring容器</span></span><br><span class="line"><span class="meta">@Bean(name=&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试加载核心配置类创建Spring容器</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnoConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//加载核心配置类</span></span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">    UserService userService = (UserService)applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.save();</span><br><span class="line">    DataSource dataSource = (DataSource)applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这种全注解配置的方法在SSM不强制使用，但是在SpringBoot中很常用</p><h2 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类中很繁琐</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>改进：</strong></p><ol><li>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</li><li>将需要进行测试Bean直接在测试类中进行注入</li></ol><p><strong>Spring继承Junit步骤：</strong></p><ol><li>导入spring集成Junit的maven依赖</li><li>使用@Runwith注解替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//加载spring核心配置文件</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">//加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是AOP？"><a href="#什么是AOP？" class="headerlink" title="什么是AOP？"></a>什么是AOP？</h3><p>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程，是通过预编译方式和运行期<strong>动态代理</strong>实现程序功能的统一维护的一种技术。</p><p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（举个栗子：A和B需要结合，但是是通过程序运行时的动态结合，可以很好地解耦）</p><p><strong>AOP作用一句话总结：</strong>程序运行时在不修改源码情况下动态对代码增强功能</p><p><strong>AOP优势：</strong>减少重复代码，提高开发效率，便于维护</p><h3 id="AOP底层原理：动态代理"><a href="#AOP底层原理：动态代理" class="headerlink" title="AOP底层原理：动态代理"></a>AOP底层原理：动态代理</h3><ul><li>实际上，AOP 的底层是通过 Spring 提供的的<strong>动态代理</strong>技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，再去调用目标对象的方法，从而完成功能的增强。</li></ul><p>JDK代理：基于接口的动态代理</p><p>cglib代理：基于父类的动态代理</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319145522857.png" alt="image-20210319145522857"></p><h4 id="基于JDK的动态代理"><a href="#基于JDK的动态代理" class="headerlink" title="基于JDK的动态代理"></a>基于JDK的动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Target target = <span class="keyword">new</span> Target(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line">TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">    target.getClass().getClassLoader(),<span class="comment">//目标对象的类加载器</span></span><br><span class="line">    target.getClass().getInterfaces(),<span class="comment">//目标对象相同的接口字节码对象数组</span></span><br><span class="line">    <span class="keyword">new</span> InvocationHandler() &#123;<span class="comment">//调用代理对象任何方法，实质都是执行invoke方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                Object proxy,</span></span></span><br><span class="line"><span class="params"><span class="function">                Method method,</span></span></span><br><span class="line"><span class="params"><span class="function">                Object[] args)</span> <span class="keyword">throws</span> Throwable </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;前置增强代码...&quot;</span>);</span><br><span class="line">                Object obj = method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;后置增强代码...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试,当调用接口的任何方法时，代理对象的代码都无需修改</span></span><br><span class="line">proxy.method();</span><br></pre></td></tr></table></figure><h4 id="基于cglib的动态代理"><a href="#基于cglib的动态代理" class="headerlink" title="基于cglib的动态代理"></a>基于cglib的动态代理</h4><ul><li>虽然是第三方的实现，但是现在spring-core包已经将cglib拿进来了，无需手动导入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Target target = <span class="keyword">new</span> Target(); <span class="comment">//创建目标对象</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();   <span class="comment">//创建增强器</span></span><br><span class="line">enhancer.setSuperclass(Target.class); <span class="comment">//设置父类</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123; <span class="comment">//设置回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        Object o, </span></span></span><br><span class="line"><span class="params"><span class="function">        Method method, </span></span></span><br><span class="line"><span class="params"><span class="function">        Object[] args, </span></span></span><br><span class="line"><span class="params"><span class="function">    MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强....&quot;</span>);</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;后置代码增强....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Target proxy = (Target) enhancer.create(); <span class="comment">//创建代理对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试,当调用接口的任何方法时，代理对象的代码都无需修改</span></span><br><span class="line">proxy.method();</span><br></pre></td></tr></table></figure><h3 id="AOP相关概念："><a href="#AOP相关概念：" class="headerlink" title="AOP相关概念："></a>AOP相关概念：</h3><ul><li><strong>Target（目标对象）</strong>：代理的目标对象</li><li><strong>Proxy （代理）</strong>：一个类被 AOP 织入增强后，就产生一个结果代理类</li><li><strong>Joinpoint（连接点）</strong>：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</li><li><strong>Pointcut（切入点）</strong>：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li></ul><p><strong>注意：</strong>连接点是可以被增强的方法，切入点是真正被增强的方法。切入点是连接点的一部分。</p><ul><li><strong>Advice（通知/ 增强）</strong>：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li><li><strong>Aspect（切面）</strong>：是切入点和通知（引介）的结合</li><li><strong>Weaving（织入）</strong>：是指把增强应用到目标对象来创建新的代理对象的过程。spring<strong>采用动态代理织入</strong>，而AspectJ采用编译期织入和类装载期织入</li></ul><h3 id="AOP开发需要明确的事项"><a href="#AOP开发需要明确的事项" class="headerlink" title="AOP开发需要明确的事项"></a>AOP开发需要明确的事项</h3><ol><li><p><strong>需要编写的内容</strong></p><ol><li>编写核心业务代码（目标类的目标方法）</li><li>编写切面类，切面类中有通知(增强功能方法)</li><li>在配置文件中，配置织入关系，即将哪些Advice与哪些Pointcut进行结合</li></ol></li><li><p><strong>AOP 技术实现的内容</strong></p><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p></li><li><p><strong>AOP 底层使用哪种代理方式</strong></p><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p></li></ol><h3 id="XML-配置-AOP-详解"><a href="#XML-配置-AOP-详解" class="headerlink" title="XML 配置 AOP 详解"></a>XML 配置 AOP 详解</h3><ol><li>导入 AOP 相关坐标</li><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部有增强方法）</li><li>将目标类和切面类的对象创建权交给 spring</li><li>在 applicationContext.xml 中配置织入关系</li><li>测试代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标接口和目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在 applicationContext.xml 中配置织入关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--将目标类和切面类的对象创建权交给 spring--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置目标类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置Target的method方法执行时要进行myAspect的before方法前置增强--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.itheima.aop.Target.method())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        target.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切点表达式的写法"><a href="#切点表达式的写法" class="headerlink" title="切点表达式的写法"></a>切点表达式的写法</h4><p>表达式语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、包名、类名、方法名可以使用星号*  代表任意</p></li><li><p>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</p></li><li><p>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</p></li></ul><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution(public void com.itheima.aop.Target.method())</span><br><span class="line">execution(void com.itheima.aop.Target.*(..))</span><br><span class="line">execution(* com.itheima.aop.*.*(..))</span><br><span class="line">execution(* com.itheima.aop..*.*(..))</span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure><h4 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h4><p>通知的配置语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式&quot;&gt;&lt;/aop:通知类型&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319185243993.png" alt="image-20210319185243993"></p><h4 id="切点表达式的抽取"><a href="#切点表达式的抽取" class="headerlink" title="切点表达式的抽取"></a>切点表达式的抽取</h4><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.aop.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解配置-AOP-详解"><a href="#注解配置-AOP-详解" class="headerlink" title="注解配置 AOP 详解"></a>注解配置 AOP 详解</h3><ol><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部有增强方法）</li><li>将目标类和切面类的对象创建权交给 spring</li><li>在切面类中使用注解配置织入关系</li><li>在配置文件中开启组件扫描和 AOP 的自动代理</li><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.aop&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理，用于识别aop专属注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        target.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切点表达式的抽取-1"><a href="#切点表达式的抽取-1" class="headerlink" title="切点表达式的抽取"></a>切点表达式的抽取</h4><h4 id="注解通知的类型"><a href="#注解通知的类型" class="headerlink" title="注解通知的类型"></a>注解通知的类型</h4><p>通知的配置语法：@通知注解(“切点表达式”)</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319193734452.png" alt="image-20210319193734452"></p><h4 id="切点表达式的抽取-2"><a href="#切点表达式的抽取-2" class="headerlink" title="切点表达式的抽取"></a>切点表达式的抽取</h4><p>同 xml配置<br>aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;MyAspect.myPoint()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBCTemplate"><a href="#Spring-JDBCTemplate" class="headerlink" title="Spring JDBCTemplate"></a>Spring JDBCTemplate</h2><ol><li>导入spring-jdbc和spring-tx坐标</li><li>创建数据库表和实体</li><li>创建JdbcTemplate对象</li><li>执行数据库操作</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JDBCTemplate的基本使用参考博客《JDBC》</strong></p><p><strong>我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模版对象中,然后通过Spring容器获得JdbcTemplate对象来执行操作。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdbc.properties--&gt;</span></span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试Spring产生jdbcTemplate对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">    ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    JdbcTemplate jdbcTemplate = app.getBean(JdbcTemplate.class);</span><br><span class="line">    <span class="keyword">int</span> row = jdbcTemplate.update(<span class="string">&quot;insert into account values(?,?)&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">    System.out.println(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><h3 id="编程式事务控制"><a href="#编程式事务控制" class="headerlink" title="编程式事务控制"></a>编程式事务控制</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319210646503.png" alt="image-20210319210646503"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319211610424.png" alt="image-20210319211610424"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319220103243.png" alt="image-20210319220103243"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319220336119.png" alt="image-20210319220336119"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319220351682.png" alt="image-20210319220351682"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210319220537567.png" alt="image-20210319220537567"></p><h3 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h3><p>Spring 的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。</p><p><strong>声明式事务处理的作用</strong></p><ul><li><p>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可</p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便</p></li></ul><p><strong>注意：Spring 声明式事务控制底层就是AOP。</strong></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ol><li><strong>引入tx命名空间</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置事务增强</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置事务 AOP 织入</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务的aop增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>测试事务控制转账业务代码</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">    accountDao.out(outMan,money);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    accountDao.in(inMan,money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切点方法的事务参数的配置"><a href="#切点方法的事务参数的配置" class="headerlink" title="切点方法的事务参数的配置"></a>切点方法的事务参数的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置事务的属性信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<a href="tx:method">tx:method</a> 代表切点方法的事务参数的配置，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>name：切点方法名称</p></li><li><p>isolation:事务的隔离级别</p></li><li><p>propogation：事务的传播行为</p></li><li><p>timeout：超时时间</p></li><li><p>read-only：是否只读</p></li></ul><h3 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h3><ol><li>编写 AccoutDao </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where name=?&quot;</span>,money,outMan);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where name=?&quot;</span>,money,inMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写 AccoutService</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写 applicationContext.xml 配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!—之前省略datsSource、jdbcTemplate、平台事务管理器的配置--&gt;</span><br><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解配置声明式事务控制解析"><a href="#注解配置声明式事务控制解析" class="headerlink" title="注解配置声明式事务控制解析"></a>注解配置声明式事务控制解析</h4><ol><li>使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离级别、传播行为等。</li><li>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</li><li>使用在方法上，不同的方法可以采用不同的事务参数配置。</li><li>要使用使用 @Transactional ，Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</li></ol><h2 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h2><h3 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a>ApplicationContext应用上下文获取方式</h3><p>应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件) 方式获取的，但是每次从容器中获得Bean时都要编写new ClasspathXmlApplicationContext(spring配置文件) ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p><p>在Web项目中，可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</p><h3 id="Spring提供获取应用上下文的工具"><a href="#Spring提供获取应用上下文的工具" class="headerlink" title="Spring提供获取应用上下文的工具"></a>Spring提供获取应用上下文的工具</h3><p>上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。</p><p>所以我们需要做的只有两件事：</p><p>①在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</p><p>②使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</p><h3 id="导入Spring集成web的坐标"><a href="#导入Spring集成web的坐标" class="headerlink" title="导入Spring集成web的坐标"></a>导入Spring集成web的坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置ContextLoaderListener监听器"><a href="#配置ContextLoaderListener监听器" class="headerlink" title="配置ContextLoaderListener监听器"></a>配置ContextLoaderListener监听器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">       org.springframework.web.context.ContextLoaderListener</span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过工具获得应用上下文对象"><a href="#通过工具获得应用上下文对象" class="headerlink" title="通过工具获得应用上下文对象"></a>通过工具获得应用上下文对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">Object obj = applicationContext.getBean(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端-elementUI</title>
      <link href="/2021/01/14/web%E5%89%8D%E7%AB%AF-elementUI/"/>
      <url>/2021/01/14/web%E5%89%8D%E7%AB%AF-elementUI/</url>
      
        <content type="html"><![CDATA[<h2 id="利用vue-cli搭建vue的webpack项目"><a href="#利用vue-cli搭建vue的webpack项目" class="headerlink" title="利用vue-cli搭建vue的webpack项目"></a>利用vue-cli搭建vue的webpack项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化webpack项目</span></span><br><span class="line">vue init webpack vue01</span><br><span class="line">cd vue01</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">cnpm install vue-router --save-dev</span><br><span class="line">cnpm install element-ui --save</span><br><span class="line">cnpm install axios vue-axios --save</span><br><span class="line">cnpm install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> main.js中引入</span></span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line">Vue.use(VueAxios,axios);</span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> ElementUI </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精简版JS:jQuery</title>
      <link href="/2021/01/13/%E7%B2%BE%E7%AE%80%E7%89%88JS-jQuery/"/>
      <url>/2021/01/13/%E7%B2%BE%E7%AE%80%E7%89%88JS-jQuery/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-和-JQuery"><a href="#JavaScript-和-JQuery" class="headerlink" title="JavaScript 和 JQuery"></a>JavaScript 和 JQuery</h2><p>jQuery就是一个JavaScript库，里面封装了大量JavaScript函数</p><p>推荐一个各种开源项目CDN服务搜索网站：<code>https://www.bootcdn.cn/</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text-jquery&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JavaScript的在线cdn引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//公式：$(css的selector).action();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//document.getElementById(&quot;text-jquery&quot;).onclick = function()&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#text-jquery&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;hello,jquery&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="是什么"><a href="#是什么" class="headerlink" title="$是什么"></a>$是什么</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery的文件结构：其实是一个自执行函数,引入了jquery的js文件，会执行这个自执行函数。</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;<span class="comment">//给window对象添加一个jQuery属性和$属性，用JQuery函数赋值给$</span></span><br><span class="line">    <span class="comment">//$是一个函数，所以会根据参数的不同进行不同的处理</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">//入口函数</span></span><br><span class="line">    $(<span class="string">&quot;#div&quot;</span>);<span class="comment">//选择器</span></span><br><span class="line">    $(<span class="string">&quot;&lt;div&gt;我是一个div标签&lt;/div&gt;&quot;</span>);<span class="comment">//创建div标签</span></span><br><span class="line">    $(dom对象);<span class="comment">//把dom对象转化为jquery对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Dom对象和jQuery对象"><a href="#Dom对象和jQuery对象" class="headerlink" title="Dom对象和jQuery对象"></a>Dom对象和jQuery对象</h2><p>dom对象：原生js选择器获取到的对象，只能调用dom属性或者方法，但是不能调用jQuery的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">div1.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br></pre></td></tr></table></figure><p>jQuery对象：由jQuery选择器获取到的对象，只能调用jQuery的属性或者方法，但是不能调用原生js的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = $(<span class="string">&quot;#div1&quot;</span>);</span><br><span class="line">div1.css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><p>jquery对象是一个伪数组，其实是dom对象的一个包装集</p><p>jQuery和JavaScript对象的互相转化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript对象——》jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $div1 = $(div1);</span><br><span class="line">$div1.css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery对象——》JavaScript对象</span></span><br><span class="line"><span class="keyword">var</span> $div1 = $(<span class="string">&quot;#div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div1 = $div1[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> div2 = $div1.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生JavaScript</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById();</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery选择器</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>);<span class="comment">//标签</span></span><br><span class="line">$(<span class="string">&quot;#id1&quot;</span>);<span class="comment">//id</span></span><br><span class="line">$(<span class="string">&quot;.class1&quot;</span>);<span class="comment">//类</span></span><br><span class="line"><span class="comment">//......(css中所有选择器都适用：基本选择器，层次选择器，伪类，伪元素，属性选择器...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还有一些筛选方法来过滤</span></span><br><span class="line">children(selector);<span class="comment">//子类选择器</span></span><br><span class="line">find(selector);<span class="comment">//后代选择器</span></span><br><span class="line">siblings(selector);<span class="comment">//兄弟节点</span></span><br><span class="line">parent();<span class="comment">//父亲</span></span><br><span class="line">eq(index);<span class="comment">//索引</span></span><br><span class="line">next();<span class="comment">//下一个兄弟</span></span><br><span class="line">prev();<span class="comment">//上一个兄弟</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>鼠标事件，键盘事件，其他事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">blur()<span class="comment">//元素失去焦点</span></span><br><span class="line">change()<span class="comment">//用户改变域的内容</span></span><br><span class="line">click()<span class="comment">//鼠标点击某个对象</span></span><br><span class="line">dbclick()<span class="comment">//鼠标双击某个对象</span></span><br><span class="line">error()<span class="comment">//加载文档或者图形时发生错误</span></span><br><span class="line">focus()<span class="comment">//元素获得焦点</span></span><br><span class="line">keydown()<span class="comment">//用户摁下摁键时发生</span></span><br><span class="line">keypress()<span class="comment">//用户摁下摁键，并且产生一个字符时发生</span></span><br><span class="line">keyup()<span class="comment">//用户释放某一个摁键时触发</span></span><br><span class="line">load()<span class="comment">//某个页面或图像完成加载</span></span><br><span class="line">mousedown(<span class="comment">//某个鼠标按键被按下</span></span><br><span class="line">mousemove()<span class="comment">//鼠标被移动</span></span><br><span class="line">mouseout()<span class="comment">//鼠标从某元素移开</span></span><br><span class="line">mouseover()<span class="comment">//鼠标被移到某元素上(子元素也会触发)</span></span><br><span class="line">mouseenter()<span class="comment">//鼠标必须点到选取的元素上才触发，注意和mouseover区别</span></span><br><span class="line">mouseup()<span class="comment">//某个鼠标按键被松开</span></span><br><span class="line">resize()<span class="comment">//窗口或者框架被调整大小</span></span><br><span class="line">scroll()<span class="comment">//滚动文档的可视部分</span></span><br><span class="line">select()<span class="comment">//文本被选中</span></span><br><span class="line">submit()<span class="comment">//提交按钮被点击</span></span><br><span class="line">unload()<span class="comment">//用户退出界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有的函数通过回调函数中的参数获取更多操作的细节：键盘鼠标按键wihch，mouse移动横纵坐标</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口函数</span></span><br><span class="line"><span class="comment">//window.onload() 方法用于在网页加载完毕后立刻执行的操作，即当 HTML 文档加载完毕后，立刻执行某个方法。</span></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//入口函数唯一</span></span><br><span class="line">    Func1();</span><br><span class="line">    Func2();</span><br><span class="line">    Func3();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$(document).ready()注意在body中没有onload事件，否则该函数不能执行。在每个页面中可以有很多个函数被加载执行，按照fn的顺序来执行。</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//入口函数可以不唯一</span></span><br><span class="line">    alert(<span class="string">&quot;网页已经加载完成&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//简化为</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;网页已经加载完成&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//window.onload和$(function()&#123;&#125;)的执行流程是jQuery先执行</span></span><br><span class="line"><span class="comment">//$(function()&#123;&#125;)要等待页面上dom树加载完毕后执行，window.onload要等待页面上所有资源都加载完毕后再执行</span></span><br></pre></td></tr></table></figure><h3 id="on注册事件"><a href="#on注册事件" class="headerlink" title="on注册事件"></a>on注册事件</h3><p>jQuery1.7之后，jQuery用on统一了所有时间的处理方法，之后都建议使用on来注册事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//on注册简单事件，不支持动态绑定</span></span><br><span class="line">$(selector).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//on注册事件委托(selector是子元素的父元素，所以必须是selector的内部子元素才能触发这个事件，支持动态绑定)</span></span><br><span class="line">$(selector).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;子元素&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用off()来解绑事件</span></span><br><span class="line">$(selector).off();<span class="comment">//解绑所有事件</span></span><br><span class="line">$(selector).off(<span class="string">&quot;click&quot;</span>);<span class="comment">//解绑指定事件</span></span><br></pre></td></tr></table></figure><h3 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h3><p>自定义事件发生的时机条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义条件的时候执行click函数内容</span></span><br><span class="line"><span class="comment">//两种方法都可以。</span></span><br><span class="line">$(selector).click();</span><br><span class="line">$(selector).trigger(<span class="string">&quot;click&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于自定义事件，就只能使用触发器来了</span></span><br><span class="line">$(selector).on(<span class="string">&quot;jack&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello,jack!&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(selector).trigger(<span class="string">&quot;jack&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote><p>什么是事件对象</p></blockquote><p>注册一个事件，系统会帮我们生成一个对象记录这个事件触发时候的一些信息</p><p>比如触发事件的时候有没有按住某个键，以及一些坐标信息</p><p>jQuery中的事件对象由形参e来获取，jQuery中的事件对象是对js原生事件对象的封装，处理好了浏览器兼容性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(selector).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//距离屏幕左上角的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.screenX+<span class="string">&quot; : &quot;</span>+e.screenY);</span><br><span class="line">    <span class="comment">//距离页面坐上角的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.clientX+<span class="string">&quot; : &quot;</span>+e.clientY);</span><br><span class="line">    <span class="comment">//距离页面最顶部左上角的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.pageX+<span class="string">&quot; : &quot;</span>+e.pageY);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//阻止事件冒泡</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    <span class="comment">//阻止浏览器默认行为</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="comment">//上面两个同时阻止</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//按下的键盘代码</span></span><br><span class="line">    e.keyCode;</span><br><span class="line">    e.which;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;test-ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">&quot;python&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).text();<span class="comment">//获得值</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).html();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).text(<span class="string">&quot;派森&quot;</span>);<span class="comment">//获得值</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).html(<span class="string">&quot;&lt;em&gt;派森&lt;/em&gt;&quot;</span>);<span class="comment">//获得值</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;input元素名称&quot;</span>).val();<span class="comment">//获取input元素的值</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;input元素名称&quot;</span>).val(value);<span class="comment">//设置input元素的值为value</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $(selector).attr(<span class="string">&quot;属性名&quot;</span>);<span class="comment">//获取属性</span></span></span><br><span class="line"><span class="javascript">    $(selectorselector).attr(<span class="string">&quot;属性名&quot;</span>,<span class="string">&quot;属性值&quot;</span>);<span class="comment">//设置属性</span></span></span><br><span class="line"><span class="javascript">    $(selector).removeAttr(<span class="string">&quot;属性名称&quot;</span>);<span class="comment">//给某元素删除指定的属性以及该属性的值</span></span></span><br><span class="line"><span class="javascript">    $(selector).addClass(<span class="string">&quot;class1 class2&quot;</span>);<span class="comment">//给某元素添加指定的样式</span></span></span><br><span class="line"><span class="javascript">$(selector).removeClass(<span class="string">&quot;class1 class2&quot;</span>);<span class="comment">//给某元素删除指定的样式</span></span></span><br><span class="line"><span class="javascript">    $(selector).toggleClass(<span class="string">&quot;class1 class2&quot;</span>);<span class="comment">//给某元素切换指定的样式</span></span></span><br><span class="line"><span class="javascript">    $(selector).hasClass(<span class="string">&quot;class&quot;</span>);<span class="comment">//判断是否有样式</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//对于checked,selected,disabled这类boolean类型的属性来说，不能用attr方法获取属性值，只能用prop方法</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;input:checked&quot;</span>).prop(<span class="string">&quot;check&quot;</span>);<span class="comment">//返回true或false</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;input:checked&quot;</span>).prop(<span class="string">&quot;check&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//css操作</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).css(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100px&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;backgroundColor&quot;</span>: <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//显示&amp;隐藏（本质是设定display）</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).show();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).hide();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#test-ul li[name=python]&quot;</span>).toggle();</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//宽高</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//不带padding，margin和border</span></span></span><br><span class="line"><span class="javascript">    height();<span class="comment">//直接返回200，没有px，如果用css返回值带px单位</span></span></span><br><span class="line"><span class="javascript">    height(<span class="number">100</span>);<span class="comment">//不带单位默认px</span></span></span><br><span class="line"><span class="javascript">    widtn();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//带padding</span></span></span><br><span class="line"><span class="javascript">    innerWidth();</span></span><br><span class="line"><span class="javascript">    innerHeight();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//带padding和border</span></span></span><br><span class="line"><span class="javascript">    outerWidth();</span></span><br><span class="line"><span class="javascript">    outerWidth();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//带padding，border和margin</span></span></span><br><span class="line"><span class="javascript">    outerWidth(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    outerWidth(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取网页可视区的宽高</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).width();</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).height();</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//增删改DOM元素</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法1(直接显示在页面上)</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;元素&quot;</span>).html(<span class="string">&quot;html标签内容&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法2(通过下列方法追加)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dom1 = $(<span class="string">&quot;html标签内容&quot;</span>);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $(selector).after(content);<span class="comment">//在匹配元素后面添加内容</span></span></span><br><span class="line"><span class="javascript">    $(selector).append(content);<span class="comment">//将content作为元素的内容插入到该元素内的最后</span></span></span><br><span class="line"><span class="javascript">    $(selector).appendTo(content);<span class="comment">//和append方向相反</span></span></span><br><span class="line"><span class="javascript">    $(selector).before(content);<span class="comment">//与after方法互换</span></span></span><br><span class="line"><span class="javascript">    $(selector).prepend(content);<span class="comment">//将content作为该元素的一部分，放到该元素的最前面</span></span></span><br><span class="line"><span class="javascript">    $(selector).prependTo(content);<span class="comment">//和prepend方向互换</span></span></span><br><span class="line"><span class="javascript">    $(selector).insertAfter(content);<span class="comment">//将该元素插入到content之后</span></span></span><br><span class="line"><span class="javascript">    $(selector).insertBefore(content);<span class="comment">//将该元素插入到content之前</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $(selector).remove();<span class="comment">//删除所有的指定元素,自杀（本质上还是先找父再删自己）</span></span></span><br><span class="line"><span class="javascript">    $(selector).remove(<span class="string">&quot;exp&quot;</span>);<span class="comment">//删除所有含有exp的元素</span></span></span><br><span class="line"><span class="javascript">    $(selector).wrap(<span class="string">&quot;html&quot;</span>);<span class="comment">//用html来包围该元素</span></span></span><br><span class="line"><span class="javascript">    $(selector).wrap(element);<span class="comment">//用element来包围该元素</span></span></span><br><span class="line"><span class="javascript">    $(selector).clone(布尔表达式);<span class="comment">//当布尔表达式为真时，克隆元素（无参时，当作true处理）</span></span></span><br><span class="line"><span class="javascript">    $(selector).empty();<span class="comment">//将该元素的内容设置为空</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//克隆</span></span></span><br><span class="line"><span class="javascript">    $(selector).clone(<span class="literal">true</span>/<span class="literal">false</span>);<span class="comment">//返回元素的一份副本，参数代表是否把事件一起克隆，默认时false</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//offset &amp; position</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//offset获取元素距离document的位置，返回值为对象[left:100,top:100]</span></span></span><br><span class="line"><span class="javascript">    $(selector).offset();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//position获取相对于其最近的有定位的祖先元素的距离</span></span></span><br><span class="line"><span class="javascript">    $(selector).position();</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//scrollTop &amp; scrollLeft</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//设置或者获取垂直滚动条的位置</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).scrollTop();</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).scrollLeft();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//也可以带参数设置滚动条滚动的距离</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示 &amp; 隐藏动画</span></span><br><span class="line">$(selector).show(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);</span><br><span class="line">    $(selector).hide(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);</span><br><span class="line">    $(selector).toggle(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其他动画</span></span><br><span class="line">    $(selector).slideDown(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//下滑生成</span></span><br><span class="line">    $(selector).slideUp(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//上滑消失</span></span><br><span class="line">    $(selector).slideToggle(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//反复横跳</span></span><br><span class="line">    $(selector).fadeIn(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//淡入</span></span><br><span class="line">    $(selector).fadeOut(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//淡出</span></span><br><span class="line">    $(selector).fadeTo(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:透明度,参数<span class="number">3</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//淡入到哪里</span></span><br><span class="line">    $(selector).fadeToggle(参数<span class="number">1</span>:毫秒数/<span class="string">&#x27;fast&#x27;</span>/<span class="string">&#x27;normal&#x27;</span>/<span class="string">&#x27;slow&#x27;</span>,参数<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完后的回调函数&#125;);<span class="comment">//反复横跳</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义动画</span></span><br><span class="line"><span class="comment">/*参数：</span></span><br><span class="line"><span class="comment">参数1：需要做的动画属性</span></span><br><span class="line"><span class="comment">参数2：执行动画的时长</span></span><br><span class="line"><span class="comment">参数3：缓动swing or 匀速linear</span></span><br><span class="line"><span class="comment">参数4：动画执行完毕后的回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;元素&quot;</span>).animate(&#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">opacity</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;,<span class="number">2000</span>,<span class="string">&#x27;linear&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;动画执行完毕了&#x27;</span>);</span><br><span class="line">        <span class="comment">//这里面又可以继续animate，无线套娃</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为都设置了动画的时间，所以存在一个动画队列，即使操作已经结束，但是动画可能并没有结束，导致交互很糟糕，需要在操作结束时stop动画</span></span><br><span class="line">stop(<span class="literal">true</span>,<span class="literal">true</span>);<span class="comment">//参数1：是否清除队列；参数2：是否跳转到最终效果</span></span><br></pre></td></tr></table></figure><h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看jQuery版本</span></span><br><span class="line"><span class="built_in">console</span>.log(jQuery.fn.jquery);</span><br><span class="line"><span class="built_in">console</span>.log(jQuery.prototype.jquery);</span><br><span class="line"><span class="built_in">console</span>.log($.fn.jquery);</span><br><span class="line"><span class="built_in">console</span>.log($.prototype.jquery);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入多个jQuery文件，使用的是哪个版本的？</span></span><br><span class="line"><span class="comment">//哪个文件后引入就使用的那个版本的 $对象 和 jQuery对象 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多库共存</span></span><br><span class="line">$.noConflict();<span class="comment">//主动把当前自己版本的$控制权释放掉</span></span><br><span class="line"><span class="built_in">console</span>.log(jQuery.fn.jquery);</span><br><span class="line"><span class="built_in">console</span>.log($.fn.jquery);</span><br><span class="line"><span class="comment">//这样上面就是两个版本的jQuery了，实现了多库共存</span></span><br><span class="line"><span class="comment">//同时noConflict返回原来的版本_$</span></span><br><span class="line"><span class="keyword">var</span> _$ = $.noConflict();</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>jQuery插件搜索网站：<code>https://www.jq22.com/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用jQuery插件：颜色插件，省市联动插件，jQuery ui插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*自己开发jQuery插件</span></span><br><span class="line"><span class="comment">1. 给jQuery原型添加方法</span></span><br><span class="line"><span class="comment">2. 给jQuery直接添加方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//给jQuery原型添加方法(jquery.fn = jquery.prototype )</span></span><br><span class="line">    $.fn.bgColor(bg_color)&#123;</span><br><span class="line">        <span class="comment">//this是调用这个bgColor方法的jQuery对象</span></span><br><span class="line">        <span class="built_in">this</span>.css(<span class="string">&quot;backgroundColor&quot;</span>,bg_color);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;<span class="comment">//为了能链式编程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;(jQuery))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//给jQuery原型添加方法(jquery.fn = jquery.prototype )</span></span><br><span class="line">    $.<span class="function"><span class="title">bgColor</span>(<span class="params">bg_color</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this是调用这个bgColor方法的jQuery对象</span></span><br><span class="line">        <span class="built_in">this</span>.css(<span class="string">&quot;backgroundColor&quot;</span>,bg_color);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;<span class="comment">//为了能链式编程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;(jQuery))</span><br></pre></td></tr></table></figure><p><strong>jQuery支持链式编程</strong></p><p>原因：因为很多jQuery方法直接返回 当前的jQuery对象，所以可以接着 . 出方法；</p><ol><li><p>不返回jQuery对象的方法：val(),html(),text(),attr(), 返回文本字符串；</p></li><li><p>返回新的jQuery对象的方法：next() nextAll() parent() children() prev() …</p></li><li><p>剩下基本都是返回当前jQuery对象；</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).width(200px).height(100px).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;red&quot;</span>).text(<span class="string">&quot;哈哈&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>jQuery的很多操作通过实践中自己总结。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Javascript </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript快速回顾</title>
      <link href="/2021/01/08/JavaScript%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE/"/>
      <url>/2021/01/08/JavaScript%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<p>再次回顾前端三件套</p><ol><li><strong>HTML（结构）</strong>：超文本标记语言，决定网页的结构和内容</li><li><strong>CSS（表现）</strong>：层叠样式表，设定网页的表现样式</li><li><strong>JavaScript（行为）</strong>：一种弱类型的脚本语言，其源代码不需要经过编译，由浏览器解释运行，用于控制网页的行为。</li></ol><p><strong>历史</strong></p><ol><li>Native原生JS开发：按照【ECMAScript】标准的开发方式，特点是所有浏览器都支持。（目前的主流版本是ES6，但是ES5才是所有浏览器都支持，所以需要用webpack把ES6打包为ES5）</li><li>TypeScript微软标准：微软开发的语言，是JavaScript的超集。除了具备ES的特性之外还有很多不在范围内的新特性，会导致很多浏览器不能直接支持Typescript语法，需要编译后才能被浏览器正确执行。</li></ol><p><strong>Javascript流行库 &amp; 框架</strong></p><ol><li>jQuery：简化原生JavaScript操作的JS库</li><li>Angular：Goole收购的前端框架</li><li>React：Facebook开发的高性能JS前端框架</li><li>Vue：渐进式JavaScript框架，特点是综合了Angular(模块化)和React(虚拟DOM)的优点</li><li>Axios：前端通信框架</li></ol><p><strong>UI框架：</strong></p><ol><li>Ant-Design：阿里巴巴</li><li>ElementUI，iview，ice：饿了么</li><li>Boostrap：Twitter</li><li>AmazeUI：妹子UI</li></ol><p><strong>JavaScript构建工具</strong></p><ol><li>Babel：Typescript编译工具</li><li>Webpack：模块打包器</li></ol><h4 id="世界上最流行的脚本语言——Javascript"><a href="#世界上最流行的脚本语言——Javascript" class="headerlink" title="世界上最流行的脚本语言——Javascript"></a>世界上最流行的脚本语言——Javascript</h4><p>ECMAScript是JavaScript的一种规范，目前已经到ES6了。但是大部分浏览器只支持到ES5</p><p><strong>作为一名后端程序员，必须要精通Javascript！</strong></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第二种外部引入方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;hello,world!&quot;</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>基本上按照java语法来写JavaScript一定没有问题：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量（可带$和_）</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//条件控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JavaScript严格大小写</span></span><br><span class="line"><span class="built_in">console</span>.log(score);</span><br></pre></td></tr></table></figure><h4 id="var-和-let的区别"><a href="#var-和-let的区别" class="headerlink" title="var 和 let的区别"></a>var 和 let的区别</h4><p>JavaScript中的变量大致分为<strong>局部变量</strong>和<strong>全局变量</strong></p><p>大体上：函数外声明的就是全局变量，函数内声明的就是局部变量</p><p>变量是需要用var关键字声明的。但是javascript中也可以隐式的使用变量，就是不用声明，直接使用。但是千万注意，<strong>javascript把隐式声明的变量总是当成全局变量来使用的</strong>。</p><p>let和var的区别体现在作用域上：<strong>var的作用域</strong>是函数作用域，<strong>let作用域</strong>则被规定为块作用域，块作用域要比函数作用域小一些，但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。</p><p>举个栗子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--有五个按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns=<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">     btns[i].οnclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&#x27;点击了第&#x27;</span>+i+<span class="string">&#x27;个按钮&#x27;</span>);     </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点击按钮后弹出的都是第4个，原因是var定义变量i作用域造成的。</span></span><br><span class="line"><span class="comment">//通过var关键字声明的变量只有函数作用域，没有块作用域，在块&#123; &#125;内声明的变量可以从块之外进行访问。</span></span><br><span class="line"><span class="comment">//通过let关键字声明的变量拥有块作用域，在块&#123; &#125;内声明的变量无法从块外访问</span></span><br><span class="line"><span class="keyword">let</span> btns=<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">     btns[i].οnclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&#x27;点击了第&#x27;</span>+i+<span class="string">&#x27;个按钮&#x27;</span>);     </span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//JavaScript中，函数查找变量从自身函数开始，从 &#x27;内&#x27; 向 &#x27;外&#x27; 查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。（就近原则）</span></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li><p><code>number</code>：js不区分小数和整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数</span></span><br><span class="line"><span class="number">123.1</span><span class="comment">//浮点数</span></span><br><span class="line"><span class="number">1.23e3</span><span class="comment">//科学计数法</span></span><br><span class="line">-<span class="number">99</span><span class="comment">//负数</span></span><br><span class="line"><span class="literal">NaN</span><span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span><span class="comment">//无限大</span></span><br></pre></td></tr></table></figure></li><li><p><code>string</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>boolean</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&amp;&amp;  ||  !  =  ==  ===(类型一样且值一样)</span><br><span class="line"><span class="literal">NaN</span>和所有数值都不相对，包括自己，只能<span class="built_in">isNaN</span>()来判断</span><br></pre></td></tr></table></figure></li><li><p><code>null</code>：空</p></li><li><p><code>undefined</code>：未定义</p></li><li><p><code>object</code>：对象</p><ul><li><p><code>Function</code>：</p></li><li><p><code>普通object</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;qinjiang&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Array</code>：数组中可以有各个类型的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//数组下标越界会undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>Date</code>：</p></li><li><p>…</p></li></ul></li></ul><h4 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预防JavaScript的随意性导致的各种问题，必须写在第一行</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;<span class="comment">//局部变量建议使用let</span></span><br></pre></td></tr></table></figure><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>使用单引号或者双引号包裹</p></li><li><p>注意转义字符 \</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">\n</span></span><br><span class="line"><span class="string">\t</span></span><br><span class="line"><span class="string">\u字符 //Unicode字符</span></span><br><span class="line"><span class="string">\x字符 //AscII字符</span></span><br></pre></td></tr></table></figure></li><li><p>多行字符串编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">`fasdfdsafsad</span></span><br><span class="line"><span class="string">fasdfdsa</span></span><br><span class="line"><span class="string">fasdfsda`</span>;<span class="comment">//单反引号</span></span><br></pre></td></tr></table></figure></li><li><p>模板字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;jackyang&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></li><li><p>字符串长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="string">&quot;student&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(studnet.length);</span><br><span class="line"><span class="built_in">console</span>.log(studnet[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//字符串不可变，下标只能访问</span></span><br></pre></td></tr></table></figure></li><li><p>其他函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">student.toUpperCase();</span><br><span class="line">student.toLowerCase();</span><br><span class="line">student.indexOf(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">studnet.subString(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//[)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">arr.length;</span><br><span class="line"><span class="comment">/*数组长度可变，通过给length赋值</span></span><br><span class="line"><span class="comment">赋值过大，多余的元素是undefined</span></span><br><span class="line"><span class="comment">赋值过小，元素会丢失</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">arr.length = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得下标索引</span></span><br><span class="line">arr.indexOf(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>切割 &amp; 压进 &amp; 弹出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slice();<span class="comment">//截取Array的一部分，返回一个新数组</span></span><br><span class="line">push();<span class="comment">//压入尾部</span></span><br><span class="line">pop();<span class="comment">//从尾部弹出</span></span><br><span class="line">unshift();<span class="comment">//从头部压入</span></span><br><span class="line">shift();<span class="comment">//从头部弹出</span></span><br></pre></td></tr></table></figure></li><li><p>排序 &amp; 反转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自身会改变</span></span><br><span class="line">arr.sort();</span><br><span class="line">arr.reverse();</span><br></pre></td></tr></table></figure></li><li><p>拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">arr.concat([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);<span class="comment">//没有修改数组，指挥返回一个新的数组[&#x27;C&#x27;,&#x27;B&#x27;,&#x27;A&#x27;,3,4,5]</span></span><br><span class="line"></span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>);<span class="comment">//把数组中的元素通过指定分隔符链接在一起&quot;C-B-A&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>多维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li><p>{…}表示一个对象，内容由若干个键值对组成。JavaScript中所有键都是字符串，值是任意对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jackyang&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;yangfanjack1024@qq.com&quot;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.name=<span class="string">&quot;samsmith&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用一个不存在的对象属性，不会报错：undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.haer;</span><br></pre></td></tr></table></figure></li><li><p>动态的删减 &amp; 添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name;<span class="comment">//delete</span></span><br><span class="line">person.haha = <span class="string">&quot;heihei&quot;</span>;<span class="comment">//add</span></span><br></pre></td></tr></table></figure></li><li><p>判断属性值是否在对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;email&#x27;</span> <span class="keyword">in</span> person;<span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person;<span class="comment">//继承下来的</span></span><br><span class="line"><span class="comment">//判断一个属性是否是这个对象自身独有的</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li>判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(age&lt;<span class="number">3</span>)&#123;</span><br><span class="line">   alert(<span class="string">&quot;小于3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">5</span>)&#123;</span><br><span class="line">   alert(<span class="string">&quot;大于等于三小于5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">   alert(<span class="string">&quot;大于等于5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age = age +<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    age=age+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;<span class="keyword">while</span>(age&lt;<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">in</span> age)&#123;<span class="comment">//num是下标</span></span><br><span class="line">    <span class="built_in">console</span>.log(age[num]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> age) &#123;<span class="comment">//num是每个值</span></span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map和set只能使用of，不能使用in</span></span><br></pre></td></tr></table></figure><h3 id="Map-amp-Set集合"><a href="#Map-amp-Set集合" class="headerlink" title="Map &amp; Set集合"></a>Map &amp; Set集合</h3><blockquote><p>ES6的新特性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">99</span>],[<span class="string">&#x27;haha&#x27;</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;tom&#x27;</span>);<span class="comment">//获取</span></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="string">&#x27;jack&#x27;</span>,<span class="number">22</span>);<span class="comment">//新增 &amp; 修改</span></span><br><span class="line">map.delete(<span class="string">&#x27;jack&#x27;</span>);<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set:无序不重复集合</span></span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]);</span><br><span class="line">set.add(<span class="number">4</span>);<span class="comment">//新增</span></span><br><span class="line">set.delete(<span class="number">2</span>);<span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">3</span>));<span class="comment">//判断是否包含</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6新增了Sysbol.iterator，可用来遍历String,Array,Map,Set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> eArr = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// b</span></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// c</span></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// d</span></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map1.set(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">map1.set(<span class="number">1</span>, <span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator1 = map1[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterator1) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数-amp-面向对象"><a href="#函数-amp-面向对象" class="headerlink" title="函数 &amp; 面向对象"></a>函数 &amp; 面向对象</h2><h3 id="函数定义及变量作用域"><a href="#函数定义及变量作用域" class="headerlink" title="函数定义及变量作用域"></a>函数定义及变量作用域</h3><p>方法：对象包含（属性，方法），对象中的函数就是方法</p><blockquote><p>定义方式1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绝对值函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(abs(-<span class="number">10</span>));</span><br><span class="line"><span class="comment">//如果没有执行return，函数执行完也会返回一个undefined结果</span></span><br></pre></td></tr></table></figure><blockquote><p>定义方式2</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abs(-<span class="number">10</span>);</span><br><span class="line">abs(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//JavaScript函数参数可以少传也可以多传，也不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arguments是函数内一个隐含参数，代表传进来的所有参数，是一个数组</span></span><br><span class="line"><span class="comment">//rest是ES6新特性，获取除了已经定义的参数之外的所有参数,只能写在最后面，前面加...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a,b,...rest</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>提升变量作用域</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是undefined</span></span><br><span class="line"><span class="comment">//js引擎会自动提升y的声明，但是不会提升y的赋值，上述等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//养成规范：所有变量的定义都放在在最上面</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span><span class="comment">//全局对象</span></span><br><span class="line"><span class="comment">//默认所有全局变量和函数都自动绑定再window对象下</span></span><br><span class="line"><span class="comment">//JavaScript一切皆对象，也就是所有全局对象都在window对象下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> my_alert = <span class="built_in">window</span>.alert;</span><br><span class="line">my_alert(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//弹</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//不弹</span></span><br></pre></td></tr></table></figure><blockquote><p>规范</p></blockquote><p>由于所有全局变量都会绑定在window上，所以不同js文件如果全局变量同名就很麻烦。所以要通过一些规范避免冲突：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> jackyang = &#123;&#125;;</span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">jackyang.name = <span class="string">&quot;jackyang&quot;</span>;</span><br><span class="line">jackyang.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把自己的代码全部放进自定义的唯一空间名字中，从而避免全局命名冲突的问题，jQuery就是这样的</p><blockquote><p> let 和 var 的区别见上面</p></blockquote><blockquote><p>常量 const（ES6新特性）</p></blockquote><p>常量不能修改，只能一次赋值</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法就是把函数放在对象中，其实函数实际也可以看作window对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name+<span class="string">&#x27;,hi!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jackyang&quot;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">2020</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;yangfanjack1024@qq.com&quot;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now-<span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sayHi</span>: hi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.sayHi();</span><br><span class="line">person.getAge();</span><br><span class="line"><span class="built_in">window</span>.hi();<span class="comment">//hi是全局函数，只能用window调用</span></span><br></pre></td></tr></table></figure><p>this默认指向想用这个方法的那个对象</p><blockquote><p>apply</p></blockquote><p>每个方法都有一个apply方法，可以改变this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hi.apply(person,[]);<span class="comment">//this指向person对象，参数为空</span></span><br><span class="line">person.hi();<span class="comment">//这样就能通过person直接调用hi了</span></span><br></pre></td></tr></table></figure><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>在JavaScript中，类 &amp; 对象的概念和传统面向对象语言，Java,C#有区别</p><blockquote><p>原型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Sam Smith&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象Student可以理解为父类，一个子类的模板原型</span></span><br><span class="line">xiaoming.__proto__ = Student;</span><br><span class="line">xiaoming.run();</span><br></pre></td></tr></table></figure><blockquote><p>class继承（ES6新特性）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前通过构造函数创建对象</span></span><br><span class="line"><span class="comment">/*构造函数执行流程：</span></span><br><span class="line"><span class="comment">1. 立刻创建一个新的对象</span></span><br><span class="line"><span class="comment">2. 将新建的对象设置为函数中的this</span></span><br><span class="line"><span class="comment">3. 逐行执行函数中的代码</span></span><br><span class="line"><span class="comment">4. 将新建的对象作为返回值返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">a</span>)</span>&#123;<span class="comment">//构造函数和普通函数的区别主要是首字母大写 &amp; 调用方法</span></span><br><span class="line">    name = <span class="string">&quot;window&quot;</span>;<span class="comment">//往全局的window中添加</span></span><br><span class="line">    <span class="built_in">this</span>.name = a;<span class="comment">//往对象中添加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming <span class="keyword">instanceof</span> Student);<span class="comment">//使用instanceof判断对象是否是某个构造函数的实例</span></span><br><span class="line"><span class="comment">//给Student新增一个方法（可以理解为父类的公共方法）</span></span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert)(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所有对象都是object的后代</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6中class定义一个类(class继承,本质还是原型链)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,grade</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;I am a xiao student.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>难点</p></blockquote><p>要理解闭包，首先要理解Javascript的变量作用域。</p><p>变量的作用域有两种：全局变量和局部变量。函数内部可以直接读取全局变量。函数外部无法读取函数内的局部变量。</p><p>我们有时候需要得到函数内的局部变量。正常情况下是办不到的，只有通过变通方法才能实现。那就是<strong>在函数的内部，再定义一个函数</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(n); <span class="comment">// 999</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，就可以在f1外部读取它的内部变量了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line"> </span><br><span class="line">result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><p>闭包就是能够读取其他函数内部变量的函数</p><p>在本质上，闭包就是<strong>将函数内部和函数外部连接起来的一座桥梁</strong></p><p>闭包的两中常见应用：</p><ol><li><p>将函数作为另一个函数的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn1();</span><br><span class="line">f();<span class="comment">//3</span></span><br><span class="line">f();<span class="comment">//4</span></span><br><span class="line"><span class="comment">//如果这个没有闭包的话，调完fn1()后a就消失了，再调用f()就会报错找不到a</span></span><br></pre></td></tr></table></figure></li><li><p>将函数作为实参传递给另一个函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDelay</span>(<span class="params">msg, time</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(msg)</span><br><span class="line">    &#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">showDelay(<span class="string">&#x27;trigger&#x27;</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>闭包的作用：</strong></p></blockquote><ol><li>使函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）</li><li>让函数外部可以操作（读写）到函数内部的数据</li></ol><h4 id="闭包核心"><a href="#闭包核心" class="headerlink" title="闭包核心"></a>闭包核心</h4><p>函数执行完后，函数内部声明的局部变量一般情况下会释放的。但是存在闭包关系中的变量（如上面fn1函数的a变量）才<strong>可能</strong>存在。为什么是可能呢？因为必须要还要有引用指向fn1函数的返回值，如上的f变量指向的fn1的返回值fn3，fn3中有a，所以a才存在闭包关系，此时才能保证fn1执行完a变量并不会释放。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><blockquote><p>ES6新特性</p></blockquote><p>箭头函数也叫lambda表达式，其主要意图是定义轻量级的内联回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;wei&quot;</span>,<span class="string">&quot;ze&quot;</span>,<span class="string">&quot;yang&quot;</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">&quot;Mr.&quot;</span>+item);   <span class="comment">// [&quot;Mr.wei&quot;, &quot;Mr.ze&quot;, &quot;Mr.yang&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;wei&quot;</span>,<span class="string">&quot;ze&quot;</span>,<span class="string">&quot;yang&quot;</span>];</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Mr.&quot;</span>+item;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote><p>难点</p></blockquote><p>什么是原型？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们所创建的每个函数，解析器都会向函数中添加一个属性prototype</span></span><br><span class="line"><span class="comment">//这个属性对应一个原型对象</span></span><br><span class="line"><span class="comment">//如果这个函数作为普通函数调用时，prototype没有任何作用</span></span><br><span class="line"><span class="comment">//当函数作为构造函数调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="built_in">console</span>.log(stu.__proto__ == Student.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.__proto__ == Student.prototype);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象相当于是一个公共区域，所有同一个类的实例都可以访问这个原型对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以把对象中共有的内容放到原型对象中</span></span><br></pre></td></tr></table></figure><p>以后我们创建构造函数时，可以将这些对象共有的属性和方法统一添加到构造函数的原型对象中，这样就不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</p><blockquote><p>什么是原型链</p></blockquote><p>原型对象也是对象，所以他也有原型</p><p><strong>当我们访问对象的一个属性或者方法时，会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到就直接使用，如果没有就去原型对象的原型对象中寻找，直到找到Object对象的原型，Object对象的原型没有原型</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210113122403.png" style="zoom: 80%;" /><h2 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h2><blockquote><p>JavaScript标准对象：number  string  boolean  NaN  object  function  undefined  Infinity</p></blockquote><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.getFullYear();<span class="comment">//年</span></span><br><span class="line">now.getMonth();<span class="comment">//月0到11</span></span><br><span class="line">now.getDate();<span class="comment">//日</span></span><br><span class="line">now.getDay();<span class="comment">//星期几</span></span><br><span class="line">now.getHours();<span class="comment">//时</span></span><br><span class="line">now.getMinutes();<span class="comment">//分</span></span><br><span class="line">now.getSeconds();<span class="comment">//秒</span></span><br><span class="line">now.getTime();<span class="comment">//时间戳（全世界统一：1970.01.01 00:00:00开始到现在的毫秒数）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1610499819016</span>));<span class="comment">//时间戳转标准时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//几种时间的格式转换</span></span><br><span class="line">now.toLocalString();</span><br><span class="line">now.toGMTString();</span><br><span class="line">now.toISOString</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><blockquote><p>JSON是啥？</p></blockquote><ul><li>JSON（JavaScript Object Notation，JS对象简谱）是一种轻量级的数据交换格式</li><li>简介和清晰的层次结构使得JSON成为理想的数据交换语言</li><li>易于阅读和编写，易于机器解析和生成，能有效提升网络传输效率</li></ul><p>JavaScript中一切皆对象，任何js类型都可以用JSON表示</p><ul><li>对象都用<code>&#123;&#125;</code></li><li>数组都用<code>[]</code></li><li>键值对用<code>key:value</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Mariah Carey&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JavaScript对象转json字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"><span class="comment">//json字符串转JavaScript对象</span></span><br><span class="line"><span class="comment">//里面双引号外面单引号，里面双引号外面单引号</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;Mariah Carey&quot;,&quot;age&quot;:50,&quot;sex&quot;:&quot;male&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Mariah Carey&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">&quot;sex&quot;</span>:<span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JavaScript对象和JSON字符串的区别</p></blockquote><ul><li>首先，一个是对象，一个是字符串</li><li>json字符串的key需要引号，JavaScript不需要</li></ul><blockquote><p>前后端分离传数据一般是配合ajax结合</p></blockquote><ul><li>原生js写法，xhr异步请求</li><li>jQuery封装好的方法<code>$(&quot;#name&quot;).ajax()</code></li><li>axios请求</li></ul><h2 id="操作BOM元素"><a href="#操作BOM元素" class="headerlink" title="操作BOM元素"></a>操作BOM元素</h2><blockquote><p>JavaScript 由三部分构成，ECMAScript，DOM（Document对象模型）和BOM（浏览器对象模型）</p></blockquote><blockquote><p>JavaScript的诞生就是为了能让它能再浏览器中运行</p></blockquote><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//window代表浏览器窗口</span></span><br><span class="line"><span class="comment">//window对象是BOM中所有对象的核心，除了是BOM中所有对象的父对象外，还包含一些窗口控制函数。</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有BOM对象的父对象</span></span><br><span class="line"><span class="built_in">window</span>.navigator;</span><br><span class="line"><span class="built_in">window</span>.screen;</span><br><span class="line"><span class="built_in">window</span>.location;</span><br><span class="line"><span class="built_in">window</span>.document;</span><br><span class="line"><span class="built_in">window</span>.history;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过调整浏览器窗口大小来改变这些浏览器相关值的大小</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight;</span><br><span class="line"><span class="built_in">window</span>.innerWidth;</span><br><span class="line"><span class="built_in">window</span>.outerHeight;</span><br><span class="line"><span class="built_in">window</span>.outerWidth;</span><br></pre></td></tr></table></figure><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装了浏览器的信息</span></span><br><span class="line">navigator.appName;</span><br><span class="line">navigator.appversion;</span><br><span class="line">navigator.userAgent;</span><br><span class="line">navigator.platform;</span><br><span class="line"><span class="comment">//一般情况不会使用navigator对象，因为会人为篡改，不能把这些数据作为判断浏览器的标准</span></span><br><span class="line"><span class="comment">//不建议使用</span></span><br></pre></td></tr></table></figure><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代表屏幕尺寸</span></span><br><span class="line">screen.width;</span><br><span class="line">1920px</span><br><span class="line">screen.height;</span><br><span class="line">1080px</span><br></pre></td></tr></table></figure><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代表当前页面的URL信息</span></span><br><span class="line"><span class="attr">host</span>: <span class="string">&quot;www.bilibili.com&quot;</span></span><br><span class="line"><span class="attr">href</span>: <span class="string">&quot;https://www.bilibili.com/video/BV1JJ41177di?p=19&quot;</span></span><br><span class="line"><span class="attr">origin</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span></span><br><span class="line"><span class="attr">pathname</span>: <span class="string">&quot;/video/BV1JJ41177di&quot;</span></span><br><span class="line"><span class="attr">protocol</span>: <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="attr">reload</span>: ƒ reload()<span class="comment">//刷新网页</span></span><br><span class="line"><span class="attr">assign</span>: ƒ assign()<span class="comment">//设置新的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重定向地址有三种方法：</span></span><br><span class="line">location.assign(<span class="string">&quot;https://jack1024.link&quot;</span>);</span><br><span class="line">location.href=<span class="string">&quot;https://jack1024.link&quot;</span>;</span><br><span class="line">location.replace(<span class="string">&quot;https://jack1024.link&quot;</span>);</span><br><span class="line"><span class="comment">//replace和上面两种方法的区别是，replace的浏览历史会被清空了（href与assign方法会产生历史记录），所以建议使用repalce，这样就不能点击浏览器左上角的左右按钮回退了，更加安全。</span></span><br></pre></td></tr></table></figure><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//document代表当前页面的HTML DOM文档树，具体的DOM在下面DOM中介绍</span></span><br><span class="line"><span class="built_in">document</span>;<span class="comment">//获取文档树</span></span><br><span class="line"><span class="built_in">document</span>.cookie;<span class="comment">//获取网页cookie</span></span><br></pre></td></tr></table></figure><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代表浏览器的历史记录</span></span><br><span class="line">history.back();</span><br><span class="line">history.forward();</span><br><span class="line"><span class="comment">//不建议使用</span></span><br></pre></td></tr></table></figure><h2 id="操作DOM元素"><a href="#操作DOM元素" class="headerlink" title="操作DOM元素"></a>操作DOM元素</h2><blockquote><p>浏览器网页就是一个DOM属性结构</p></blockquote><h3 id="获取DOM"><a href="#获取DOM" class="headerlink" title="获取DOM"></a>获取DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;p2&quot;</span>);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> children = div1.children;<span class="comment">//获取父节点下的所有子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> first = div1.fristChild;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> last = div1.lastChild;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更新DOM"><a href="#更新DOM" class="headerlink" title="更新DOM"></a>更新DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">   </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//属性使用字符串包裹</span></span></span><br><span class="line"><span class="javascript">    div1.innerText = <span class="string">&quot;hello,world!&quot;</span>;</span></span><br><span class="line"><span class="javascript">    div1.innerHTML = <span class="string">&quot;&lt;strong&gt;hello,world!&lt;/strong&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">    div1.style.color = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="javascript">    div1.style.fontSize = <span class="string">&quot;20px&quot;</span>;<span class="comment">//css中用“-”连接的属性用驼峰命名</span></span></span><br><span class="line"><span class="javascript">    div1.style.padding = <span class="string">&quot;2em&quot;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除DOM"><a href="#删除DOM" class="headerlink" title="删除DOM"></a>删除DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//先获取删除目标元素的父节点，然后通过父节点删除自己</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    div1.removeChild(p1);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementByClassName(<span class="string">&quot;p2&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = p2.parentElement;</span></span><br><span class="line"><span class="javascript">    father.removeChild(p2);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//删除是一个动态的过程，删除多个节点时，children是在时刻变化的，删除节点的时候一定要注意</span></span></span><br><span class="line"><span class="javascript">    father.removeChild(father.children[<span class="number">0</span>]);<span class="comment">//删了第一个，剩下的节点依次往前挪</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插入DOM"><a href="#插入DOM" class="headerlink" title="插入DOM"></a>插入DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--我们获得某个DOM节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素了，但是如果这个DOM已经有内容了，就追加。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//把已有标签p放进去</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> js = getElementById(<span class="string">&quot;js&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = getElementById(<span class="string">&quot;list&quot;</span>);</span></span><br><span class="line"><span class="javascript">    list.appendChild(js);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建新节点然后加进来</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);<span class="comment">//创建一个p标签</span></span></span><br><span class="line"><span class="javascript">    newP.id = <span class="string">&quot;newP&quot;</span>;</span></span><br><span class="line"><span class="javascript">    newP.innerText = <span class="string">&quot;hello,i&#x27;m newP&quot;</span>;</span></span><br><span class="line"><span class="javascript">    list.appendChild(newP);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个script标签节点 &amp; 放进一个自定义属性节点，放到网页头里</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myScript = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="javascript">    myScript.setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text/javascript&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(myScript);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//往之前插</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ee = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ee&quot;</span>);</span></span><br><span class="line"><span class="javascript">    list.insertBefore(js,ee);<span class="comment">//ee前插入js</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h3><blockquote><p>常见表单元素：</p></blockquote><ul><li>文本框：text</li><li>下拉框：select</li><li>单选框：radio</li><li>多选框：checkbox</li><li>隐藏域：hidden</li><li>密码框：password</li><li>…</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(input_text);</span></span><br><span class="line"><span class="javascript">    input_text.value = <span class="string">&#x27;hello&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//对于单选框，多选框，value只能取到当前的值，要判断是否选中当前节点，可以用checked属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> male_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;male&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> female_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;female&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(male_text.checked)&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;male is checked!&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    female_text.checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="提交表单高级验证"><a href="#提交表单高级验证" class="headerlink" title="提交表单高级验证"></a>提交表单高级验证</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return aaa();&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submitForm();&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MD5加密算法工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//两种通过js提交表单的方式</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(username.value);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使用md5算法加密</span></span></span><br><span class="line"><span class="javascript">        password.value = md5(password.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(password.value);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//这里也可以结合正则表达式做前端校验工作</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//做各种判断...</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>).submit();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充一个小点：<strong>钩子函数和回调函数的区别</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般认为，钩子函数就是回调函数的一种，其实还是有差异的，差异地方就是：触发的时机不同。</span></span><br><span class="line"><span class="comment">/*特点：</span></span><br><span class="line"><span class="comment">1. 自己定义的</span></span><br><span class="line"><span class="comment">2. 自己没有调用</span></span><br><span class="line"><span class="comment">3. 但它最终执行了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*常见的回调函数：</span></span><br><span class="line"><span class="comment">1. dom事件回调偶数</span></span><br><span class="line"><span class="comment">2. 定时器回调函数</span></span><br><span class="line"><span class="comment">3. ajax请求回调函数</span></span><br><span class="line"><span class="comment">4. 生命周期回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//钩子函数</span></span><br><span class="line"><span class="comment">//钩子（Hook）概念源于Windows的消息处理机制，通过设置钩子，应用程序对所有消息事件进行拦截，然后执行钩子函数。</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;i&#x27;m a hook&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="comment">//给btn绑定了一个监听器，只有消息捕获完成之后才能触发回调函数。</span></span><br><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.onclick);<span class="comment">//undefined</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数和钩子函数的一个很明显的差别就是：钩子函数在捕获消息的第一时间就执行，而回调函数是捕获结束时，最后一个被执行的。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS快速回顾</title>
      <link href="/2021/01/08/CSS%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE/"/>
      <url>/2021/01/08/CSS%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>前端三件套</strong></li></ul><p>HTML+CSS+JavaScript</p><p>结构+表现+交互</p><ul><li>css历史<ul><li>1.0</li><li>2.0</li><li>2.1</li><li>3.0</li></ul></li><li>怎么学CSS<ol><li>CSS是什么</li><li>CSS怎么用</li><li>CSS选择器（重难点）</li><li>美化网页（文字，阴影，超链接，列表，渐变）</li><li>盒子模型（重点）</li><li>浮动</li><li>定位</li><li>网页动画（特效）</li></ol></li></ul><h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><ul><li>层叠样式表(Cascading Style Sheets)，美化网页（字体，颜色，边距，高度，宽度，背景图片，网页）</li><li>发展史：<ul><li>CSS1.0：高耦合内联基础样式</li><li>CSS2.0：DIV+CSS，HTML和CSS结构分离的思想，网页变得简单，利于SEO</li><li>CSS2.1：浮动，定位</li><li>CSS3.0：圆角，阴影，动画…..有浏览器兼容性问题（IE6前端之殇）</li></ul></li></ul><h2 id="CSS快速入门"><a href="#CSS快速入门" class="headerlink" title="CSS快速入门"></a>CSS快速入门</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">规范语法：</span></span><br><span class="line"><span class="comment">选择器&#123;</span></span><br><span class="line"><span class="comment">属性1:属性值;</span></span><br><span class="line"><span class="comment">属性2:属性值;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CSS优势：<ul><li>内容和表现分离</li><li>网页结构表现统一，可以实现复用</li><li>样式十分丰富</li><li>建议使用独立于html的css文件</li><li>利用seo，容易被搜索引擎收录</li></ul></li></ul><h3 id="三种导入方式"><a href="#三种导入方式" class="headerlink" title="三种导入方式"></a>三种导入方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1. 行内样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>中华人民共和国<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2. 内部样式表--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>内部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--使用内部样式表引入CSS--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3. 外部样式表--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--链接式:推荐使用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--导入式:CSS2.1特有的--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>);</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>三种样式表的<strong>优先级</strong>：<strong>就近原则</strong></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><strong>作用：选择页面上的某一个或者某一类元素</strong></p><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--会选择页面上所有的这个标签的元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>The People&#x27;s Republic Of China<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--会选择页面上所有该类的元素，即可以复用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.redClass</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;redClass&quot;</span>&gt;</span>The People&#x27;s Republic Of China<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;redClass&quot;</span>&gt;</span>中华人民共和国<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--会选择页面上所有该ID的元素,ID全局唯一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#buleClass</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#redClass</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;blueClass&quot;</span>&gt;</span>美利坚合众国<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;redClass&quot;</span>&gt;</span>中华人民共和国<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>三种基础选择器的优先级：</strong>ID选择器 &gt; Class选择器 &gt; 标签选择器</p><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 后代选择器：在某个元素里面的所有</span></span><br><span class="line"><span class="comment">2. 子选择器：后一代，子女</span></span><br><span class="line"><span class="comment">3. 相邻兄弟选择器：同父母的后面那个兄弟元素</span></span><br><span class="line"><span class="comment">4. 通用选择器：当前选中元素的向下所有兄弟元素</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/*后代选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*子选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*相邻兄弟选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.choosed</span>+<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*通用选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.choosed</span>~<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: grey;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;choosed&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="伪类选择器-amp-伪元素选择器"><a href="#伪类选择器-amp-伪元素选择器" class="headerlink" title="伪类选择器 &amp; 伪元素选择器"></a>伪类选择器 &amp; 伪元素选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">伪类选择器</span></span><br><span class="line"><span class="comment">是用来选择某个类，或者说，选择的是某个类的状态。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*ul的第一个子元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*ul的最后一个子元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*只选中p1*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*选中当前元素的父级的第一个子元素，如果在p1前加一个非p的标签则选不上p1*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*选择当前元素中的父级的第一个和当前元素同类型的子元素*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*a标签伪类选择器*/</span></span><br><span class="line"><span class="comment">/*鼠标未点击*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>    &#123;<span class="attribute">color</span>:blue;&#125;</span><br><span class="line"><span class="comment">/*鼠标点击后*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:blue;&#125;</span><br><span class="line"><span class="comment">/*鼠标悬浮*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>   &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="comment">/*鼠标摁住未释放*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  &#123;<span class="attribute">color</span>:yellow;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">伪元素选择器</span></span><br><span class="line"><span class="comment">是用来在文档中插入假象的元素。CSS2.1的写法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*首字母和首行*/</span></span><br><span class="line"><span class="selector-pseudo">:first</span>-letter</span><br><span class="line"><span class="selector-pseudo">:first</span>-line</span><br><span class="line"></span><br><span class="line"><span class="comment">/*之前和之后*/</span></span><br><span class="line">:before</span><br><span class="line">:after</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>最好用的一种选择器：相当于把class选择器和id选择器结合了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*存在id属性的元素:属性名   [属性名=属性值(可使用正则)]*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;links&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        =:绝对等于</span></span></span><br><span class="line"><span class="comment"><span class="css">        *=:包含</span></span></span><br><span class="line"><span class="comment"><span class="css">        ^=:以...开头</span></span></span><br><span class="line"><span class="comment"><span class="css">        $=:以...结尾</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;frist&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;test&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fourth&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fifth&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sixth&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/a.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;seventh&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eighth&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ninth&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abcd.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item last&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tenth&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字体-amp-文本-等-美化"><a href="#字体-amp-文本-等-美化" class="headerlink" title="字体 &amp; 文本 等 美化"></a>字体 &amp; 文本 等 美化</h2><ol><li>有效传递页面信息</li><li>美化网页，页面漂亮能吸引用户</li><li>凸显网页主题</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>重点要突出的字用span标签套起来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">欢迎学习<span class="tag">&lt;<span class="name">span</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*字体*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: 楷体;</span></span><br><span class="line"><span class="css">        <span class="comment">/*颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*大小*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*粗细*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">        <span class="comment">/*集合font*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">font</span>: font-style || font-variant || font-weight || font-size || line-height || font-family</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>故事介绍<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    尘世之锁是《原神》中的一件五星法器，只能通过祈愿获得。尘世之锁原属于尘之魔神归终，归终具有超越众多仙神的智慧，她总是与岩之神摩拉克斯一同行动，想要同摩拉克斯一起建设璃月。而最终她未能和摩拉克斯一同见证璃月的安宁与繁华。尘世之锁作为盟约的信物，一直留在岩之神的手中。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这是一个表面被71%的海水覆盖着的蓝色星球，人类在这片碧蓝色之中出生、成长、孕育和发展属于自己的文明。然而，伴随着它们的，还有不断膨胀的野心和欲望。表面风平浪静的世界格局之下，历史的暗流涌动。终于，未知的敌人在海洋中出现，面对敌方压倒性的战力，各个阵营却仍然各自为战，最终换来的结果亦是惨痛的：人类失去了90%以上的海域控制权，科技和生活水平急速倒退。人类对于海洋以及未知的敌人产生了深深的阴影，并且将那些将他们拖入深海黑暗之中的怪物称之为『塞壬』 。数十年之后，各大阵营为了夺回曾经的辉煌，终于摒弃前嫌，联合创建了第三方军事组织『碧蓝航线』 。碧蓝航线的宗旨在于：集结并共享来自来自世界各大阵营的科技与资源，建造出能够与塞壬抗衡的新锐部队，夺回海域的控制权。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ol><li><p>颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>);<span class="comment">/*最后是浓度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>首行缩进</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>行高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">10px</span>;<span class="comment">/*和height一致就可以单行文本垂直居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>装饰</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;<span class="comment">/*下划线*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="comment">/*text-shadow: h-shadow v-shadow blur color*/</span></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他样式"><a href="#其他样式" class="headerlink" title="其他样式"></a>其他样式</h3><ol><li><p>列表美化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    可以按顺序设置如下属性：</span></span><br><span class="line"><span class="comment">list-style-type:none,disc,circle,square,decimal...</span></span><br><span class="line"><span class="comment">list-style-position</span></span><br><span class="line"><span class="comment">list-style-image</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">list-style</span>: square inside <span class="built_in">url</span>(<span class="string">&#x27;/i/arrow.gif&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>背景 &amp; 渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    可以设置如下属性：</span></span><br><span class="line"><span class="comment">    背景颜色background-color</span></span><br><span class="line"><span class="comment">背景图像位置background-position</span></span><br><span class="line"><span class="comment">背景图片尺寸background-size</span></span><br><span class="line"><span class="comment">如何重复background-repeat</span></span><br><span class="line"><span class="comment">规定背景图片的定位区域background-origin</span></span><br><span class="line"><span class="comment">规定背景图片的绘制区域background-clip</span></span><br><span class="line"><span class="comment">    图像是否固定or随着页面滚动background-attachment</span></span><br><span class="line"><span class="comment">背景图片地址background-attachment</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#00FF00</span> <span class="built_in">url</span>(<span class="string">bgimage.gif</span>) no-repeat fixed top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210109165022.gif" style="zoom:80%;" /><ol><li><p><strong>border：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/*body默认有一个8px的margin,一般先干掉他*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*一般开发的时候会专门一个reset.css文件*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*border: 粗细,样式,颜色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>margin &amp; padding：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*auto表示自动，&quot;margin： 20px auto；&quot;就会使浏览器根据窗口大小自适应地使定宽块状元素左右居中显示*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*顺序是上右下左*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*两个是上下，左右*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*三个是上，下，左右*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>圆角边框 &amp; 阴影</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-id">#app</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>:<span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="css">           <span class="comment">/*四个值：左上角、右上角、右下角、左下角</span></span></span><br><span class="line"><span class="comment"><span class="css">           两个值：左上右下对角线，右上左下对角线*/</span></span></span><br><span class="line"><span class="css">           <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">           <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">           向 div 元素添加阴影：</span></span></span><br><span class="line"><span class="comment"><span class="css">           box-shadow: h-shadow v-shadow blur spread color inset;</span></span></span><br><span class="line"><span class="comment"><span class="css">           */</span></span></span><br><span class="line"><span class="css">           <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span></span><br><span class="line"><span class="css">       &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：<strong>margin和text-align的区别：</strong></p><ol><li><p>text-align:center 设置文本或img标签等一些内联对象（或与之类似的元素）的居中。</p></li><li><p>margin:0 auto 设置块元素（或与之类似的元素）的居中。</p><p>margin:0 auto；在不同场景下<strong>生效条件</strong>如下：</p><p>​    <strong>块级元素：</strong>给定要居中的块级元素的宽度。</p><p>​    <strong>行内元素：</strong>①设置display:block；②给定要居中的行内元素的宽度。（行内元素设置成块级元素后可以对其宽高进行设置）</p><p>​    <strong>行内块元素：</strong>设置display:block。（如input、button、img等元素，自带宽度可以不用设置其宽度）</p></li></ol><h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><h3 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h3><h4 id="块级元素（block-level）"><a href="#块级元素（block-level）" class="headerlink" title="块级元素（block-level）"></a>块级元素（block-level）</h4><p>块元素会独自占据一整行，或者多行，可以任意设置其大小尺寸，是用于搭建网页布局的必须部分，使网页结构更加紧凑合理。</p><ul><li>总是另起一行（特立独行）</li><li>可以设置其宽度、高度，内外边距</li><li>在不手动设置宽度的情况下，宽度默认为所在容器的100%（即容器宽度）</li><li>可以容纳行内元素和其他块元素。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块级元素有：<span class="tag">&lt;<span class="name">div</span>&gt;</span>/<span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>/<span class="tag">&lt;<span class="name">p</span>&gt;</span>/<span class="tag">&lt;<span class="name">ul</span>&gt;</span>/<span class="tag">&lt;<span class="name">table</span>&gt;</span>等，其中<span class="tag">&lt;<span class="name">div</span>&gt;</span>是最常用最典型的块级元素。</span><br></pre></td></tr></table></figure><h4 id="行内元素（inline-level）"><a href="#行内元素（inline-level）" class="headerlink" title="行内元素（inline-level）"></a>行内元素（inline-level）</h4><p>行内元素也称为内联元素，行内元素不占有独立区域，其大小仅仅被动的依赖于自身内容的大小（例如文字和图片），所以一般不能随意设置其宽高、对齐等属性。常用于控制页面中文本的样式。</p><ul><li>总是和相邻的行内元素在同一行上（物以类聚）</li><li>设置宽高无效，水平方向的padding和margin属性可以设置，但是垂直方向上的无效。</li><li>默认宽度是他自身内容的宽度。</li><li>行内元素只能容纳其他行内元素或者文本。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>比较特殊，可以放块级元素，但是链接里面不能再放链接。</span><br></pre></td></tr></table></figure><h4 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h4><p>普遍的规则里总有那么几个不一样的，在行内元素中就有那么几个特殊标签，比如<code>&lt;img&gt;/&lt;input&gt;/&lt;td&gt;</code>,可以给他们设置宽高、对齐属性，我们把这样特殊的一类标签称为行内块元素。行内块元素综合了块元素和行内元素的不同特点。</p><ul><li>和相邻行内元素在同一行，但是之间会有空白缝隙。</li><li>默认宽度是他本身内容的宽度。</li><li>宽度、高度、行高、外边距以及内边距都可以手动设置。</li></ul><h4 id="标签显示模式转换：displey"><a href="#标签显示模式转换：displey" class="headerlink" title="标签显示模式转换：displey"></a>标签显示模式转换：displey</h4><ul><li>块元素——&gt;行内元素 ： display:inline;</li><li>行内元素——&gt;块： display:block;</li><li>块、行内元素——&gt;行内块： display: inline-block;</li><li>元素不会显示：display:none;</li></ul><h3 id="文档流-1"><a href="#文档流-1" class="headerlink" title="文档流"></a>文档流</h3><ul><li><p><strong>文档流：</strong></p><p>将窗体自上而下分成一行一行，众多盒子模型在每行中按从左至右依次排放元素，称为文档流。</p></li><li><p><strong>脱离文档流：</strong></p><p>元素脱离文档流之后，将不再在文档流中占据空间，而是处于浮动状态。当一个元素脱离文档流后，依然在文档流中的其他元素将忽略该元素并填补其原先的空间。</p></li><li><p><strong>脱离文档流的三种方法：</strong></p><ul><li><p>float:left/right;</p><p>使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的文本依然会为这个元素让出位置，环绕在该元素的周围。</p></li><li><p>position: absolute;</p><p>因为使用absolute脱离文档流后的元素，是相对于该元素的父类（及以上，如果直系父类元素不满足条件则继续向上查询）元素进行定位的，</p><p>并且这个父类元素的position必须是非static定位的（static是默认定位方式）。</p></li><li><p>position: fixed;</p><p>完全脱离文档流，相对于浏览器窗口进行定位。（相对于浏览器窗口就是相对于html）。</p></li></ul></li><li><p><strong>浮动：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"><span class="selector-id">#a</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line"><span class="attribute">background</span>: red; </span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="comment">/*清除其他浮动元素对自己的影响：left针对左浮动，right针对右浮动，both同时针对*/</span></span><br><span class="line">    <span class="attribute">clear</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;<span class="selector-tag">a</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;<span class="selector-tag">b</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="父级边框塌陷问题"><a href="#父级边框塌陷问题" class="headerlink" title="父级边框塌陷问题"></a>父级边框塌陷问题</h3><p><strong>子元素浮动后脱离文档流导致的父级边框塌陷问题的解决方法：</strong></p><ol><li><p>增加父级元素的高度</p></li><li><p>父元素中增加一个空div标签，然后清除浮动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启BFC</p><p>开启元素的BFC后，元素将会有以下特性：</p><ol><li>垂直外边距<strong>不会和子元素重叠</strong></li><li>不会被浮动元素所覆盖</li><li><strong>可以包含浮动的子元素</strong></li></ol><p>如何开启BFC：</p><ol><li>设置元素浮动</li><li>设置元素绝对定位</li><li>设置元素为inline-block</li><li>将overflow设置为一个非visible的值（推荐：将overflow设置为hidden是副作用最小的开启BFC的方法）</li></ol></li><li><p>父类添加一个伪类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*解决父子元素垂直外边距重叠问题*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span>:before&#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*解决父元素高度塌陷问题*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span>:after&#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同时解决父子元素垂直外边距重叠问题</span></span><br><span class="line"><span class="comment">和父级高度塌陷问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span>:before,</span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>相对于<strong>自己原来的位置</strong>进行偏移，原来的位置还是被保留，元素仍然处于文档流中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/*上下左右：相对自己原来位置*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位的元素的位置相对于<strong>最近的已定位祖先元素</strong>，如果元素没有已定位的祖先元素，那么它的位置相对于<strong>最初的包含块</strong>。</p><p>只能在相对的那个祖先元素<strong>范围内</strong>移动，元素绝对定位后已经脱离文档流</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/*上下左右：相对最近已定位祖先元素*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>相对于浏览器窗口进行定位，脱离原来的文档流</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="comment">/*上下左右:相对浏览器窗口*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Z-index-amp-透明度"><a href="#Z-index-amp-透明度" class="headerlink" title="Z-index &amp; 透明度"></a>Z-index &amp; 透明度</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/*设置图层显示优先级，范围0-999</span></span><br><span class="line"><span class="comment">    前提是必须先开启定位，即postion不能是static</span></span><br><span class="line"><span class="comment">    父元素层级再高也不会盖过子元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*两种方式设置透明度*/</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    <span class="comment">/*IE8以及更早版本支持*/</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">Alpha</span>(opacity=<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>css3动画主要常用的属性有三种</p><ol><li>变形（transform）</li><li>转换（transition）</li><li>动画（animation）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*animation栗子*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line"><span class="attribute">animation</span>:mymove <span class="number">5s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*背景颜色逐渐地从红色变化到蓝色：*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> mymove&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">background-color</span>:red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background-color</span>:blue;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h2><p>CSS hack是通过在CSS样式中加入一些特殊的符号，让不同的浏览器识别不同的符号（什么样的浏览器识别什么样的符号是有标准的，CSS hack就是让你记住这个标准），<strong>解决兼容性问题</strong>。</p><ol><li>条件hack</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 6]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>只在ie6中显示的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[endid]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>只在小于ie9中显示的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[endid]--&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>属性hack</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/*属性前加_只有ie6及以下才认识*/</span></span><br><span class="line">    _background-<span class="attribute">color</span>: red;</span><br><span class="line">    <span class="comment">/*属性前加*只有ie7及以下才认识*/</span></span><br><span class="line">    *<span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有很多hack，有需求的时候百度就行了。</p><p>但是css的hack不到万不得已最好不要使用，因为维护起来很麻烦。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML快速回顾</title>
      <link href="/2021/01/08/HTML%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE/"/>
      <url>/2021/01/08/HTML%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="初识HTML"><a href="#初识HTML" class="headerlink" title="初识HTML"></a>初识HTML</h2><ul><li><p>Hyper Text Markup Language</p></li><li><p>超文本：文字，图片，音频，视频，动画等</p></li><li><p>HTML5：</p><ul><li>HTML5和CSS3是未来发展趋势</li></ul></li><li><p>W3C：World Wide Web Consortium万维网联盟，Web技术领域最权威和具影响力的<strong>国际中立性技术标准机构</strong>，W3C标准包括：</p><ul><li><strong>结构化</strong>标准语言（HTML，XML）</li><li><strong>表现</strong>标准语言（CSS）</li><li><strong>行为</strong>标准（DOM，ECMAScript）</li></ul></li><li><p>HTML基本结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Frist Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        My First Page</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><body>、</body>等成对的标签，分别叫**开放标签**和**闭合标签**</li></ul><h2 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--DOCTYPE告诉浏览器使用什么规范--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="comment">&lt;!--中文网站设置为zh-CN--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述网站一些信息，可用做seo--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面关键词，用于被搜索引擎收录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;学习，记录&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面描述，用于搜索引擎收录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;excerpt&quot;</span> <span class="attr">content</span>=<span class="string">&quot;我的第一个网页&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于控制页面缩放--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>标题标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>段落标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>换行标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>水平线标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字体样式标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注释和特殊符号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span>空格</span><br><span class="line"><span class="symbol">&amp;gt;</span>大于</span><br><span class="line"><span class="symbol">&amp;lt;</span>小于</span><br><span class="line"><span class="symbol">&amp;copy;</span>版权符号</span><br><span class="line"><span class="comment">&lt;!--更多的符号可以百度--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="图像，超链接，网页布局"><a href="#图像，超链接，网页布局" class="headerlink" title="图像，超链接，网页布局"></a>图像，超链接，网页布局</h2><ul><li><p>常见图像格式：JPG，GIF，PNG，BMP</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替代文字&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;x&quot;</span> <span class="attr">height</span>=<span class="string">&quot;y&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>链接标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;path&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口位置&quot;</span>&gt;</span>text/img<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">target:</span></span><br><span class="line"><span class="comment">blank新标签网页中打开</span></span><br><span class="line"><span class="comment">parent父框架集中打开</span></span><br><span class="line"><span class="comment">self当前网页中打开（默认）</span></span><br><span class="line"><span class="comment">top在整个窗口中打开</span></span><br><span class="line"><span class="comment">framename指定的框架中打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接：通过name跳--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不同页面也可以锚链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx.html#point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--邮件链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:yangfanjack1024@qq.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--QQ链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=你的qq号&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://wpa.qq.com/pa?p=2:你的qq号:52&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;点击这里给我发消息&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击这里给我发消息&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h3><ul><li>块元素：<ul><li>无论内容多少，该元素独占一行</li><li>p标签，h1-h6标签，div元素……</li></ul></li><li>行内元素：<ul><li>内容撑开宽度，左右都是行内元素的可以旁在一行</li><li>a元素，strong元素，em元素，span标签……</li></ul></li></ul></li></ul><h2 id="列表，表格，媒体元素"><a href="#列表，表格，媒体元素" class="headerlink" title="列表，表格，媒体元素"></a>列表，表格，媒体元素</h2><ul><li><p><strong>列表：</strong></p><ul><li>信息资源结构化，条理化地展示出来，方便浏览者快速获得相应信息</li><li>分类：<ul><li>无序列表</li><li>有序列表</li><li>自定义列表</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>设计模式<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>表格</strong></p><ul><li>简单通用，结构稳定</li><li>基本结构：<ul><li>单元格</li><li>行</li><li>列</li><li>跨行</li><li>跨列</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mariah Carey<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>female<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sam Smith<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>male<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--跨行 or 跨列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>歌手信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>欧美歌手<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mariah Carey<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>female<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sam Smith<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>male<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>视频 &amp; 音频</p><p>video and audio</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频资源路径&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音频资源路径&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h3><ul><li><strong>header</strong>：标题头部区域内容</li><li><strong>footer</strong>：标记脚步区域内容</li><li><strong>section</strong>：Web页面中的一块独立区域</li><li><strong>article</strong>：独立的文章内容</li><li><strong>aside</strong>：相关内容或应用</li><li><strong>nav</strong>：导航类辅助内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    网页主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="iframe内联框架-amp-框架集"><a href="#iframe内联框架-amp-框架集" class="headerlink" title="iframe内联框架 &amp; 框架集"></a>iframe内联框架 &amp; 框架集</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">name</span>=<span class="string">&quot;框架标识名&quot;</span> <span class="attr">frameboder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;path&quot;</span> <span class="attr">target</span>=<span class="string">&quot;框架标识名&quot;</span>&gt;</span>跳转到内联框架<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--iframe对seo不友好，一般不建议使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--frameset可以使用，能用来做网页布局--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;25%,50%,25%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_a.htm&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_b.htm&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_c.htm&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单及表单应用"><a href="#表单及表单应用" class="headerlink" title="表单及表单应用"></a>表单及表单应用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">action：表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method：</span></span><br><span class="line"><span class="comment">get方式提交：url中可以看见我们提交的信息，高效但不安全，只能传输少量数据</span></span><br><span class="line"><span class="comment">post方式提交：比较安全，可以传输大量数据</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;path&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get/post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输入类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span> = <span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;id&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--选择类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span>  <span class="attr">value</span> = <span class="string">&quot;1&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;false&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span> = <span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">&quot;image/gif, image/jpeg&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按钮类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;纯按钮&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span> = <span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;图片资源路径&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>无行为<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>默认是submit行为<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--下拉框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文本域标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">&quot;introduce&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;500&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--label：输入标签的文字描述标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex1&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">&quot;sex1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span>  <span class="attr">value</span> = <span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--带验证的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--滑块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--搜索--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;searchString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>表单的限制（三个属性）：</strong><ul><li>隐藏域：<code>hidden</code></li><li>只读：<code>readonly</code></li><li>禁用：<code>disabled</code></li></ul></li></ul><h2 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h2><ul><li>为啥要进行表单验证？<ul><li>保证数据安全性</li><li>减轻服务器压力</li></ul></li><li><strong>初级验证（三个属性）：</strong><ul><li><code>placeholder</code>：提示信息</li><li><code>required</code>：非空判断</li><li><code>pattern</code>：正则表达式判断</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门指南</title>
      <link href="/2021/01/05/vue%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2021/01/05/vue%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>vue：</strong>一款渐进式（逐步实现新特性）JavaScript框架。其特性综合了Angular(<strong>模块化MVVM</strong>)和React(<strong>虚拟DOM</strong>)的优点</p></li><li><p><strong>Ajax：</strong>前端通信框架，因为Vue的边界很明确，就是为了处理DOM，所以不具备通信能力，需要额外使用一个通信框架和服务器交互；也可以直接选择使用jQuery提供的Ajax同行功能(只是因为为了使用Ajax要完全导入jQuery的包显得很笨重)</p></li><li><p><strong>前端MVVM框架：</strong></p><ul><li>后端中的MVC框架中V：视图层；C：控制层；M：模型层</li><li>传统的使用后端模板引擎渲染的方式，V就是指的jsp，freemarker等技术。</li><li>前后端分离的概念渐渐出现，特别是在前端框架出现后，前端根据后端的MVC模式，也对前端进行了层次划分，对原来的V转化前端独立渲染。并且也将V扩展为前端自己的MVC三层：V层，M层，VM层。也就是MVVM模式<ul><li>V：view</li><li>M：data</li><li>VM：数据双向绑定</li></ul></li></ul></li><li><p><strong>前端UI框架：</strong></p><ul><li>Ant-Desgin：基于React的UI框架</li><li>ElementUI，iview，ice：基于Vue的UI框架</li><li>Bootstrap：Twitter推出的前端开发工具包</li><li>AmazeUI：HTML5跨屏前端框架</li></ul></li><li><p><strong>JavaScript构建工具：</strong></p><ul><li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性</li><li>WebPack：模块打包器</li></ul></li><li><p><strong>NodeJS</strong></p><ul><li>前端人员为了方便开发也需要掌握一定的后端技术，但是java后端异常庞大。所以为了方便前端人员开发后台应用，出现了NodeJS这样的技术。</li><li>NodeJS由于架构问题和笨重的node_modules，作者已经放弃，不久的将来，Deno可能将会取代NodeJS</li><li>Express：NodeJS框架</li><li>Koa：Express简化版</li><li>NPM：项目综合管理工具</li><li>YARN：NPM的替代方案，类似于Maven和Gradle的关系</li></ul></li><li><p><strong>vue-element-admin:</strong></p><p>这是一个集成大部分功能的后台管理系统框架，也就是说大多数的组件都帮我们写好了，他是基于vue-element进行开发布局的。</p></li></ul><h2 id="MVVM框架"><a href="#MVVM框架" class="headerlink" title="MVVM框架"></a>MVVM框架</h2><ul><li>源自经典的MVC模式，MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102223139.png" style="zoom: 67%;" /><h3 id="具体分层："><a href="#具体分层：" class="headerlink" title="具体分层："></a>具体分层：</h3><ul><li>Model：模型层，这里表示JavaScript对象</li><li>View：视图层，这里表示DOM</li><li>ViewModel：连接视图和数据的中间件，Vue.js就是MVVM中的ViewModel层的实现者</li></ul><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><ul><li>MVVM架构中，不允许数据和视图直接通信，只能通过ViewModel通信，<strong>而ViewModel就是定义了一个Observer观察者</strong></li><li>ViewModel能观察到数据的变化，并对视图相应内容进行更新</li><li>ViewModel能监听试图的变化，并能够通知数据发生改变</li></ul><p>Vue.js的核心是：<strong>DOM监听</strong>&amp;<strong>数据绑定</strong></p><ul><li><strong>虚拟DOM：</strong>Vue的ViewModel绑定了数据和视图两层，所以无需操作DOM，工作知识修改DOM中的某些数据而已。这让前端资源大大节省了。</li><li>View层展现的不是Model层的数据，而是ViewModel的数据，由ViewModel负责和Model层交互，这就完全解耦了View层和Model层，这个解耦是至关重要的，它是前后端分离的关键。</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102224833.png" style="zoom: 67%;" /><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><p><strong>{ { } } &amp; v-text,v-cloak &amp; v-html</strong></p><p>这就是前端的浏览器模板引擎渲染生成html页面。Vue在背后做了大量工作，现在数据和DOM已经建立了关系，所有东西都是响应式的。在控制台操作对象属性后界面能实时更新。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--创建一个容器，使用Vue对象绑定该容器就可以控制这个容器中的所有DOM元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--插值表达式中可以写任意合法的JS表达式--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--插值表达式会有闪烁问题，用v-cloak解决--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;message2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;<span class="comment">//这个对象app就是MVVM中的VM，核心，提供了双向数据绑定的能力</span></span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,<span class="comment">//和要控制的容器绑定，MVVM中的V视图层</span></span><br><span class="line">  <span class="attr">data</span>: &#123;<span class="comment">//要渲染的一些数据，MVVM中的M数据层</span></span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    <span class="attr">message2</span>: <span class="string">&#x27;&lt;h1&gt;Hello&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-bind-amp-v-if-v-else-amp-v-for"><a href="#v-bind-amp-v-if-v-else-amp-v-for" class="headerlink" title="v-bind &amp; v-if,v-else &amp; v-for"></a>v-bind &amp; v-if,v-else &amp; v-for</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在html原始标签属性前加上v-bind:可以将属性和vue的data数据单向绑定，也可以简写只留一个冒号--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-bind中要用表达式的拼接需要用引号包裹起来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>v-bind：</strong>v-前缀的被成为<strong>指令</strong>，它们是vue提供的一种<strong>特殊标签属性</strong>。它们会在渲染的DOM上应用特殊的响应式行为。意思就是：将这个元素的节点的title特性和vue实力的message属性保持一致</p></li><li><p><strong>判断</strong>和<strong>循环</strong>指令：<strong>v-if</strong>和<strong>v-else</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;ok==&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;ok=&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只要涉及到v-for这种循环，推荐给每一项都加上:key属性，并且:key属性只接受number或string类型唯一的数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;i&#125;&#125;-----&#123;&#123;item.message&#125;&#125;  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">ok</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#vm&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>:[</span><br><span class="line">        &#123;<span class="attr">message</span>: <span class="string">&#x27;哈哈哈&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">message</span>: <span class="string">&#x27;嘿嘿嘿&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>一般而言，v-if 有更高的切换消耗而v-show 有更高的初始渲染消耗。因此如果需要频繁切换,v-show更好，如果在运行时条件不改变v-if较好</p></li></ul><h3 id="事件v-on"><a href="#事件v-on" class="headerlink" title="事件v-on"></a>事件v-on</h3><ul><li>事件一定要定义在Vue对象中的methods中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--简写--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHi2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;人生如梦&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//methods属性中可以定义多个事件处理函数</span></span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.message);<span class="comment">//要访问data中的值要用this,this代表vm实例app</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//简写</span></span><br><span class="line">    <span class="function"><span class="title">sayHi2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-model实现双向绑定"><a href="#v-model实现双向绑定" class="headerlink" title="v-model实现双向绑定"></a>v-model实现双向绑定</h3><p><strong>v-bind</strong> 产生的效果<strong>不含有双向绑定</strong>，所以 :value 的效果就是让 input的value属性值等于 data.name 的值，而 <strong>v-model</strong> 的效果是使input和 data.body <strong>建立双向绑定</strong>，因此首先 data.body 的值会给input的value属性，其次，当input中输入的值发生变化的时候，data.body 还会跟着改变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--vue中，只有v-model实现了事项绑定--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--vue中，v-model只能应用到表单元素中--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>双向数据绑定目的：</strong>为了修改表单后不用自己操作DOM元素获取表单元素的值。</li><li><strong>单项数据绑定目的：</strong>为了不用自己操作DOM去渲染数据。</li></ul><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>@click**.stop**:组织事件冒泡</li><li>@click**.prevent**:组织标签默认行为，例如a的href，form的submit</li><li>@click**.capture**:将默认的冒泡模式改为捕获模式</li><li>@click**.self**:只有事件在该元素身上触发才会调用</li><li>@click**.once**:事件只触发一次</li></ul><h3 id="vue中使用类样式的4种方式"><a href="#vue中使用类样式的4种方式" class="headerlink" title="vue中使用类样式的4种方式"></a>vue中使用类样式的4种方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--red，small,thin,italic等是css样式类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;red&#x27;,&#x27;small&#x27;]&quot;</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;red&#x27;,isThin?&#x27;thin&#x27;:&#x27;&#x27;]&quot;</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;变瘦&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isThin=true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;red&#x27;,&#123;thin:isThin&#125;]&quot;</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red:true,italic:true,thin:isThin&#125;&quot;</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">      isThin: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>一般最常用第二个和第三个实现CSS类的动态切换</strong></li></ul><h3 id="vue中行内style样式"><a href="#vue中行内style样式" class="headerlink" title="vue中行内style样式"></a>vue中行内style样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color:&#x27;red&#x27;,&#x27;font-size&#x27;:&#x27;italic&#x27;&#125;&quot;</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;node_modules/bootstrap/dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Id:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意键盘keyup修饰符:enter，还有tab,delete,space,esc,up,down,left,right--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>按照商品名称检索商品:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;searchx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>CTime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in searchx()&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.ctime &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">keyword</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">list</span>: [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;丰田&#x27;</span>,<span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.list.push(&#123;<span class="attr">id</span>:<span class="built_in">this</span>.id,<span class="attr">name</span>:<span class="built_in">this</span>.name,<span class="attr">ctime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.id=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.name=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">del</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="built_in">this</span>.list.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(<span class="built_in">this</span>.list[i].id==id)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.list.splice(i,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">searchx</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result=[];</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.list.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(<span class="built_in">this</span>.list[i].name.indexOf(<span class="built_in">this</span>.keyword)!=-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            result.push(<span class="built_in">this</span>.list[i]);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li><p>Vue.js中允许你自定义过滤器，可以用作常见的文本格式化</p></li><li><p>可以用在两个地方：插值表达式 &amp; v-bind 表达式</p></li><li><p>自定义全局过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--插值表达式中加入管道符--&gt;</span></span><br><span class="line">&#123;&#123;item.ctime | formatDate&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!--设置全局过滤器--&gt;</span></span><br><span class="line">Vue.filter(&#123;</span><br><span class="line">&quot;formatDate&quot;,</span><br><span class="line">function(data)&#123;//这个回调函数的第一个参数默认永远是管道符前面的那个值</span><br><span class="line">    return moment(data).format(&quot;YYYY-MM-DD HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>私有过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&quot;春节&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">      <span class="attr">addStr</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> data+<span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局和私有过滤器如果重名，会先用自己私有的。</p></li></ul><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局自定义获得焦点的on-focus指令</span></span><br><span class="line"><span class="comment">//注意：Vue自定义指令的名称中，不需要v-前缀，但是在调用自定义指令时，需要在前面加上v-前缀</span></span><br><span class="line">Vue.direct(<span class="string">&#x27;focus&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//参数中的第一个参数永远是被绑定的那个元素</span></span><br><span class="line">    <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;<span class="comment">//当指令绑定的元素被vue实例解析时执行</span></span><br><span class="line">        binding.name;<span class="comment">//获取指令的名称</span></span><br><span class="line">        binding.value;<span class="comment">//获取指令等号后面的值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;<span class="comment">//当指令绑定的元素被插到父节点时调用</span></span><br><span class="line">        el.focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义私有属性</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">filters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="attr">bold</span>: &#123;</span><br><span class="line">            <span class="function"><span class="title">bind</span>(<span class="params">el,binding</span>)</span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">inserted</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li>这是一个有计算能力的属性，用来代替复杂表达式，计算实际上就是一个函数</li><li>实际上是一个<strong>能将计算结果缓存起来的属性</strong>（将行为转化成了静态的属性），可以理解为缓存。</li><li>computed和methods的区别是：一个是方法，一个是属性。</li><li>在浏览器中f12调试：<ul><li>vm.currentTime1：每次打印结果都不一样</li><li>vm.currentTime2：每次打印结果都和第一次一样.只有currentTime2计算中有东西发生了改变，才会重新刷新数据，这和缓存一模一样。</li></ul></li><li>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销。尤其是高并发系统。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime1 &#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime2 &#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">currentTime1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">currentTime2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><ul><li>创建阶段：一个实例整个生命只执行一次</li><li>运行阶段：一个实例在整个生命周期中根据data改变与否有选择地执行0到多次</li><li>销毁阶段：一个实例整个生命只执行一次</li><li>在实例每个阶段中会伴随各种事件，这些事件统称为实例的 <strong>生命周期函数 / 生命周期钩子 / 生命周期事件</strong>，这些函数是vue自己执行，但是内容可能要自己写。</li><li>在new Vue()时，主要做了以下的事：<ol><li>初始化data和methods</li><li>根据数据在内存中渲染出一棵DOM树</li><li>把创建好的DOM树挂载到页面上显示给用户【创建页面结束】</li><li>根据data数据的变化，有选择性的渲染DOM树</li><li>把重新渲染的DOM树再次挂载到页面上，从而保持data界面的同步</li></ol></li><li>操作data和methods最早能在created中操作</li><li>操作DOM元素最早能在mounted中操作</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210104164956.png" style="zoom: 67%;" /><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">　　<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">　　<span class="attr">beforeCreate</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;before create&#x27;</span>)</span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="attr">created</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="attr">beforeMount</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;before mount&#x27;</span>)</span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="attr">mounted</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">　 &#125;,</span><br><span class="line">　　<span class="attr">beforeDestroy</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="attr">destroyed</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;destroyed&#x27;</span>)</span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="attr">beforeUpdate</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;before updated&#x27;</span>)</span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="attr">updated</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>)</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：最常用的生命周期函数是created函数，我们会在created钩子函数中：从服务器获取数据，并对数据进行初始化。</strong></p><h3 id="vue常用7大属性"><a href="#vue常用7大属性" class="headerlink" title="vue常用7大属性"></a>vue常用7大属性</h3><ol><li>el：指示vue编译器从什么地方开始解析vue的语法，可以说是一个占位符</li><li>data：组织从view中抽象出来的属性，可以说将视图的数据抽象出来放到data中</li><li>template：用来设置模板，会替换页面元素，包括占位符</li><li>methods：放置页面中的业务逻辑，js方法一般都放置在methods中</li><li>render：创建真正的Virtual Dom</li><li>computed：用来计算</li><li>watch：<ul><li>watch:function(new,old)()</li><li>监听data中数据的变化</li><li>两个参数，一个返回新值，一个返回旧值</li></ul></li></ol><h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><p>实际开发中，不会用以上方式开发组件，而是采用vue-cli创建.vue模板文件的方式开发，以上方法只是为了说明啥是组件。</p><p>组件实际上就是一个自己定义标签元素的工具</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comp-jack</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-jack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局组件注册</span></span><br><span class="line">Vue.component(<span class="string">&quot;comp-jack&quot;</span>,&#123;<span class="comment">//组件名字所有字母小写，不用驼峰命名法（如果两个单词，中间用-连接）</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;Hello&lt;/li&gt;&#x27;</span>,</span><br><span class="line">    <span class="comment">//组件中的data需要定义为函数的原因：</span></span><br><span class="line">    <span class="comment">//组件会被多次使用，多以data语法上必须是一个函数，每次使用时返回一个新的对象</span></span><br><span class="line">    <span class="comment">//组件要在Vue实例中使用，所以最后一定要创建Vue实例</span></span><br><span class="line">    <span class="comment">//组件中template的html语句中只能有一个根标签</span></span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部组件注册</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;组件名&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&quot;复用的html片段&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;<span class="comment">//return的对象，类似创建Vue时的data</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">methods</span>:&#123;</span><br><span class="line">                <span class="comment">//用于定义函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部组件注册的更合理的写法1（结构更加清晰）</span></span><br><span class="line"><span class="keyword">let</span> temp1 = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&quot;复用的html片段&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;<span class="comment">//return的对象，类似创建Vue时的data</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="comment">//用于定义函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> temp2 = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&quot;复用的html片段&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;<span class="comment">//return的对象，类似创建Vue时的data</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="comment">//用于定义函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;组件名1&quot;</span>: temp1,</span><br><span class="line">        <span class="string">&quot;组件名2&quot;</span>: temp2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部组件注册的更合理的写法1（结构更加清晰）</span></span><br><span class="line">&lt;template id=<span class="string">&quot;t1&quot;</span>&gt;</span><br><span class="line">      复用的html片段</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;组件名&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&quot;#t1&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;<span class="comment">//return的对象，类似创建Vue时的data</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">methods</span>:&#123;</span><br><span class="line">                <span class="comment">//用于定义函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jack</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:j</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jack</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">&quot;jack&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">props</span>: [<span class="string">&#x27;j&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123;j&#125;&#125;&lt;/li&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">               <span class="attr">items</span>: [<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Linux&quot;</span>,<span class="string">&quot;Windows&quot;</span>]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h4><ul><li>在实际页面开发中很多组件都是存在嵌套行为的</li><li>顶层的组件直接在Vue对象实例中注册</li><li>如果一个组件时组件的组件，那么它应该是在组件的components属性中注册，一次类推可以得到多层组件的嵌套</li><li><strong>注意：Vue中一切皆组件，最大的Vue实例实际也是一个组件</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-table</span>&gt;</span><span class="tag">&lt;/<span class="name">my-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;table-head&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;table-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Jack Yang<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>21<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Sam Smith<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>28<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-table&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span> <span class="attr">is</span>=<span class="string">&quot;table-head&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span> <span class="attr">is</span>=<span class="string">&quot;table-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tableHead = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#table-head&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> tableBody = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#table-body&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myTable = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#my-table&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;table-head&quot;</span>: tableHead,</span><br><span class="line">        <span class="string">&quot;table-body&quot;</span>: tableBody</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;my-table&quot;</span>: myTable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><p>一个复杂的界面一定有组件的嵌套，这时一定也会有组件之间通信的需求</p><h4 id="组件通信—父传子"><a href="#组件通信—父传子" class="headerlink" title="组件通信—父传子"></a>组件通信—父传子</h4><ul><li><strong>props：</strong>父组件向子组件正向传递参数通过props来实现</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-table</span> <span class="attr">v-bind:us</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-table</span> <span class="attr">v-bind:us</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-table&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;u in us&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; u.id &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; u.name &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; u.age &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTable = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#my-table&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&quot;us&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;my-table&quot;</span>: myTable</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;jack1&quot;</span>,<span class="attr">age</span>:<span class="number">11</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;jack2&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;jack3&quot;</span>,<span class="attr">age</span>:<span class="number">13</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="组件通信—子传父"><a href="#组件通信—子传父" class="headerlink" title="组件通信—子传父"></a>组件通信—子传父</h4><ul><li>父组件的模板中包含子组件，经常会出现子组件的状态发生改变时，要通知到父组件。所有的prop都是的父子prop之间i形成了<strong>单向下行绑定</strong>。父级prop更新会向下更新到子组件中。但是反过来不行</li><li>举个栗子：就是上面中，子组件接收到了us，如果在子组件中改变了us的值，但是父组件中的users不会更改。这种更新只能是上级影响下级，下级不能影响上级。</li><li><strong>$emit：</strong>子传父只能通过方法来传值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件标签中绑定一个自定义事件,事件处理函数定义在父组件上，并且函数的参数就是子组件的$emit传递来的数据的形参--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">counter</span> @自定义事件名=<span class="string">&quot;自定义事件处理函数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子组件中主动发射--&gt;</span></span><br><span class="line">methods: &#123;</span><br><span class="line">increment()&#123;</span><br><span class="line">方法处理代码;</span><br><span class="line">this.$emit(&quot;自定义事件名&quot;,传递的数据);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="父子通信实战："><a href="#父子通信实战：" class="headerlink" title="父子通信实战："></a>父子通信实战：</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210105214237.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-table</span> <span class="attr">:us</span>=<span class="string">&quot;users&quot;</span> @<span class="attr">emit-show-user</span>=<span class="string">&quot;handleShowUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update-form</span> <span class="attr">:u</span>=<span class="string">&quot;user&quot;</span> @<span class="attr">emit-update-user</span>=<span class="string">&quot;handleUpdateUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">update-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in us&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; user.id &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;emitUser(index)&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;update-form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;handleSubmit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span></span><br><span class="line">            名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;u.name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;u.age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> myTable=&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&quot;#my-table&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">props</span>: [<span class="string">&quot;us&quot;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">emitUser</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$emit(<span class="string">&quot;emit-show-user&quot;</span>,<span class="built_in">this</span>.us[index]);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> updateForm=&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&quot;#update-form&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">props</span>: [<span class="string">&quot;u&quot;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handleSubmit</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$emit(<span class="string">&quot;emit-update-user&quot;</span>,<span class="built_in">this</span>.u);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">users</span>: [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;Mariah&quot;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;Sam&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="javascript">                ],</span></span><br><span class="line"><span class="javascript">                <span class="attr">user</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;my-table&quot;</span>:myTable,</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;update-form&quot;</span>:updateForm</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handleShowUser</span>(<span class="params">u</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(u);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.user = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(u));</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handleUpdateUser</span>(<span class="params">u</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(u);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.users.forEach(<span class="function">(<span class="params">user,i,arr</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(user.id==u.id)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//vue监控不到直接通过下标修改元素的操作</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// arr[i]=u;</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.$set(arr,i,<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(u)));<span class="comment">//等同于arr[i]=u，但是可以被vue监控到</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>路由：让请求按照其地址到达目的地</li></ul><h3 id="web路由的发展"><a href="#web路由的发展" class="headerlink" title="web路由的发展"></a>web路由的发展</h3><ul><li><p>网站路由的发展实际上和前后端分离的发展是同步的：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106200711.png" style="zoom: 50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106200712.png" style="zoom: 50%;" /></li></ul><h3 id="Vue中路由的作用："><a href="#Vue中路由的作用：" class="headerlink" title="Vue中路由的作用："></a>Vue中路由的作用：</h3><ul><li><p>在Vue中的一个功能视图就是一个组件，Vue中的路由解决的是但页面中组件的显示切换问题。比如：一个页面中有两个超链接“登录”,“注册”,点击两个连接分别显示对应的表单</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106201152.png" style="zoom: 67%;" /></li></ul><h3 id="第一个路由示例："><a href="#第一个路由示例：" class="headerlink" title="第一个路由示例："></a>第一个路由示例：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@3.0.1/dist/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用路由，确定组件切换后显示的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义组件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            Username：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            Password：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;register-form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            Username：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            Password：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            RePassword：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Register&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> loginForm = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&quot;#login-form&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> registerForm = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&quot;#register-form&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建路由对象，定义路由规则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> MyRouter = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">component</span>:loginForm&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&quot;register&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/register&quot;</span>,<span class="attr">component</span>:registerForm&#125;</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//在Vue实例中配置router</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">router</span>: MyRouter</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="router-link-amp-redirect"><a href="#router-link-amp-redirect" class="headerlink" title="router-link &amp; redirect"></a>router-link &amp; redirect</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时，在连接前不用加上#了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--进入页面默认跳到某个组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在路由对象中定义routes时候--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,<span class="attr">redirect</span>:<span class="string">&quot;/login&quot;</span>&#125;,<span class="comment">//进入/时，默认执行/login路由</span></span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">component</span>:loginForm&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;register&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/register&quot;</span>,<span class="attr">component</span>:registerForm&#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106204811.png" style="zoom:67%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--要使点击第二层的router-link后显示的内容在第二层的router-view里，而不是第一层的router-view里，需要在路由对象中定义routes的时候，将第二层的路由信息写在父路由信息中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,<span class="attr">redirect</span>:<span class="string">&quot;/login&quot;</span>&#125;,<span class="comment">//进入/时，默认执行/login路由</span></span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>:loginForm,</span></span><br><span class="line"><span class="javascript">            <span class="attr">children</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&quot;phoneLogin&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/phone&quot;</span>,<span class="attr">component</span>:phoneLoginForm&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&quot;accountLogin&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/account&quot;</span>,<span class="attr">component</span>:accountLoginForm&#125;,</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;register&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/register&quot;</span>,<span class="attr">component</span>:registerForm&#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h4><ul><li><p>导航路由地址里用<code>?name=jack&amp;age=18</code>传参，在组件中要获得参数，需要使用内置属性：<code>&#123;&#123;$route.query.name&#125;&#125;</code>,<code>&#123;&#123;$route.query.age&#125;&#125;</code></p></li><li><p>在router-link中还可以只用如下方式动态传参：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/login/account&#x27;,query:&#123;name:&#x27;Jack&#x27;,age:18&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a>params传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个:name代表他能动态地匹配数据</span></span><br><span class="line"><span class="comment">//属于restful风格（路径中包含一部分数据）</span></span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">&quot;product&quot;</span>,<span class="attr">path</span>:<span class="string">&quot;/product/:name&quot;</span>,<span class="attr">component</span>:myComponent&#125;</span><br><span class="line"><span class="comment">//通过如下方式获取</span></span><br><span class="line">&#123;&#123; $route.params.name &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>在router-link中可使用如下方式传参：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;product&#x27;,params:&#123;name:&#x27;Jack&#x27;&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程式的路由导航"><a href="#编程式的路由导航" class="headerlink" title="编程式的路由导航"></a>编程式的路由导航</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router.push(<span class="string">&quot;/login&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><ul><li>Axios是一个开源的可以用在浏览器端和NodeJS的异步通信框架，它的主要作用是实现AJAX异步通信。</li><li>由于Vue.js是一个视图层框架，作者严格遵循SoC原则，所以Vue.js没有AJAX通信功能，为了解决通信功能。作者单独开发了一个vue-resource插件。但是进入vue2.0后停止了对该插件的维护并推荐Axios插件。</li><li>对于AJAX通信，要少用JQuery，因为它对DOM的操作过于频繁</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107150939.png" style="zoom:80%;" /><h3 id="针对GET的Axios请求"><a href="#针对GET的Axios请求" class="headerlink" title="针对GET的Axios请求"></a>针对GET的Axios请求</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107150940.png" style="zoom:80%;" /><h3 id="针对POST的Axios请求"><a href="#针对POST的Axios请求" class="headerlink" title="针对POST的Axios请求"></a>针对POST的Axios请求</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107150941.png" style="zoom:80%;" /><h3 id="Axios的别名方法"><a href="#Axios的别名方法" class="headerlink" title="Axios的别名方法"></a>Axios的别名方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url,&#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="built_in">this</span>.username,</span><br><span class="line">        <span class="attr">password</span>:<span class="built_in">this</span>.password</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.post(url,Qs.stringify(&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="built_in">this</span>.username,</span><br><span class="line">    <span class="attr">password</span>:<span class="built_in">this</span>.password</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><ul><li><p>vue-cli（Vue command-line-interface）是官方提供的一个脚手架，用于快速开发生成一个vue的项目模板</p></li><li><p>脚手架就是预先定义好的目录结构和基础代码，就像创建maven项目时可以选择创建一个初始骨架项目。这种脚手架能让我们开发更加迅速。</p></li><li><p>主要功能：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-cli -g</span><br><span class="line">vue init webpack myvueName</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">vue-cli的3.0+以后使用的不是vue-cli了，如果用以上的安装命令安装的并不是最新版的3.0+的，而如果安装3.0的话就需要使用新的</span></span><br><span class="line">cnpm install @vue/cli -g</span><br></pre></td></tr></table></figure><ul><li><p><strong>Vue-cli项目的目录分析：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107155711.png" style="zoom: 67%;" /><ul><li>bulid：配置好了的文件，保存的是webpack打包工具的底层配置</li><li>config：关于vue的配置（端口号啥的）</li><li>node_modules：项目依赖的各个包，类似于java的lib目录</li><li>src：代码储存地，我们写代码的地方<ul><li>assets：静态资源（图片）</li><li>component：存放一个个的组件，.vue文件表示一个组件</li><li>router：路由文件</li><li>App.vue：根组件vue文件</li><li>main.js：整个项目的入口</li></ul></li><li>static：放一些静态的文件，不建议使用，一般被assets替代</li><li>index.html：vue的入口页面，只有一个div标签</li><li>package.json：相当于maven中的pom.xml文件，包管理文件</li></ul></li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210108103034.png" style="zoom: 80%;" /><h3 id="vue文件"><a href="#vue文件" class="headerlink" title=".vue文件"></a>.vue文件</h3><p>传统的template定义方式：先定义一个template标签，然后全局或者私有地定义一个component。这种方式在很多中小规模的项目中运行的很好，这些项目中JavaScript之被用来加强特定的视图，但是当更加复杂的项目中，当你的前端完全由JavaScript驱动的时候，以下的缺点将会非常明显：</p><ul><li>全局定义会强制要求每个component中的命名不重复</li><li>不支持CSS意味着当HTML和JavaScript组件化时，CSS明显被遗弃</li><li>可读性差，维护难度高，多个组件定义在一起，代码显得更加臃肿复杂</li></ul><p>基于以上传统的vue组件的定义方式，.vue结尾的vue专属文件single-file-components（单文件组件）为以上所有问题提供了解决方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //使用export标签将组件导出，需要使用组件的文件就可以使用import导入</span><br><span class="line">    export default &#123;</span><br><span class="line">      name: &#x27;App&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #app &#123;</span><br><span class="line">      font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;</span><br><span class="line">      -webkit-font-smoothing: antialiased;</span><br><span class="line">      -moz-osx-font-smoothing: grayscale;</span><br><span class="line">      text-align: center;</span><br><span class="line">      color: #2c3e50;</span><br><span class="line">      margin-top: 60px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="总结（基于脚手架开发の规约）"><a href="#总结（基于脚手架开发の规约）" class="headerlink" title="总结（基于脚手架开发の规约）"></a>总结（基于脚手架开发の规约）</h3><ul><li>index.html日后不会被修改</li><li>App.vue作为根组件，定义了页面的基本结构，日后开发中，根据需求修改它</li><li>在components中新建了.vue文件来定义组件</li><li>在router/index.js中定义了路由规则</li><li>在main.js中引入了项目需要的库</li></ul><h3 id="基于Vue-cli和SSM搭建前后端分离项目"><a href="#基于Vue-cli和SSM搭建前后端分离项目" class="headerlink" title="基于Vue-cli和SSM搭建前后端分离项目"></a>基于Vue-cli和SSM搭建前后端分离项目</h3><ul><li><p>安装axios和qs库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save axios vue-axios qs</span><br></pre></td></tr></table></figure></li><li><p>引入 &amp; 配置包供全局使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在所有的Vue组件中可以通过使用this.$qs使用qs库</span></span><br><span class="line">Vue.prototype.$qs = qs</span><br><span class="line"><span class="comment">//配置后端服务地址（axios的默认请求前缀）</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line"><span class="comment">//在Vue中配置axios，在所有Vue组件中可以通过this.axios使用axios库</span></span><br><span class="line">Vue.use(VueAxios,axios)</span><br></pre></td></tr></table></figure></li><li><p><strong>跨域问题</strong></p><ul><li>由于浏览器的同源策略限制，当一个请求url（后端部署服务器的地址）的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面url（前端部署服务器的地址）不同即为跨域</li></ul><p>F12控制台报错显示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">&#x27;http://localhost:8080/show?pageNum=1&amp;pageSize=3&#x27;</span> <span class="keyword">from</span> origin <span class="string">&#x27;http://localhost:8081&#x27;</span> has been blocked by CORS policy: No <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure><ul><li><p>跨域问题的解决：（服务端和浏览器端都要做响应配置）</p><ul><li><p>前端配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js中添加如下配置</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>服务端配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加响应头</span></span><br><span class="line"><span class="comment">//设置允许跨域共享资源的前端地址</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line"><span class="comment">//允许client跨域请求时携带cookie</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//也可以将以上代码做成过滤器并在web.xml中配置过滤器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlAllowFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">          HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">          <span class="comment">//设置允许跨域共享资源的前端地址</span></span><br><span class="line">          response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;http://localhost:8081&quot;</span>);</span><br><span class="line">          <span class="comment">//允许client跨域请求时携带cookie</span></span><br><span class="line">          response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">  </span><br><span class="line">          filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AccessControlAllowFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        jack.filter.AccessControlAllowFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AccessControlAllowFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><ul><li>webpack本质上是一个现代的Javascript应用程序的静态模块打包器。它会递归构建一个依赖关系图，其中包含应用程序所需的每个模块，然后将所有模块构成一个或多个bundle</li><li>webpack是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时再异步加载。通过loader转换，任何形式的资源都可以当作模块。</li><li>移动互联网来临，更多的网页进化到了WebApp模式。它通常是一个SPA（单页面应用），每一个视图通过异步的方式加载，页面初始化和使用过程中会导致越来越多的JavaScript代码，这回给前端的开发流程和资源组织带来巨大压力。</li></ul><h3 id="安装WebPack"><a href="#安装WebPack" class="headerlink" title="安装WebPack"></a>安装WebPack</h3><p>webpack是一款模块加载器兼打包工具，他能把各种资源：如JavaScript，JSX，ES6，SASS，LESS，图片等资源作为模块来处理和使用。打包后直接把ES6规范降级为ES5了，这样所有浏览器就都支持了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm install webpack -g</span><br><span class="line">cnpm install webpack0-cli -g</span><br><span class="line"><span class="meta">#</span><span class="bash">验证安装是否成功</span></span><br><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure><ul><li><strong>webpack.config.js</strong>配置文件解析<ul><li>entry：入口文件，制定webpack用哪个文件作文项目的入口</li><li>output：输出，制定webpack将处理后的文件放在哪里</li><li>modlule：模块，用于处理各种类型的文件</li><li>plugin：插件，如：热更新，代码重用</li><li>resolve：设置路径指向</li><li>watch：监听，用于设置文件改动后直接打包</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-前后端分离史</title>
      <link href="/2021/01/02/javaweb-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%B2/"/>
      <url>/2021/01/02/javaweb-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="前后端分离演变史"><a href="#前后端分离演变史" class="headerlink" title="前后端分离演变史"></a>前后端分离演变史</h2><h3 id="model1-MVC时代-："><a href="#model1-MVC时代-：" class="headerlink" title="model1(MVC时代)："></a><strong>model1(MVC时代)：</strong></h3><ul><li>以前一篇博客讲了为了开发开发复杂度，后端开发从model2(MVC)逐渐演变了很多基于MVC的后端框架，例如SSH，SSM</li><li><strong>优点：</strong>MVC是一个很好的协作模式，能后有效降低代码的耦合度，从架构上能让开发者明白代码应该写在哪里。为了让View试图层更加存粹，还可以将JSP替换为Thymeleaf，Freemarker等模板引擎，使模板里无法写入java代码，让前后端分工更加清晰</li><li><strong>缺点：</strong><ol><li>前端开发重度依赖开发环境，开发效率低。这种架构下，前后端协作主要有两种模式：<ol><li>前端写Demo，写好后，让后端去套模板。好处是Demo可以本地开发，很高效。不足时需要后端套模板，套完后还需要前端人员确定，来回沟通调整的成本很大。</li><li>另一种协作模式是前端负责浏览器端的所有开发和服务器端的View层模板开发。好处是UI相关的代码都是前端去写就好了，后端不用管前端的数据。不足就是前端开发重度绑定开发环境，环境成为影响前端开发效率的重要因素。</li></ol></li><li>前后端职责纠缠不清，模板引擎功能强大，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写入不少业务代码。还有个很大的灰色地带是Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现的。Controller和Model往往也会纠缠不清，看了让人咬牙的业务逻辑代码经常会出现在Controller层，这些问题不能全纠结于程序员的素养，否则JSP就够了。</li><li>对前端发挥的局限性：性能优化如果只在前端做空间非常有限，于是我们经常需要后端合作，但由于后端框架限制，我们很难使用【Comet】，【BigPipe】等技术来优化性能</li></ol></li></ul><h3 id="基于AJAX的SPA时代"><a href="#基于AJAX的SPA时代" class="headerlink" title="基于AJAX的SPA时代"></a>基于AJAX的SPA时代</h3><ul><li><p>使用CDN作为静态资源存储，JavaScript网站归来，Single Page Application</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102212813.png" style="zoom: 67%;" /></li><li><p>优点：前后端分工清晰，关键是AJAX接口。复杂度从基于服务器引擎的JSP转移到了基于浏览器引擎的JavaScript。这个时代出现了类似后端MVC模式的分层架构</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102212814.png" style="zoom:67%;" /></li><li><p>缺点：前后端接口的约定。需要通过接口规则和接口平台等方式来实现前后端的搞笑并行并发。前端由于JavaScript可能出现大量JS代码的组织。</p></li></ul><h3 id="大前端MV-时代"><a href="#大前端MV-时代" class="headerlink" title="大前端MV*时代"></a>大前端MV*时代</h3><ul><li>MVC：同步通信：View，Controller，Model</li><li>MVP：异步通信：View，Presenter，Model</li><li>MVVM：异步通信：View，ViewModel，Model</li></ul><p>为了降低前端开发的复杂度，涌现了大量前端框架：AngularJS，React，Vue.js，EmberJS等，这些框架按类型分为：Templates，Controllers，Models三层，然后在层能分层</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102213256.png" style="zoom:67%;" /><ul><li>优点：<ol><li>前后端职责很清晰：前端工作在浏览器端，后端工作在服务器端，开发并行。前后端独立开发，独立运行，甚至独立部署上线。</li><li>前端开发的复杂度可控：前端代码很重，很合理的分层，让前端代码能各司其职。</li></ol></li><li>缺点：<ol><li>代码不能复用，例如后端依旧需要对数据各种校验，无法直接复用浏览器端的代码</li><li>全异步，对SEO不利，往往还需要服务器端做同步渲染的降级方式</li><li>性能并非最佳，特别是移动互联网下</li><li>SPA不能满足所有需求，依旧存在大量多页面应用。URL Design需要后端配合，前端无法完全掌握。</li></ol></li></ul><h3 id="NodeJS带来的全栈时代"><a href="#NodeJS带来的全栈时代" class="headerlink" title="NodeJS带来的全栈时代"></a>NodeJS带来的全栈时代</h3><p>前端的MVC模式解决了很多问题，但是也有很多不足。随着NodeJS的兴起，JavaScript开始有能力运行在服务端。这意味着可以有一种全新的研发模式。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102214738.png" style="zoom:50%;" /><p>在这种研发模式下，前后端职责很清晰了。</p><p>对前端来说，两个UI层各司其职：</p><ol><li>Front-end UI layer：处理浏览器层的展现逻辑，通过CSS渲染样式，通过Javascript添加交互式功能。</li><li>Back-end UI layer：处理路由，模板，数据获取，Cookie等。通过路由，前端终于可以自主把控URL Design了。这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以拜托对崭新啊的强关注，转而可以专心业务逻辑层的开发。</li></ol><p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。</p><p>与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。</p><p>基于 Node 的全栈模式，依旧面临很多挑战：</p><ol><li>需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。</li><li>Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，</li><li>过 SOAP 等方式通信更高效。一切需要在验证中前行。</li><li>对部署、运维层面的熟练了解，需要更多知识点和实操经验。</li><li>大量历史遗留问题如何过渡。这可能是最大最大的阻力。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>模式没有好坏高下之分，只有合不合适。</li><li>Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。</li><li>SoC（关注度分离：关注点分离是日常生活和生产中广泛使用的解决复杂问题的一种系统思维方法。大体思路是,先将复杂问题做合理的分解,再分别仔细研究问题的不同侧面(关注点)，最后综合各方面的结果，合成整体的解决方案。） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。</li><li>还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 技术 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-JVM</title>
      <link href="/2021/01/02/java-JVM/"/>
      <url>/2021/01/02/java-JVM/</url>
      
        <content type="html"><![CDATA[<p><strong>JVM重点问题</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210101184141.png"></p><ol><li>JVM位置</li><li>JVM体系结构</li><li>类加载器</li><li>双亲委派机制</li><li>沙箱安全机制</li><li>Native</li><li>PC寄存器</li><li>方法区</li><li>三种JVM</li><li>栈</li><li>堆</li><li>新生区，老年区</li><li>永久区</li><li>堆内存调优</li><li>GC机制（常用算法）</li><li>JMM</li><li>单点登录（SSO）</li></ol><h2 id="JVM位置"><a href="#JVM位置" class="headerlink" title="JVM位置"></a>JVM位置</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210101184005.png"></p><h2 id="JVM体系结构（JVM内存模型）"><a href="#JVM体系结构（JVM内存模型）" class="headerlink" title="JVM体系结构（JVM内存模型）"></a>JVM体系结构（JVM内存模型）</h2><p>jvm内存模型主要分为5个部分，是java在运行时，jvm虚拟机拿到了自己能支配的内存之后，将内存进行了割分</p><ul><li>栈：存储函数运行中的一些引用类型的变量&amp;基础类型变量</li><li>堆：存储对象，被栈中的引用类型变量所指向</li><li>本地方法栈：存储C++的native方法运行时的栈区<ul><li>java中有两种方法：java方法和本地方法</li><li>java方法由java语言编写，编译为class文件，运行时放在jvm中</li><li>本地方法由其他语言编写，编译成和处理器相关的机器代码，本地方法保存在动态链接库中，在windows系统中就是.dll文件中，各个平台都有自己独有的</li></ul></li><li>程序计数器：指向程序当前运行的位置</li><li>方法区：存储元数据信息。static，cloader等</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210101183226.png"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><ul><li><p>.class文件经过类加载器，初始化，在方法中形成一个Class类型的对象用来做实例化操作</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102093505.png" style="zoom:80%;" /></li><li><p>类加载器分类：（层次从低到高）</p><ul><li>应用程序加载器：AppClassLoader：<strong>记载自定义的类</strong></li><li>扩展加载器：ExtClassCloader：<strong>加载java扩展库中的类</strong></li><li>引导类(根)加载器：由C++实现，<strong>加载java核心库rt.jar，创建扩展类加载器和应用程序类加载器</strong></li><li>虚拟机自带的加载器：</li></ul></li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ul><li>目的：为了保证安全，重点理解委派</li><li>双亲<strong>委派</strong>机制原理：类加载器收到类加载请求——》一直向上(父类)委托，直到根加载器——》引导类加载器检查是否能加载当前这个类——》能加载就是用当前加载器，否则就通知子加载器进行加载——》重复上个步骤知道将类进行加载</li><li>如果最终都没有找到的话，那么会报异常：Class Not Found</li><li>用一个classLoader一直重复getCloader，如果出现了null的情况，那么有两种情况：要么不存在，要么就是C++写的native方法(java无法获取到)</li><li>APP——》EXT——》BOOT（最终执行）</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219114522.png" style="zoom: 50%;" /></li></ul><h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><ul><li><p>沙箱机制就是一个限制程序运行的环境，通过设置相应的权限。</p></li><li><p>组成沙箱的基本组件：</p><ul><li><p>字节码校验器：确保java类文件遵循java语言规范，帮助java实现内存保护。核心类不会经过字节码校验。</p></li><li><p>类加载器：</p><ul><li><p>在3个方面对java沙箱起作用</p><ul><li>防止恶意代码干涉善意代码，例如双亲委派（自定义String类根本不会生效）</li><li>守护被信任的类库边界</li><li>将代码归入保护域，确定了代码可以进行哪些操作（例如自己的代码调不了C++的库）</li></ul></li><li><p>JVM为不同的类加载器载入的类提供不同的命名空间</p></li><li><p>包含哪些关于沙箱机制类：</p><ul><li>存取控制器（access controller）</li><li>安全管理器（security manager）</li><li>安全软件包（security package）</li></ul></li></ul></li></ul></li></ul><h2 id="Native关键字"><a href="#Native关键字" class="headerlink" title="Native关键字"></a>Native关键字</h2><ul><li>凡是带了native关键字的方法，这个方法会调用C库</li><li>带native关键字的方法在执行时会进入本地方法栈，然后调用本地方法接口JNI</li><li>JNI作用：扩展java的使用，融合不同编程语言为java所用。最初融合的是java诞生时如日中天的C和C++</li></ul><h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><ul><li>Program Counter Register</li><li>线程私有</li><li>就是一个指针，指向方法区中的方法字节码（用来存储指向一条即将要执行的指令的地址），在执行引擎读取下一条指令。</li><li>如果执行的是一个native方法，计数器是空的</li></ul><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><ul><li>Method Area</li><li>所有线程共有：所有字段，方法字节码，构造函数，接口代码</li><li>静态变量<code>static</code>，常量<code>final</code>，类信息<code>Class模板</code>(构造方法，接口定义)，运行时的常量池<code>fianl Pool</code>也存在内存中。</li><li>实例变量存在堆内存中</li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li><p>先进后出，后进先出</p></li><li><p>举个栗子：</p><ul><li>栈：喝多了吐</li><li>队列：吃多了拉</li></ul></li><li><p>栈内存：主管程序的运行，生命周期，线程同步</p></li><li><p>线程结束，栈内存也就是释放了，程序也就结束了</p></li><li><p>栈中放哪些类型：</p><ul><li>8大基本类型</li><li>对象引用</li><li>实例的方法</li></ul></li><li><p>栈帧：一帧一帧地存储</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102113520.png" style="zoom: 67%;" /></li><li><p>栈满了会报错：StackOverFLowError</p></li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ul><li>三种JVM：<ul><li>SUN公司：HotSpot(TM)，我们学习的</li><li>BEA公司：：JRockit</li><li>IBM公司：J0 VM</li></ul></li><li>Heap</li><li>一个JVM只有一个堆内存，堆内存的大小是可以调节的</li><li>类加载器读取的类文件后，一般把什么东西放进堆中？<ul><li>类的实例，实例中的方法，变量，（jdk1.8后的常量）</li><li>保存所有引用类型的真实对象</li></ul></li><li>堆中还要细分为三个区域：<ul><li>新生区（有三个：Eden Space，Survivor1，Survivor2）：轻量级垃圾回收</li><li>养老区：重量级垃圾回收</li><li>永久区</li></ul></li><li>GC垃圾回收主要发生在伊甸园区&amp;养老区</li><li>假设内存满了，会有OOM（java.out.OutOfMemoryError:Java heap space）错误，说明堆内存满了</li><li>JDK8后，永久存储区更名为：元空间</li></ul><h2 id="OOM故障排除"><a href="#OOM故障排除" class="headerlink" title="OOM故障排除"></a>OOM故障排除</h2><ul><li><p>DEBUG太慢了，所以最好能直接定位代码出错行数，可以使用内存快照分析工具：MAT，Jprofiler</p></li><li><p>MAT，Jprofiler作用：</p><ul><li>分析Dump内存文件，快速定位内存泄漏问题</li><li>获得堆中的数据</li><li>获得大的对象</li><li>……</li></ul></li><li><p>使用Jprofiler工具剖析java代码运行过程</p></li><li><p>```shell<br>#-Xms:设置初始化内存分配大小，默认1/64<br>#-Xmx:设置最大分配内存，默认1/4<br>#-XX:+PrintGCDetails:打印GC垃圾回收信息<br>#-XX:+HeapDumpOnOutOfMemoryError:打印OOM信息<br>-Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  //RunTime类（代表应用程序的运行环境）常用方法</span><br><span class="line">  getRuntime();</span><br><span class="line">  exec(String command);</span><br><span class="line">  freeMemory();//返回java虚拟机中的空闲内存区，字节为单位</span><br><span class="line">  maxMemory();//返回java虚拟机试图使用的最大内存量，字节为单位</span><br><span class="line">  totalMemory();//返回java虚拟机内存总量，字节为单位</span><br></pre></td></tr></table></figure></li></ul><h2 id="GC垃圾回收机制见博客Java-GC机制"><a href="#GC垃圾回收机制见博客Java-GC机制" class="headerlink" title="GC垃圾回收机制见博客Java-GC机制"></a>GC垃圾回收机制见博客<a href="https://jack1024.club/2020/12/21/Java-GC%E6%9C%BA%E5%88%B6/">Java-GC机制</a></h2><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ul><li>什么是JMM？Java Memory Model</li><li>究竟什么是JMM，其实JMM和栈，堆这些JVM内存模型的东西完全不是一个概念的东西。当你第一次听到Java Memory Medel时候，肯定会首先想到这些吧，但是不对。</li><li><strong>实际上JMM是一个抽象的概念，</strong></li><li><strong>在物理实现上，java采用volatile关键字</strong>，该关键字用于修饰变量表示该变量在不同线程中共享。导致编译器和运行时都会注意到该变量是共享的，因此不会对该变量进行重排序。</li></ul><p><strong>JMM实际上就时缓存一致性协议，用于定义数据读写规则</strong></p><ul><li><p><strong>JMM的8种交互操作：</strong></p><ul><li><strong>lock</strong> （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li><li><strong>unlock</strong> （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li><strong>read</strong> （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li><strong>load</strong> （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li><li><strong>use</strong> （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li><li><strong>assign</strong> （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li><li><strong>store</strong> （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li><li><strong>write</strong> （写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li></ul></li><li><p><strong>JVM对这8种指令定义了如下的规则：</strong></p><ul><li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li><li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li><li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li><li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li><li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li></ul></li></ul><p>说白了，JMM就是一个关于操作系统读写操作控制的机制，说到这里，过几天要回顾操作系统的知识了。。。。哎</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点想法-2021-01-01</title>
      <link href="/2021/01/01/%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95-2021-01-01/"/>
      <url>/2021/01/01/%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95-2021-01-01/</url>
      
        <content type="html"><![CDATA[<p>这学期期末，连续做了三个小项目，最后一个实习最后，叫写个3000字的总结，没啥写的。就扯了了点自己学java这么久以来的感悟。想想也放在博客上吧，随便谈谈。</p><p>我之前做过的所有项目的前台静态页面都是用纯css，html，javascript或者jquery自己写的，这样可以锻炼自己对前端三件套的掌握程度。但是这次我们采用了一个后台管理的前端模板adminlte，类似的模板有很多，选择它的原因是有很详细的中文说明。对于大多数的后台管理系统的前台来说，它提供的已足够充足，只需要根据需要选择相应的控件就行了，如果整个项目都是后端程序员开发，大大简化了后端程序员的负担。</p><p>对于SSM框架来说，我还是很有感触，我的javaweb之路是一步一步学来的，对javaweb的发展史还是有一定的了解。从最初的servelet，不管页面要显示什么内容，都需要servlet中打印语句到浏览器页面显示，对于servlet中冗长的out语句，简直是噩梦。到后来，借鉴asp的形式，诞生了jsp，这种技术可以在html语句中直接写java代码，如果说servlet是在java代码中写标签，jsp就是在标签中写java代码，这个时候，要完成一个简单的页面，只需要一个几个jsp页面就可以实现了，看似简单，但是随着互联网的迅速发展，当web项目越做越大时，对于庞大代码的首要任务是如何去维护它，如何去践行高内聚低耦合等程序设计原则。然后就是出现了javabean类，将jsp中的部分java代码剥离出来放到专门的java类中达到解耦的目的，此时可以看作MVC的雏形，jsp是表示层，控制层，javabean是模型层，这就是model1开发模式。之后，又将jsp中的控制层单独剥离出来，让servlet来充当，这样，就是大名鼎鼎的model2开发模式即MVC模式的诞生。再然后，就是各种后端java框架的出现了，从Struts2+Spring+Hibernate的SSH，到SpringMVC+Spring+Mybatis的SSM，实际上还是MVC模式，只不过更加人性化，简化了原始的JSP+Servlet+JavaBean的开发模式。需要注意的是，这里的对应关系是JSP是表示层，Servlet是控制层，JavaBean是模型层。但是对于SSH和SSM框架来说，每一个框架对应的是三层模型，分别是Controller层，Service层，Dao层。控制层还是那个控制层，Service层和Dao层都属于模型层。所以，完整的技术栈应该是：JSP+SpringMVC+Spring+Mybatis。这里的逻辑关系很容易混淆，特别是对于新手，很容易把MVC和三层架构搞混。这里理解清晰对与整个后端知识的学习可以说是很重要的。理解一项技术的历史发展我认为对于一个技术学习者来说是很重要的，一个增加专业素养，二是增加学习兴趣，三是能知道自己究竟在学什么，能更加清晰地认识到这项技术在历史中地位，对自己对于新技术的判定页会有很大帮助。</p><p>当然，我目前只学到了SSM框架这个地方，SpringBoot和实现分布式部署的SpringCloud作为javaweb系统技术的最前沿，也是目前各大互联网公司的必备技术。这些我都没写开始学习。我认为java发展至今，每个时间都会产生各种新的技术，如果我们一味地追求新技术是没有任何意义的。这里我并不是说新技术不好，我的意思是无论多么高深的技术，都是基于最基础的java语法，java基本特性，例如：发射，注解，多线程机制。现在我发现很多程序员对于这些基础知识并没有弄清楚，但是对新技术趋之若鹜。例如就拿SpringBoot来说，它的很多技术点都是基于SSM的，对于SSM来说，他就是原始MVC模型的进一步简化，原理几乎一致。对于MVC，又可以追述到JSP和Servlet的最原始时代，这又回到了我上面讲的了解一项技术的历史的重要性问题上。当你了解了他的历史，你就会看透这项技术的实质是什么，只要理解技术的核心原理，不管这项技术怎么变你都会认识它。所以我的建议就是对于我们这种初出茅庐的新手来说，最重要的事应该是把个更多的时间花在夯实基础上，而不是追逐新技术上。</p><p>记得刚进大一时，那时对于编程来说，认识就是C语言的控制台小黑窗。大二大三也是诸如数据结构，操作系统，计算机组成原理，计算机网络，面向对象设计，设计模式等理论课，我很不明白为什么学校教的都是这些枯燥乏味的理论课呢，稍微讲一些实践课还都是些老掉牙的东西呢，为什么不直接教最新的东西呢，当时的我确实很是困惑。在大三开始，我逐渐开始对javaweb有了兴趣，从java基础开始到javaEE，到SSH，经过这么长时间学习体会，一直到现在的SSM，我终于才有了认识：一个牢固的地基太重要了。所以，从大三开始，我开始补自己欠下的基础债，学的过程中也很是感叹。其实反过来想想：学习一个东西可以先掌握其实践方法，认识到基础知识的重要，再回来学习理论其实也是不错的方法。有交流的学弟学妹，我也会给他们提醒到这一点，不要忽视大学中看似乏味的理论课，这些东西才是日后决定你技术高度的标尺。</p><p>接下来一段时间主要复习javase基础，重新学习设计模式，数据结构，操作系统，计算机组成原理，SSM框架深层次理解包括源码理解。这些东西每一个都不是善茬，任重而道远。但话说回来，程序员的一生就是不断学习的一生，对知识的渴望就是一种软实力。对于未来职业方向，暂定方向是java后端开发，我个人对Linux和计算机网络也挺感兴趣，未来也可以有多改变，当然这一切都不是空口说说就行。其实写博客也是一个很好的习惯，一来可以起到类似于日记记录生活的作用，二来可以提交自己学习的欲望，同时加深自己对于知识的理解和记忆程度。一定要在之后的工作中养成写博客的习惯。本次实习我认为很成功，虽然遇到了疫情，但是丝毫不影响，继续努力吧！</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到底啥是VPN</title>
      <link href="/2020/12/29/%E5%88%B0%E5%BA%95%E5%95%A5%E6%98%AFVPN/"/>
      <url>/2020/12/29/%E5%88%B0%E5%BA%95%E5%95%A5%E6%98%AFVPN/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是VPN？"><a href="#什么是VPN？" class="headerlink" title="什么是VPN？"></a>什么是VPN？</h2><ul><li><p>对于出差的员工，公司的IT部门会在他们的电脑上装上VPN软件。这个VPN软件可以连接到一台由公司内部控制的电脑服务器上，叫“VPN服务器”（VPN Server）。出差员工连上VPN以后，他上网时就不再直接访问公共互联网，而是通过VPN服务器间接访问。<strong>本质上是正向代理。</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201229104837.png" style="zoom:80%;" /></li><li><p>VPN还有一个<strong>重要特点</strong>：VPN用户和VPN服务器之间的通讯是加密的，这样就不会被黑客盗取内容。这就好比两个人打电话，是有可能被第三方监听的，但是如果打电话的两个人使用的是别人都听不懂的特殊语言（这就是加密），那么即使有人监听，打电话的内容也不会被泄露。</p></li></ul><h2 id="VPN有什么用："><a href="#VPN有什么用：" class="headerlink" title="VPN有什么用："></a>VPN有什么用：</h2><ul><li><strong>VPN可以提高上网的安全性</strong></li></ul><p>因为使用VPN时所用的网络访问都是加密进行的，所以使用VPN上网，安全性就更高，黑客很难截取用户的重要信息。如果你使用公共WIFI上网（例如在咖啡馆上网）时，需要做安全性强的操作（比如使用网上银行或网上投资账户），那么建议你连上VPN，因为这样会大大提高安全性。</p><ul><li><strong>VPN可以隐藏上网者的身份</strong></li></ul><p>因为VPN用户访问任何网站都是通过VPN服务器间接访问的，所以被访问的网站看到的访问者是VPN服务器，而不是VPN用户本人的电脑，这样VPN用户就能对要访问的网站隐藏自己的真正身份。</p><ul><li><strong>VPN可以突破网站的地域限制</strong></li></ul><p>很多网站都有地域限制，比如视频网站Netflix在不同国家提供不同的内容，美国用户访问Netflix时看到的是美国版的内容，香港用户看到的是香港版的内容。网站的这种功能是通过查看访问者的IP地址属于哪个国家来实现的。而VPN可以用来突破这种IP限制。比如：香港的用户想要看到美国版Netflix的内容，可以先连接到一台位于美国的VPN服务器。这样Netflix网站就会以为访问着来自美国，而提供美国版的内容。同理，使用<a href="https://www.vpndada.com/vpn-japan-cn/">日本VPN</a>可以以日本用户的身份访问日本网站和服务，使用<a href="https://www.vpndada.com/best-vpn-for-hong-kong-cn/">香港VPN</a>可以以香港用户的身份上网。基于同样的道理，<a href="https://www.vpndada.com/vpn-into-china-cn/">海外华人可以通过VPN翻墙回国</a>，观看仅限国内用户观看的视频内容。另外，VPN还可以用来在网上购物时省钱，因为一些酒店和机票网站对不同国家有不同的价格，通过VPN换成不同国家的IP往往可以省钱。</p><ul><li><strong>突破网络封锁（翻墙）</strong></li></ul><p>为什么VPN可以用来翻墙呢？先让我们看看网站是如何被墙的。当用户在中国大陆直接访问被封网站（比如Google）时，网络监控发现你要连接到被墙网站，直接就把你拦截了。而如果你通过VPN访问这个网站，我们前面提到，VPN用户访问任何网站都是通过VPN服务器代为访问的，用户连接的其实是VPN服务器，而不是Google（只是告诉VPN服务器你要访问Google），然后VPN服务器去连接Google，把Google的内容回传给你。这样的话，网络监控看到的是你在连接VPN服务器，而不是在连接Google，同时因为VPN传输是加密的，网络监控也无法破解你和VPN服务器之间在传输什么信息，所以，（除非VPN服务器也在被墙网址之内）网络监控就不会切断你的连接，于是你就成功翻墙了。</p><p><strong>一点感悟</strong>：离开学校会发现没法访问校园网了，我原来认为是校园局域网，然后在家里用VPN通过内网穿透来访问，但是在家里能通过学校的VPN服务器连接校园网进行访问。所以我现在觉得校园网只是出于安全考虑根据你的网络ip地址设置的防火墙。只能通过校园网或者学校的VPN专用服务器进行VPN代理访问。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201229122754.png" style="zoom: 67%;" /><p>关于校园网VPN，我的最新理解：在用户端使用VPN功能的软件，配置为隧道开通器，通过ISP接入Internet并访问校园网内的VPN服务器。此时所有主机都在一个虚拟的大局域网中了。从墓地上来说的确实现了内网穿透。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX局部刷新技术</title>
      <link href="/2020/12/28/AJAX%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/12/28/AJAX%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX含义："><a href="#AJAX含义：" class="headerlink" title="AJAX含义："></a>AJAX含义：</h2><ul><li>Asynchromnous JavaScript And XML</li><li>异步的Javascript（编程语言）和XML（文件格式）</li><li>AJAX不是一门新的编程语言，是一个多门已有技术组合后创新产生的新技术</li><li>核心点：<ul><li>核心编程语言是JS</li><li>数据交换的工具是XML（现已被JOSN替代）</li><li>AJAX是一种异步请求方式（和同步请求对立）</li></ul></li></ul><h2 id="同步-amp-异步请求"><a href="#同步-amp-异步请求" class="headerlink" title="同步&amp;异步请求"></a>同步&amp;异步请求</h2><h3 id="同步请求："><a href="#同步请求：" class="headerlink" title="同步请求："></a>同步请求：</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106223642.png" style="zoom:67%;" /><ul><li>浏览器发起的传统请求（表单，超链接，地址栏输入地址，location.href）</li><li>用户从发起请求开始，到服务器端相应结果完毕，这段时间内不能再操作页面，如果服务端相应结果耗时很长，用户在这段时间内一直等待体验很差。</li><li>特点：<ul><li>一定刷新页面</li><li>地址栏一定改变</li><li>发起同步请求，会阻塞用户的其他操作</li></ul></li></ul><h3 id="异步请求："><a href="#异步请求：" class="headerlink" title="异步请求："></a>异步请求：</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106224315.png" style="zoom:67%;" /><ul><li>AJAX是一种浏览器端的异步请求技术</li><li>对于AJAX，服务端响应的不是一个完整页面，而是字符串（页面的数据部分），不会刷新页面</li><li>用户在JavaScript发起请求开始，到服务端响应结果完毕，不用等待，用户可以一直操作页面，用户体验好</li><li>特点：<ul><li>不刷新页面</li><li>地址栏不改变</li><li>异步请求不会阻塞用户的其他操作</li></ul></li></ul><h2 id="原生AJAX操作"><a href="#原生AJAX操作" class="headerlink" title="原生AJAX操作"></a>原生AJAX操作</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106225413.png" style="zoom:67%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210106225412.png" style="zoom:67%;" /><h2 id="AJAX异步请求通用模型"><a href="#AJAX异步请求通用模型" class="headerlink" title="AJAX异步请求通用模型"></a>AJAX异步请求通用模型</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107105142.png" style="zoom:67%;" /><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li><p>异步请求下，Server端响应会Client的不是一个完整页面，而是字符串数据，当服务端响应的结果比较复杂时（对象，数组，集合），简单格式的字符串不能满足需求，在传递复杂的数据时，不能使用简单格式的字符串，要使用JSON格式的字符串。</p></li><li><p>JSON：JavaScript Object Notation，它是JS对象字符串表示形式，定义了对象等复杂数据的特定字符串格式，独立于各个编程语言，是一种轻量级的数据交换格式。</p></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107111226.png" style="zoom:67%;" /></li><li><p>按照java数据类型可分为以下两种JSON字符串转化方式：</p><ul><li><p>普通对象 &amp; Map</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107131028.png"></p></li><li><p>数组 &amp; List &amp; Set</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107131029.png"></p></li></ul></li></ul><h3 id="Jackson工具的使用"><a href="#Jackson工具的使用" class="headerlink" title="Jackson工具的使用"></a>Jackson工具的使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student(传入参数);</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String studentJson = objectMapper.writeValueAsString(s);</span><br><span class="line">System.out.println(studentJson);</span><br></pre></td></tr></table></figure><ul><li><p>属性没有值，可以在对应实体类加上注解，就只会转化非null的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInlcude(JsonInclude.Include.NON_NULL)</span></span><br></pre></td></tr></table></figure></li><li><p>属性名定制，在实体类属性上加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;别名&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>对象回环问题解决：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210107133621.png"></p></li><li><p>日期格式输出：</p><p>日期格式默认转化为时间戳来显示的（1970年1月1日开始到现在的毫秒数）</p><p>在实体类的日期属性上加上注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="需要注意："><a href="#需要注意：" class="headerlink" title="需要注意："></a>需要注意：</h2><ul><li>POST和GET区别：<ul><li>POST请求时必须带一个：content-type 指定参数的类型</li><li>POST的请求参数不能直接写在请求地址后</li></ul></li><li>在SpringMVC中使用@responsebody的注解需要先引入jackson-core和jackson-databind两个依赖（我的惨痛教训，以后使用非传统功能事前，一定要先看看是否引入了外部依赖）</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Ajax </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透浅析</title>
      <link href="/2020/12/28/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%B5%85%E6%9E%90/"/>
      <url>/2020/12/28/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><strong>首先需要明确的是：内网穿透只是目的，不是特指哪一种技术，可以有多种方式来实现通过公网对局域网中的主机的访问。</strong></p><p>内网穿透的技术：目前了解的大致分为以下两种</p><ul><li>基于client和server，利用公网的一个中间服务器实现流量转发</li><li>利用UDP打洞来实现P2P</li><li>当然，自己能申请公网ip更好。直接做一个端口映射（常见的端口转发有以下三种模式：手动设计端口转发规则，DMZ，UPNP）利用DDNS动态绑定域名即可。</li></ul><h3 id="基于C-S架构流量转发实现（传统穿透）"><a href="#基于C-S架构流量转发实现（传统穿透）" class="headerlink" title="基于C/S架构流量转发实现（传统穿透）"></a>基于C/S架构流量转发实现（传统穿透）</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201229113152.png" style="zoom: 67%;" /><p>在谈这种方式之前，需要先了解以下计算机网络中的Proxy，既代理。分为正向代理和反向代理</p><ul><li><strong>正向代理：</strong>隐藏了真实的请求客户端。服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，最典型的例子就是科学上网工具（访问谷歌被墙，于是在国外搭建一台代理服务器，让代理帮我去请求，代理把请求放回的数据再返回给我。此时，Proxy和Client同属一个LAN，对server透明）</li><li><strong>反向代理：</strong>反向代理隐藏里真实的服务端，反向代理服务器会帮我们把请求转发到真实的服务器那里去。最典型的就是Nginx这个性能强大的反向代理服务器（当我们访问百度时，百度在全国分布了上万台服务器，你的每次请求具体是哪台服务器处理你的请求你不用知道，只需要Nginx这个反向代理服务器知道就行了，这实际就是负载均衡的实现原理。此时，Proxy和Server同属于一个LAN，对Client透明）</li></ul><p>目前最常用的两个通过公网服务器转发数据实现内网穿透的工具是：<strong>frp</strong>，<strong>ngrok</strong>，<strong>nat123</strong>。远程桌面控制软件<strong>TeamViewer</strong>也是这样的原理。</p><p><strong>具体流程</strong>如下：我们需要一个有公网ip的反向代理服务器C，由C代理本地的A主机（但在这个过程中，代理服务器C和本地A没有在一个网段，因此当公网B向代理服务器发送请求时，代理服务器无法连接到处于内网中的主机A。所以就需要上面提到的工具了，需要安装相应的服务或者客户端软件向Proxy主动发出请求并建立连接）。然后从本地A向C握手，建立稳定连接，同时在Proxy上将A的端口映射到公网IP上。之后，一个公网设备B向C发送请求，C通过刚才建立的稳定信道将请求转发给A。A收到请求后将响应发给C，C再将响应返给B。至此，穿透达成。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201229095308.png"></p><p>缺陷就是Proxy最为数据转发的唯一跳板，需要消耗服务器带宽和流量，内网穿透过程中的带宽上行取决于中间反向代理服务器。</p><h3 id="利用UDP打洞实现P2P的访问（点对点穿透）"><a href="#利用UDP打洞实现P2P的访问（点对点穿透）" class="headerlink" title="利用UDP打洞实现P2P的访问（点对点穿透）"></a>利用UDP打洞实现P2P的访问（点对点穿透）</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201229113151.png" style="zoom:67%;" /><p>简单说就是：用一个公网服务器当介绍人，直接连接两个不同局域网中的主机，来实现通讯，建立连接后把公网服务器关了，两个不同局域网中的机器依旧可以通信。</p><p>要弄清楚UDP打洞（NAT打洞）原理，必须先搞清楚NAT的4种类型</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201228094312.webp" style="zoom:80%;" /><ul><li><p>先来看个例子：公网上有两个server，ip和端口分别如图。内网中的NAT网关的ip是3.3.3.3，NAT内部需要穿透的电脑的ip如图。此时，192.168.0.2电脑A，已经和NAT网关（3.3.3.3:200）和server1（1.1.1.1:1111）建立了连接</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201228095516.png" style="zoom:80%;" /></li></ul><p><strong>以下四种方式从上至下的要求愈发严格：</strong></p><h4 id="完全锥形NAT"><a href="#完全锥形NAT" class="headerlink" title="完全锥形NAT"></a>完全锥形NAT</h4><p>如上，当A和server1的一条通信连接建立时，<strong>其他的所有server</strong>，例如server2也可以通过路由上的3.3.3.3:200来访问电脑A</p><h4 id="ip限制型锥形NAT"><a href="#ip限制型锥形NAT" class="headerlink" title="ip限制型锥形NAT"></a>ip限制型锥形NAT</h4><p>当A和server1的一条通信连接建立时，其他的server，例如server2不能通过路由上的3.3.3.3:200来访问电脑A，只能是此时正在正在连接当中的server1的<strong>ip</strong>才能访问电脑A，但是堆server1中的<strong>不同端口号并不限制</strong></p><h4 id="端口限制型锥形NAT"><a href="#端口限制型锥形NAT" class="headerlink" title="端口限制型锥形NAT"></a>端口限制型锥形NAT</h4><p>当A和server1的一条通信连接建立时，其他的server，例如server2不能通过路由上的3.3.3.3:200来访问电脑A，只能是此时正在正在连接当中的server1的<strong>ip+端口</strong>才能访问电脑A</p><h4 id="对称NAT"><a href="#对称NAT" class="headerlink" title="对称NAT"></a>对称NAT</h4><p>当A和server1的一条通信连接建立时，<strong>在完全满足端口映射锥形NAT的基础上</strong>，如果此时电脑A还需要建立和其他server建立连接，比如server2，那么此时<strong>不能重复利用3.3.3.3:200</strong>，只能重新在路由器上开通一个端口号。</p><h4 id="UDP打洞中不同NAT的组合方式"><a href="#UDP打洞中不同NAT的组合方式" class="headerlink" title="UDP打洞中不同NAT的组合方式"></a>UDP打洞中不同NAT的组合方式</h4><p>上述介绍四种NAT的类型对其进行两两组合，总共有10中不同的组合方式，不同的组合方式在进行穿透时的方法也不同，有两种情况的组合无法穿透（也有一些骚操作可以让这两种的组合实现内网穿透，但是由于NAT设计之初就没有考虑到这两种的组合情况，所以理论上他们也是不能穿透的）</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201228102002.webp" style="zoom:80%;" /><h3 id="两种内网穿透方式的比较"><a href="#两种内网穿透方式的比较" class="headerlink" title="两种内网穿透方式的比较"></a>两种内网穿透方式的比较</h3><ul><li>打洞：Zerotier，Frp（初级），smargate</li><li>转发：花生壳，ngrok，Frp</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201229113158.png" style="zoom: 50%;" />]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-GC机制</title>
      <link href="/2020/12/21/Java-GC%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/12/21/Java-GC%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><ul><li>Java的内存管理实际上就是对象的管理，其中包括对象的分配和释放。对于程序员来说，分配对象使用new关键字；释放对象时，只要将对象所有引用赋值为null，让程序不能够再访问到这个对象，我们称该对象为”不可达的”.GC将负责回收所有”不可达”对象的内存空间。</li><li>堆空间是用来存储new出来的对象的，当new出来的对象填充满时，会让堆爆掉，程序就挂了，这显然时不被允许的。</li><li>Garbage Collection的机制就是判断堆内存中哪些对象能被删除，判断的标准就是GCRoot</li></ul><h2 id="GCRoot"><a href="#GCRoot" class="headerlink" title="GCRoot"></a>GCRoot</h2><ul><li><strong>GCRoot</strong>：指向堆中的对象的引用，包含：<ul><li>栈上的引用直接或者间接地被引用</li><li>方法区上全局的的Static变量&amp;常量直接或者间接被引用</li><li>本地方法栈上的的C++直接或者间接被引用</li></ul></li><li>那些可以直接存在的，没有和GCRoot有相连的关系的对象可以被删除</li></ul><h2 id="GC机制清理堆中垃圾的思路"><a href="#GC机制清理堆中垃圾的思路" class="headerlink" title="GC机制清理堆中垃圾的思路"></a>GC机制清理堆中垃圾的思路</h2><ul><li><p><strong>标记-清理：</strong>在堆中要删除对象后面打标</p><ul><li>缺点：标记和清除两次扫描会严重浪费时间，同时会产生内存碎片</li><li>优点：不需要额外空间</li></ul></li><li><p><strong>标记-整理：</strong>堆中删除的对象留下的空间能聚集在一起</p><ul><li>缺点：代价太大，除了两次扫描还要把所有整理后的对象前移</li><li>优点：减少了内存碎片</li></ul></li><li><p><strong>复制算法：</strong>将整个内存一分为二，将1区需要删除的标记，然后将没打标记的对象紧凑复制到2区，既避免了内存碎片问题，整个内存开销又不是很大。</p><ul><li>缺点：需要两倍内存空间</li><li>优点：不会产生碎片问题</li><li>最佳使用场景：对象的成活率较低（新生区就是这样）</li></ul></li><li><p><strong>实际的GC：将堆区划分</strong></p><ul><li><p>新new的对象都会在Eden（伊甸园）出生，当Eden快满的时候会触发<strong>young区域的GC</strong>，采用复制算法，将Eden中没有标记的对象复制到Survivor0（幸存0）区域</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201221102717.png" style="zoom:50%;" /></li><li><p>Eden很大，Survivor更小。因为对象都有一个特点：<strong>朝生夕死</strong>，很容易就夭折了，生死率大概是1：8</p></li><li><p>需要两块Survivor区交替工作（From和To的反复交替：谁空谁是To）</p><ul><li>E+S1 复制到 S0</li><li>E+S0 复制到 S1</li><li>E+S1 复制到 S0</li><li>…（如此交替工作）</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102153958.png" style="zoom: 50%;" /></li><li><p>一个对象每幸存1次，其年龄就会+1，如果满了6岁，（满了6岁基本60岁都不会清理了）就不会复制到Survivor区了，就会直接到Old区了</p></li><li><p>大对象（例：1000万个元素的int数组）会直接存放到Old区。</p></li><li><p>Old区满了也会触放<strong>GC</strong>，OldGC一般也会伴随YoungGC，所以，Old区满了会触发<strong>FullGC</strong>，此时会触发stoptheworld，java程序全部暂停，报错OOM（java.lang.OutOfMemory :Java heap space），全力进行垃圾回收（采用标记清理 or 标记整理算法）</p></li><li><p><strong>总结：</strong></p></li><li><p>标记-清理和标记-整理 主要用在 FullGC机制</p><ul><li>复制算法只要用在 YoungGC机制</li></ul></li><li><p><strong>内存效率(时间复杂度)：</strong>复制算法&gt;标记清除&gt;标记整理</p><ul><li><strong>内存整齐度：</strong>复制算法=标记整理&gt;标记清除</li><li><strong>内存利用率：</strong>标记整理=标记清除&gt;复制算法</li><li><strong>没有最好的算法，只有最合适的算法</strong></li></ul></li><li><p>垃圾收集器：</p><ul><li><strong>年轻代：ParNew：复制算法</strong></li><li><strong>老年代：CMS：标记-清理</strong></li><li><strong>最新版的JDK采用的是：G1垃圾收集器</strong></li></ul></li></ul></li><li><p><strong>永久区</strong></p><p>该区域常驻内存，用来存放JDK自身携带的Class对象等。存储的是java运行时的一些环境。</p><p>该区域不存在垃圾回收，关闭虚拟机就会释放该区域的内存</p><ul><li>jdk1.6之前：永久代，常量池在方法区</li><li>jdk1.7：永久代慢慢退化了，常量池在堆中</li><li>jdk1.8之后：无永久代，整个方法区（包含常量池）都在元空间</li></ul><p>JDK8之后的堆内存模型：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102141906.png" style="zoom:80%;" /><p>这个元空间：逻辑上存在，物理上不存在</p><p>堆内存参数调优初识：在IDEA中，VM options中添加几个参数，可以指定最大内存，最小内存，和是否打印GC的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms8m -Xmx8m -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><ol><li>JVM的内存模型和分区~详细到每个区都放什么？</li><li>堆里面的分区有哪些？Eden，from，to，老年区，说说他们的特点？</li><li>GC的算法有哪些：标记清除法，标记整理，引用计数法</li><li>轻GC和中GC分别在什么时候发生？</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">定义对象进入老年区的时间，默认是15</span></span><br><span class="line">-XX:MaxTenuringThreshold=15</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础快速回顾-上</title>
      <link href="/2020/12/19/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%8A/"/>
      <url>/2020/12/19/java%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="java语言开发环境搭建"><a href="#java语言开发环境搭建" class="headerlink" title="java语言开发环境搭建"></a>java语言开发环境搭建</h2><h3 id="java虚拟机——JVM"><a href="#java虚拟机——JVM" class="headerlink" title="java虚拟机——JVM"></a>java虚拟机——JVM</h3><ul><li>实质就是翻译，把.class文件翻译成计算机能认识的机器语言</li><li>java所谓的跨平台指的是java程序跨平台。JVM不是跨平台的，各个平台（Windows，Linux，mac）的JVM是不同的。</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219152513.png" style="zoom:80%;" /></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219153329.jpeg" style="zoom: 80%;" /></li><li><strong>Java这个语言很非凡。</strong><br>一、你可以说它是<strong>编译型</strong>的。因为所有的Java代码都是要编译的，.java不经过编译就什么用都没有。<br>二、你可以说它是<strong>解释型</strong>的。因为java代码编译后不能直接运行，它是解释运行在JVM上的，所以它是解释运行的，那也就算是解释的了。 </li></ul><h3 id="JRE和JDK"><a href="#JRE和JDK" class="headerlink" title="JRE和JDK"></a>JRE和JDK</h3><ul><li>JRE：java Runtime Environment，包含JVM和运行时需要的核心类库</li><li>JDK：java Development Kit，是java程序开发工具包，包含JRE和开发人员使用的工具</li><li>想要运行一个已有的java程序，那么只需安装JRE即可；想要开发一个全新的java程序，那么必须安装JDK</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219152929.png" style="zoom:80%;" /><h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><ul><li>在全局系统变量中2个操作<ul><li>新建JAVA_HOME变量：（jdk的安装路径）</li><li>修改Path：添加%JAVA_HOME%\bin</li></ul></li></ul><h2 id="HelloWorld入门程序"><a href="#HelloWorld入门程序" class="headerlink" title="HelloWorld入门程序"></a>HelloWorld入门程序</h2><h3 id="程序开发步骤"><a href="#程序开发步骤" class="headerlink" title="程序开发步骤"></a>程序开发步骤</h3><ul><li>java程序开发三步骤：<strong>编写</strong>——》.java——》<strong>编译</strong>（编译器javac.exe）——》.class——》<strong>运行</strong>（JVM解释执行：java.exe）</li><li>新建文件名为HelloWorld的java文件，编辑：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;<span class="comment">//public的类名必须和文件名完全一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//编译</span><br><span class="line">javac HelloWorld.java</span><br><span class="line">//JVM解释执行</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><h3 id="HelloWorld程序说明"><a href="#HelloWorld程序说明" class="headerlink" title="HelloWorld程序说明"></a>HelloWorld程序说明</h3><ul><li>单行注释，多行注释：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*多行注释*/</span></span><br></pre></td></tr></table></figure><ul><li><code>public static void main(String[] args)</code>是程序入口</li></ul><h3 id="关键字说明：java中有特殊含义的保留字"><a href="#关键字说明：java中有特殊含义的保留字" class="headerlink" title="关键字说明：java中有特殊含义的保留字"></a>关键字说明：java中有特殊含义的保留字</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219161346.png" style="zoom:80%;" /><h3 id="标识符："><a href="#标识符：" class="headerlink" title="标识符："></a>标识符：</h3><ul><li>指的是在程序中，我们自定义的内容中，如类的名字，方法的名字，变量的名字等都是标识符，</li><li>命名规则（硬性要求）<ul><li>标识符可以包含：<strong>英文字符，数字，$符，_下划线</strong></li><li>标识符不能以数字开头</li><li>标识符不能是关键字</li></ul></li><li>命名规范（软性要求）<ul><li>类名规范：首字符大写，后面每个单词首字母大写（大驼峰式）</li><li>变量名规范：首字符小写，后面每个单词首字母小写（小驼峰式）</li><li>方法名规范：同变量名</li></ul></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>概念：在程序运行期间固定不变的量</li><li>分类：<ul><li>字符串常量：双引号引起来的</li><li>整数常量：直接写上的数字，没有小数点</li><li>浮点数常量：直接写上的数字，有小数点</li><li>字符常量：单引号引起来的单个字符，有且仅有一个字符</li><li>布尔常量：true或者false</li><li>空常量：null，代表没有任何数据</li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>字符串，数组，类，接口，Lambda等</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>整数型：byte，short，int，long</li><li>浮点型：float，double</li><li>字符型：char</li><li>布尔型：boolean</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219182115.png" style="zoom:67%;" /><p>注意事项：</p><ul><li>字符串不是基本类型，是引用类型</li><li>浮点型可能只是一个近似值</li><li>数据范围与字节数不一定相关</li><li>浮点数默认是double，float需要加后缀F</li><li>整数默认是int，long需要加上后缀L</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>程序运行期间，内容可以发生改变的量</p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名称; <span class="comment">//创建一个变量</span></span><br><span class="line">变量名称 = 数据值; <span class="comment">//赋值</span></span><br><span class="line">数据类型 变量名称 = 数据值; <span class="comment">//一步到位</span></span><br></pre></td></tr></table></figure></li><li><p>局部变量没有默认值，没有进行赋值不能直接使用</p></li><li><p>变量使用不能超过作用域（从定义变量开始，一直到直接所属的大括号结束为止）的范围</p></li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li>当等号两边的数据类型不一致时，将会发生数据类型转化，分为自动类型转换（隐式）&amp;强制类型转换（显式）</li></ul><h3 id="自动转换（隐式）"><a href="#自动转换（隐式）" class="headerlink" title="自动转换（隐式）"></a>自动转换（隐式）</h3><ul><li>规则：数据范围小的转化为大的。与字节数不一定相关。</li></ul><h3 id="强制转换（显式）"><a href="#强制转换（显式）" class="headerlink" title="强制转换（显式）"></a>强制转换（显式）</h3><ul><li>规则：范围小的类型 范围小的变量名 = （范围小的类型）范围大的数据</li><li>整形强制转换可能发生数据溢出：long——》int</li><li>浮点型强制转换可能精度损失：double——》int</li><li>byte/short/char三种类型都可以发生数学运算，在运算时首先会提升为int，再进行运算</li><li>boolean类型不能发生任何数据类型转换</li></ul><h2 id="ASCII-amp-Unicode"><a href="#ASCII-amp-Unicode" class="headerlink" title="ASCII&amp;Unicode"></a>ASCII&amp;Unicode</h2><ul><li>48代表’0’，65代表’A’，97代表’a’</li><li>数字和字符的对照关系表：是ASCII码表（American Standard Code for Information Interchange）</li><li>Unicode码表（万国码）：也是数字和符号的对照关系，开头0-127部分和ASCII完全一样，但是从128开始含有更多字符，包含中文字符。</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>运算符：运算特定操作的符号</p></li><li><p>表达式：用运算符连起来的式子叫做表达式</p></li><li><p>运算符分类：</p><ul><li><p>算数运算符：+，-，*，/，%，++，–</p><ul><li>如果运算中有不同类型的数据，那么结果将会是数据类型范围大的那种（类型自动转换）</li><li>加法：对于数值来说，就是数学加法；对于char来说，先按照ascii或unicode提升为int，然后再计算；对于String来说，是字符串的连接操作。</li><li>任何数据类型和字符串进行加法操作时，结果都会连接变成字符串。</li><li>常量不能使用自增or自减</li></ul></li><li><p>赋值运算符：</p><ul><li><p>=，+=，-=，*=，/=，%=</p></li><li><p>只有变量才能写在赋值运算符左边</p></li><li><p>复合赋值运算符隐含了一个强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> num = <span class="number">30</span>;</span><br><span class="line">num += <span class="number">5</span>;<span class="comment">//num = (byte) (int + int)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>比较运算符：</p><ul><li>==，&lt;，&gt;，&lt;=，&gt;=，!=</li><li>比较运算符的结果一定是一个boolean值</li><li>多次判断不能连着写</li></ul></li><li><p>逻辑运算符：</p><ul><li>&amp;&amp;，||，！</li><li>&amp;&amp;和||具有短路效果，从而节省一定的性能</li><li>逻辑运算符只能用于boolean值</li><li>&amp;&amp;和||可以连续写</li><li>对于<code>1&lt;x&lt;3</code>的连续情况，应该拆分为两个部分，然后使用运算符连接起来<code>1&lt;x&amp;&amp;x&lt;3</code></li></ul></li><li><p>三元运算符：</p><ul><li>格式：数据类型 变量名称 = 条件判断？表达式A：表达式B</li><li>条件判断true，表达式A的值赋给变量；条件判断false，表达式B的值赋给变量</li></ul></li></ul></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>引入：先把握整体，再把握局部</p></li><li><p>方法的定义</p><ul><li><p>方法定义的<strong>先后顺序无所谓</strong></p></li><li><p>方法定义必须是挨着的，不能在一个方法的内部定义另一个方法</p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名称(参数类型 参数名称,...)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法的调用</p><ul><li><p>方法定义后要执行需要在另一个方法中调用</p></li><li><p>三种调用格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单独调用</span></span><br><span class="line">方法名称(参数);</span><br><span class="line"><span class="comment">//打印调用</span></span><br><span class="line">System.out.println(方法名称(参数));</span><br><span class="line"><span class="comment">//赋值调用</span></span><br><span class="line">数据类型 变量名称 = 方法名称(参数);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法三要素：返回值，方法名称，参数列表</p></li><li><p>return两个作用：结束方法执行；返回一个返回值。</p></li><li><p>方法注意事项：</p><ul><li>方法应该定义在类当中，不能在方法中定义方法。</li><li>如果方法有返回值，必须写上return 返回值;</li><li>如果方法返回值类型为void，可以不写return语句，或者写return;（此时return是结束方法的作用）</li><li>return 后面的值类型必须和方法的返回值类型对应</li><li>一个方法中可以有多个return语句，但是必须保证一次执行只有一个会被执行到</li></ul></li></ul><h2 id="Jshell"><a href="#Jshell" class="headerlink" title="Jshell"></a>Jshell</h2><ul><li>Java Shell工具（JShell）是一个用于学习Java编程语言和Java代码原型的交互式工具。JShell是一个Read-Evaluate-Print循环（REPL），它在输入时评估声明，语句和表达式，并立即显示结果。该工具从命令行运行。</li></ul><h2 id="编译器的两点优化"><a href="#编译器的两点优化" class="headerlink" title="编译器的两点优化"></a>编译器的两点优化</h2><ul><li>对于byte/short/char三种类型来说，如果右侧赋值数值没有超过范围，那么javac编译器将会自动隐含地为我们补上一个(byte)/(short)/(char)；如果右侧超过了左侧范围，那么会直接编译器报错</li><li>在给变量赋值的时候，如果右侧的表达式当中全都是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><ul><li>单if</li><li>if ；else</li><li>if ；else if；else if；else</li><li>switch ；case break；default [break]<ul><li>最后一个break语句可以省略，但是一般不省略</li><li>switch后面的小括号中之只能是byte/short/char/int/String/enum枚举</li><li>switch语句格式可以很灵活，前后顺序可以颠倒。匹配哪一个case就从哪一个位置向下执行，直到遇到break或者整体结束为止。</li><li>如果执行到某个case且该case没有break，会穿透它下面的那个case</li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li><p>循环结构一般分为<strong>四部分</strong>：</p><ul><li>初始化语句：在循环开始最初执行，而且只执行一次</li><li>条件判断：如果成立循环继续，否则循环退出</li><li>循环体：重复要做的内容，若干语句</li><li>步进语句：每次循环后的扫尾工作</li></ul></li><li><p>for语句：</p><ul><li><p>结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式;条件判断布尔表达式;步进表达式)&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>while语句</p><ul><li><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    步进语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>do-while语句</p><ul><li><p>结构：无条件执行第一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    步进语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="三种循环区别"><a href="#三种循环区别" class="headerlink" title="三种循环区别"></a>三种循环区别</h3><ul><li>如果条件判断从来没有满足过，那么for和while执行0次，但是do-while<strong>至少</strong>会执行1次</li><li>for循环的变量定义在小括号中，那么循环内部才能使用</li><li>次数确定用for循环，否则多用while循环</li></ul><h3 id="break关键字和continue关键字"><a href="#break关键字和continue关键字" class="headerlink" title="break关键字和continue关键字"></a>break关键字和continue关键字</h3><ul><li>break用在switch中：一旦执行，整个switch立刻结束</li><li>break用在循环中：一旦执行，break的外第一层循环语句立刻结束</li><li>continue用在循环中：一旦执行，立刻跳过当前次循环剩余内容，马上开始下一次循环</li></ul><h2 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201220205132.png"></p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>对于功能类似的方法来说，因为参数列表不同却需要不同的方法名，太麻烦，所以引入了方法的重载。</li><li>方法的重载（override），<strong>多个方法的方法名一样，但是参数列表不一样</strong>。只需一个方法名，就可以实现多个功能</li><li>所谓的参数列表不一样，指的是：<ul><li>参数个数不同</li><li>参数类型不同</li><li>参数的多类型顺序不同</li><li>但是和“参数名称，返回值类型，方法修饰符”无关</li></ul></li><li>Java中的典型重载：<code>System.out.println()</code>方法</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>概念：一种容器，可以同时存放多个同类型数据</p></li><li><p>特定：</p><ul><li>是一种引用类型</li><li>数组中的多个数据，类型必须统一</li><li>数组的长度在程序运行中不可改变</li></ul></li><li><p>数组的初始化：在内存中创建一个数组，并且向其中赋予一位默认值</p><ul><li><p>动态初始化：指定长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名称 = <span class="keyword">new</span> 数据类型[数组长度];</span><br><span class="line"><span class="keyword">int</span>[] arrayA = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">300</span>];</span><br><span class="line">String[] stringA = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li><p>静态初始化：指定内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名称 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2.</span>..&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arrayB = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">String[] stringA = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化的省略格式</span></span><br><span class="line">数据类型[] 数组名称 = &#123;元素<span class="number">1</span>,元素<span class="number">2.</span>..&#125;;</span><br><span class="line">String[] stringA = &#123;<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>注意：</strong></p><ul><li><p>静态初始化没有直接指定长度，但是可以根据大括号里的元素的具体内容直接推算出长度</p></li><li><p>静态初始化&amp;动态初始化的标准格式可以差分为两个步骤，但是静态初始化的省略格式不能拆分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1;</span><br><span class="line">array1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] array1;</span><br><span class="line">array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><ul><li><p>直接打印数组名，得到的是数组对应的内存地址哈希值</p></li><li><p>访问数组元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrayA = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line">System.out.println(arrayA[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></li><li><p>如果<strong>动态初始化</strong>数组的时候，元素会自动拥有<strong>默认值</strong>，规则如下：</p><ul><li>整数类型：0</li><li>浮点类型：0.0</li><li>字符类型：’\u0000’</li><li>布尔类型：false</li><li>引用类型：null</li></ul></li><li><p><strong>静态初始化也有默认值</strong>，只是系统自动马上将默认值的替换成为了大括号当中的具体数值</p></li><li><p>数组经常遇到的问题：</p><ul><li><p>数组索引越界异常：<code>ArrayIndexOutOfBoundsException</code></p></li><li><p>```java<br>//未初始化<br>int[] array1;<br>System.out.println(array1[0]);</p><p>//空指针异常NullPointerExcetion<br>int[] array2 = null;<br>System.out.println(array2[0]);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 获取数组长度：`数组名称.length`；数组一旦创建，程序运行期间+长度不可改变</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  for(int i=0;i&lt;array.length;i++)&#123;</span><br><span class="line">      System.out.println(array[i]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历数组：就是对数组中每一个元素进行逐一处理。</p></li><li><p>数组作为<strong>方法参数</strong>和<strong>方法返回值</strong>：</p><ul><li>当调用方法的时候，向方法小括号传递的参数实际上是<strong>数组的地址值</strong></li><li>任何数据类型都能作为方法的参数类型和返回值类型，数组作为参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line">    printArray(array);<span class="comment">//传进去的就是一个地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] result = calculator(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">    System.out.println(result[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(result[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        System.out.println(array[i]);<span class="comment">//地址值[i]使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] calculate(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = a + b;</span><br><span class="line">    <span class="keyword">int</span> avg = sum / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    array[<span class="number">0</span>] = sum;</span><br><span class="line">    array[<span class="number">1</span>] = avg;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>java类的成员变量new的时候会有初始值，但是方法中的局部变量不会有初始值。这条性质能用java的内存模型来解释。</p><ul><li><strong>栈：</strong>存放的是方法中的局部变量<ul><li>局部变量：方法的参数，方法内部的变量，局部变量有作用域，一旦超出作用域，立刻从栈内存中消失</li></ul></li><li><strong>堆：</strong>凡是new出来的东西，都在堆中<ul><li>堆内存中的数据都有默认值：整数类型：0；浮点类型：0.0；字符类型：’\u0000’；布尔类型：false；引用类型：null</li></ul></li><li><strong>方法区：</strong>存储.class相关信息，包含方法的信息，包括static方法&amp;变量，类加载器classloader。<ul><li>注意：方法区只是包含了方法固定的相关信息，但是方法真正运行的数据都在栈中</li></ul></li><li><strong>本地方法栈：</strong>：与操作系统相关</li><li><strong>寄存器：</strong>与CPU相关</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210101180659.png" style="zoom:80%;" /><p>数组内存图：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201221092337.png" style="zoom: 67%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201221092837.png" style="zoom:67%;" /><h3 id="使用对象类型作为方法的参数-amp-返回值"><a href="#使用对象类型作为方法的参数-amp-返回值" class="headerlink" title="使用对象类型作为方法的参数&amp;返回值"></a>使用对象类型作为方法的参数&amp;返回值</h3><ul><li>当一个对象or数组作为参数，传递到方法中时，实际上传递的是对象or数组的地址值</li><li>当一个对象or数组作为返回值时，实际上返回的是对象or数组的地址值</li></ul><h3 id="局部变量-and-成员变量"><a href="#局部变量-and-成员变量" class="headerlink" title="局部变量 and 成员变量"></a>局部变量 and 成员变量</h3><table><thead><tr><th></th><th>定义位置</th><th>作用域</th><th>默认值</th><th>位置</th><th>生命周期</th></tr></thead><tbody><tr><td>局部变量</td><td>方法内</td><td>方法内</td><td>没有</td><td>栈</td><td>同方法栈的诞生&amp;消失</td></tr><tr><td>成员变量</td><td>方法外</td><td>类中</td><td>有(同数组)</td><td>堆</td><td>同对象的诞生&amp;消失</td></tr></tbody></table><h2 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h2><ul><li>面向过程：当需要实现一个功能时，每一个具体的步骤都要亲力亲为，详细处理每一个细节</li><li>面向对象：当需要实现一个功能时，不关心具体步骤，而是找一个能实现该功能的人帮我做事，帮你做事的这个人就是对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line"><span class="comment">//希望能把数组打印为[10,20,30,40,50]</span></span><br><span class="line"><span class="comment">//面向过程</span></span><br><span class="line">System.out.println(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == array.length-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(array[i]+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(array[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//面向对象</span></span><br><span class="line">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure><ul><li><p><strong>类是对象的模板，对象是类的实例</strong></p></li><li><p><strong>类：</strong></p><ul><li><p>成员变量（属性）：直接定义在类中方法之外</p></li><li><p>成员方法（行为）：普通方法有static，成员方法灭有static</p></li><li><p>通常类不能直接使用，需要根据类创建一个对象</p><ol><li>导包：<code>import 包名.类名</code>，如果两个类同属一个包，可以不import</li><li>创建：<code>类名称 对象名 = new 类名称()</code></li><li>使用：<code>对象名.成员变量名</code>，<code>成员方法名()</code></li></ol></li><li><p>new一个对象时，如果成员变量没有赋值会有一个默认值，规则和数组一样</p></li><li><p>一个对象的内存区：</p><ul><li>对于堆中的一个对象来说，他的成员方法保存的实际上是一个地址值，指向方法区中的成员方法内容</li></ul></li><li><p>一个对象的内存图：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20210102114811.png"></p></li><li><p>两个对象使用同一个方法的内存图：</p><p><img src="https://s3.ax1x.com/2021/01/02/rzHuvV.png"></p></li><li><p>两个引用指向同一个对象的内存图：</p><p><img src="https://s3.ax1x.com/2021/01/02/rzHV4s.png"></p></li></ul></li></ul><h3 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h3><ul><li>封装</li><li>继承</li><li>多态</li></ul><h2 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h2><ul><li>方法就是一种封装：将不同功能模块提取出来单独成一个方法，可以说成面向方法编程</li><li>关键字private也是一种封装：使用private修饰成员变量和方法。本类中可以随意访问，但是超出了本类无法<strong>直接</strong>访问。可通过public方法访问（例如setter和getter）</li></ul><p>含义：将一些细节信息隐藏起来，对外界不可见。</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>方法中的局部变量和类中的成员变量从名的时候，根据“就近原则”，优先局部变量。如果方法中重名了，并且需要本类中的成员变量，需要加this关键字。</p><p><strong>重点：通过谁调用的方法，谁就是this</strong></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>专门用来创建对象的方法，我们通过关键字new来创建对象的时候，其实就是调用了构造方法。</p><ul><li>构造方法名称需要和类的名称一模一样</li><li>构造方法没有返回值，不能return，方法前连void都不要写</li><li>如果没有编写任何构造方法，编译器会默认一个什么都不做的构造方法。如果自己写了一个有参构造函数，最好加一个无参构造函数，因为编译器不会赠送。</li><li>一旦编写了至少一个构造方法，编译器不会赠送构造方法了</li><li>构造方法可以进行重载<ul><li>重载：方法名相同，参数不同</li></ul></li></ul><h3 id="标准的类（JavaBean）"><a href="#标准的类（JavaBean）" class="headerlink" title="标准的类（JavaBean）"></a>标准的类（JavaBean）</h3><ul><li>所有成员变量都使用private关键字修饰</li><li>为每一个成员变量编写一对 Getter和Setter 方法</li><li>编写一个无参构造方法</li><li>编写一个全参构造方法</li></ul><h3 id="几个重要的Java-API"><a href="#几个重要的Java-API" class="headerlink" title="几个重要的Java API"></a>几个重要的Java API</h3><ul><li>导包：import 包路径.类名称（同包可不导，java.lang下可不导）</li><li>创建：类名称 对象名 = new 类名称();</li><li>使用：对象名.成员方法名();</li></ul><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//从键盘输入</span></span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();<span class="comment">//获取从键盘输入的int变量</span></span><br><span class="line">String str = sc.next();<span class="comment">//获取从键盘输入的字符串变量</span></span><br></pre></td></tr></table></figure><h4 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">    </span><br><span class="line">Random r = <span class="keyword">new</span> Random();<span class="comment">//随机数种子</span></span><br><span class="line"><span class="keyword">int</span> num1 = r.nextInt();</span><br><span class="line"><span class="keyword">int</span> num2 = r.nextInt(<span class="number">3</span>);<span class="comment">//范围：左闭右开[0,3)</span></span><br></pre></td></tr></table></figure><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型只能是引用类型，不能是基本类型</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="keyword">boolean</span> isAdd = list.add(<span class="string">&quot;Sam Smith&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Mariah Carey&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Colbie Caillat&quot;</span>);</span><br><span class="line">String name = list.get(<span class="number">0</span>);</span><br><span class="line">String delName = list.remove(<span class="number">1</span>);<span class="comment">//返回值是删除的元素</span></span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"><span class="comment">//ArrayList保存基本类型包装类</span></span><br><span class="line"><span class="comment">//Byte,Short,Integer,Long,Float,Double,Character,Boolean</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//从jdk1.5后，支持自动装箱/自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> i0 = list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="String：字符串"><a href="#String：字符串" class="headerlink" title="String：字符串"></a>String：字符串</h4><ul><li>字符串内容不可变</li><li>存在字符串常量池中的字符串可共享</li><li>字符串效果上相当于char[]字符数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建字符串</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String();</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="keyword">char</span>[] array);</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="keyword">byte</span>[] array);</span><br><span class="line">String s4 = <span class="string">&quot;hahahahaha&quot;</span>;<span class="comment">//在字符串常量池中</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/01/DqkKswfeu3PhVQ8.png" alt="image-20210301121309678"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="comment">//equals() &amp; equalsIgnoreCase()</span></span><br><span class="line">String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line">System.out.println(s1.equals(s2));</span><br><span class="line">System.out.pringln(s1.equalsIgnoreCase(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"><span class="comment">//length()</span></span><br><span class="line"><span class="keyword">int</span> l = s1.length();</span><br><span class="line"><span class="comment">//concat()</span></span><br><span class="line">String s3 = s1.concat(<span class="string">&quot;,world!&quot;</span>);<span class="comment">//返回新的字符串，字符串是常量不变</span></span><br><span class="line"><span class="comment">//charAt()</span></span><br><span class="line"><span class="keyword">char</span> ch = s1.charAt(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//indexOf()</span></span><br><span class="line"><span class="keyword">int</span> index = s1.indexOf(<span class="string">&quot;ll&quot;</span>);</span><br><span class="line"><span class="comment">//subString():截取</span></span><br><span class="line">String s4 = s3.subString(<span class="number">6</span>);<span class="comment">//world</span></span><br><span class="line">String s5 = s3.subString(<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//hello</span></span><br><span class="line"><span class="comment">//toCharArray():转换为char数组</span></span><br><span class="line"><span class="keyword">char</span>[] chars = <span class="string">&quot;Hello&quot;</span>.toCharArray();</span><br><span class="line"><span class="comment">//getBytes():转换为byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="string">&quot;Hello&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">//replace():替代</span></span><br><span class="line">String str1 = <span class="string">&quot;What&#x27;s the matter with you,fuck U!&quot;</span>;</span><br><span class="line">String str2 = str1.replace(<span class="string">&quot;fuck&quot;</span>,<span class="string">&quot;***&quot;</span>);</span><br><span class="line"><span class="comment">//split():分割</span></span><br><span class="line">String str3 = <span class="string">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class="line">String[] array1 = str3.split(<span class="string">&quot;,&quot;</span>);<span class="comment">//参数是正则表达式</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意：String的getBytes()方法将String转化为字节使用的编码是当前.java文件的编码。</strong></li></ul><h4 id="工具类Arrays，Math"><a href="#工具类Arrays，Math" class="headerlink" title="工具类Arrays，Math"></a>工具类Arrays，Math</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arrays</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">//toString():以字符串的形式打印数组</span></span><br><span class="line"><span class="keyword">int</span>[] intArray = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">String intStr = Arrays.toString(intArray);</span><br><span class="line"><span class="comment">//sort():如果排序自定义类型数组，该自定义类必须实现Comparable or Comparator接口</span></span><br><span class="line">Arrays.sort(intArray);<span class="comment">//会直接修改intArray数组</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math</span></span><br><span class="line"><span class="keyword">import</span> java.util.Math;</span><br><span class="line"><span class="comment">//abs()</span></span><br><span class="line">System.out.println(Math.abs(-<span class="number">3.14</span>));</span><br><span class="line"><span class="comment">//ceil():向上取整</span></span><br><span class="line">System.out.println(Math.ceil(<span class="number">3.14</span>));</span><br><span class="line"><span class="comment">//floor():向下取整</span></span><br><span class="line">System.out.println(Math.floor(<span class="number">3.14</span>));</span><br><span class="line"><span class="comment">//round():四舍五入</span></span><br><span class="line">System.out.println(Math.round(<span class="number">3.14</span>));</span><br><span class="line"><span class="comment">//Math.PI:近似圆周率</span></span><br></pre></td></tr></table></figure><h3 id="其他知识点："><a href="#其他知识点：" class="headerlink" title="其他知识点："></a>其他知识点：</h3><h4 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h4><ul><li><p>格式：new 类名称();</p></li><li><p>确定某个对象只需用使用一次，那么可以使用匿名对象，之后会被自动回收。</p></li><li><p>匿名对象可以作为 参数 &amp; 返回值</p></li><li><p>```java<br>new Person().name = “Mariah Carey”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### static关键字</span><br><span class="line"></span><br><span class="line">* 一个成员变量 or 成员方法 有了static关键字，就是属于类的，本类所有对象共享同一份</span><br><span class="line"></span><br><span class="line">* 静态成员方法只能访问静态成员变量（因为静态方法是class初始化就建立在了内存的方法区，此时对象中的普通成员变量可能还没有在内存的堆中建立）</span><br><span class="line"></span><br><span class="line">* 静态方法中不能用 this 关键字，**static和类相关，和对象无关**</span><br><span class="line"></span><br><span class="line">* 静态代码块</span><br><span class="line"></span><br><span class="line">  比构造方法先执行，并且只执行一次</span><br><span class="line"></span><br><span class="line">  用来一次性对静态成员变量进行赋值</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  static&#123;</span><br><span class="line">      //内容</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><ul><li><p>子类和父类关系是 “子类 is a 父类” 的关系</p></li><li><p>```java<br>public class Employee{</p><pre><code>private int name;private int age;</code></pre><p>}<br>public class Teacher extends Employee{</p><pre><code>private int level;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 父子类继承关系中，如果成员变量重名，创建子类对象时，有两种方式</span><br><span class="line"></span><br><span class="line">  1. 直接通过**子类对象**访问成员变量：等号左边是谁，就优先用谁，没有就向上找</span><br><span class="line">  2. 间接通过**成员方法**访问成员变量：方法属于谁就优先用谁的，没有就向上找</span><br><span class="line"></span><br><span class="line">* **重写特点：**（方法重写/覆盖：方法名，参数相同）</span><br><span class="line"></span><br><span class="line">  1. 父子类的方法重名，访问成员变量的规则：new创建的对象是谁，就优先用谁，没有就往上找</span><br><span class="line"></span><br><span class="line">  2. `@override`注解用来检测是否覆盖正确</span><br><span class="line"></span><br><span class="line">  3. 子类方法的返回值类 必须 低于等于 父类方法的返回值类</span><br><span class="line"></span><br><span class="line">  4. 子类方法的权限修饰符 必须 大于等于 父类方法的权限修饰符</span><br><span class="line"></span><br><span class="line">     * public &gt; protected &gt; (default) &gt; private</span><br><span class="line"></span><br><span class="line">  5. 设计原则：对于已经投入使用的类，不要改动它。定义一个新类继承老类重复利用父类共性并添加新的改动</span><br><span class="line"></span><br><span class="line">     ```java</span><br><span class="line">     public class Phone&#123;</span><br><span class="line">         public void call()&#123;</span><br><span class="line">             System.out.println(&quot;打电话&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         public void send()&#123;</span><br><span class="line">             System.out.println(&quot;发短信&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         public void show()&#123;</span><br><span class="line">             System.out.println(&quot;显示号码&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     public class NewPhone extends Phone&#123;</span><br><span class="line">         public void snow()&#123;</span><br><span class="line">             super.show();</span><br><span class="line">             System.out.println(&quot;显示姓名&quot;);</span><br><span class="line">             System.out.println(&quot;显示头像&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>子类构造方法中的<strong>第一个语句</strong>是一个赠送的<code>super()</code>，但是不会赠送有参父类构造，需要自己显式声明<code>super(参数)</code>来调用父类重载构造</li></ol></li><li><p><strong>super关键字</strong>三种用法：</p><ol><li>子类成员方法中，访问父类成员变量</li><li>子类成员方法中，访问父类成员方法</li><li>子类构造方法中，访问父类构造方法</li></ol></li><li><p><strong>this关键字</strong>三种用法：</p><ol><li>本类成员方法中，访问本类成员变量</li><li>本类成员方法中，访问本类成员方法</li><li>本类构造方法中，访问本类另一个构造方法</li></ol></li><li><p>**this 和 super **不能同时存在于一个构造方法中</p></li></ul><p><img src="https://i.loli.net/2021/03/01/eUIu7fjZxE4Xtch.png" alt="image-20210301194433254"></p><ul><li>Java语言是单继承，多级继承的</li></ul><h3 id="抽象类-amp-抽象方法"><a href="#抽象类-amp-抽象方法" class="headerlink" title="抽象类 &amp; 抽象方法"></a>抽象类 &amp; 抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法所在的类必须是抽象类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalMethod</span><span class="params">()</span></span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不能直接new抽象类对象。但是抽象类中可以有构造函数，用来供子类对象创建时初始化父类成员变量</li><li>必须用子类继承抽象类 并 覆盖重写所有的抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat eat fish.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象类中不一定包含抽象方法，但是有抽象方法的类一定是抽象类</li><li>抽象类的子类必须重写父类中的抽象方法，除非子类也是抽象类</li></ul><h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><ul><li><p>接口类中，不同jdk版本能包含的内容不同</p><ol><li><p>jdk7：常量，抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="comment">//常量：public,static,final是固定的,可以省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MY_CLASS  = <span class="number">10</span>;<span class="comment">//必须赋值</span></span><br><span class="line">    <span class="comment">//public和abstract是固定的,可以省略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;first method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>jdk8：默认方法，静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认方法：实现类不必实现，因为接口中的默认方法有实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不能通过接口实现类对象来调用静态方法：因为一个类可以实现多个接口。应该通过接口名调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodAbs2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>jdk9：私有方法</p><p>需要解决的问题：需要一个共有方法来解决两个默认方法之间的重复代码问题，但是这个共有方法不该让实现类实现，应该是私有化的。</p><ol><li>普通私有方法：解决多个默认方法之间的重复代码问题</li></ol></li><li><p>静态私有方法：解决多个静态方法之间的重复代码问题</p></li></ol><p><img src="https://i.loli.net/2021/03/01/yjF51ITcwOpZ4SK.png" alt="image-20210301224807631"></p><p><img src="https://i.loli.net/2021/03/01/lHI7xpe93nDScA8.png" alt="image-20210301225536727"></p></li><li><p><strong>接口-接口：多继承</strong></p><p>类-类：单继承</p><p>类-接口：多实现</p></li></ul><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><ul><li><p>继承是多态的前提：学生既是学生，也是人，同事拥有多种形态</p></li><li><p>```java<br>父类名称 对象名 = new 子类名称();<br>接口名称 对象名 = new 实现类名称();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 注意：继承 or 实现中，成员方法能覆盖重写，但是成员变量不能。所以：</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  Fu obj = new Zi();</span><br><span class="line">  obj.成员变量;//看等号左边是谁就访问谁的成员变量，没有就向上找（编译看左边，运行还看左边）</span><br><span class="line">  obj.成员方法();//new的谁就优先用谁的成员方法，没有就向上找（编译看左，运行看右）</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象向上转型"><a href="#对象向上转型" class="headerlink" title="对象向上转型"></a>对象向上转型</h3><ul><li>向上转型一定是安全的</li><li>但是一旦上转为父类，就无法调用子类特有的方法</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一只猫，当做动物看待</span></span><br><span class="line">Animal animal = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="comment">//类似于自动类型转化(范围大&lt;---范围小)</span></span><br><span class="line"><span class="keyword">double</span> num = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="对象向下转型"><a href="#对象向下转型" class="headerlink" title="对象向下转型"></a>对象向下转型</h3><ul><li><p>上转后，如果需要调用子类特有的方法，需要再原路下转</p></li><li><p>可以使用instanceof判断类的所属</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上转后，还原为猫</span></span><br><span class="line">Animal animal = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat cat  = (Cat)animal;</span><br><span class="line"><span class="comment">//类似于强制类型转换(范围小&lt;---范围大)</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)<span class="number">10.0</span>;</span><br><span class="line"><span class="comment">//只能原路还原，如果把animal还原为狗，会报错ClassCastException,就像强制类型转换的精度损失</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="final关键字：“断子绝孙”关键字"><a href="#final关键字：“断子绝孙”关键字" class="headerlink" title="final关键字：“断子绝孙”关键字"></a>final关键字：“断子绝孙”关键字</h3><ol><li><p>可以修饰一个类：不能有任何子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;<span class="comment">//和abstract关键字矛盾</span></span><br></pre></td></tr></table></figure></li><li><p>可以修饰一个方法：不能覆盖重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//和abstract关键字矛盾</span></span><br></pre></td></tr></table></figure></li><li><p>可以修饰一个局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//常量</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num;num=<span class="number">10</span>;<span class="comment">//也可以</span></span><br><span class="line"><span class="comment">//对基本数据类型来说，是变量的数据不可改变</span></span><br><span class="line"><span class="comment">//对于引用数据类型来说，是引用的数据不可改变，即是引用所指向的地址不可改变</span></span><br></pre></td></tr></table></figure></li><li><p>可以修饰一个成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和局部变量的区别是成员变量有默认值，所以一旦是final的成员变量，如果不第一时间初始化，他就只能是默认值常量</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">final成员变量赋值的两种方式</span></span><br><span class="line"><span class="comment">1. 直接赋值</span></span><br><span class="line"><span class="comment">2. 构造方法赋值</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4种权限修饰符-public-gt-protected-gt-default-gt-private"><a href="#4种权限修饰符-public-gt-protected-gt-default-gt-private" class="headerlink" title="4种权限修饰符 (public &gt; protected &gt; (default) &gt; private)"></a>4种权限修饰符 (public &gt; protected &gt; (default) &gt; private)</h3><table><thead><tr><th></th><th>public</th><th>protected</th><th>(default)</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一个包</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>不同包子类</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>不同包非子类</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><ul><li>内用外，随意访问；外用内，需要内部类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类方法&quot;</span>);</span><br><span class="line">            System.out.println(name);<span class="comment">//内用外</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> methodBody&#123;</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();<span class="comment">//外用内</span></span><br><span class="line">        System.out.println(<span class="string">&quot;外部类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MainTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body();</span><br><span class="line">        </span><br><span class="line">        body.methodBody();<span class="comment">//间接使用成员内部类</span></span><br><span class="line">        </span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().<span class="function">new <span class="title">Heart</span><span class="params">()</span></span>;<span class="comment">//直接使用成员内部类</span></span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内部类成员变量重名情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">            System.out.println(num);<span class="comment">//30</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num);<span class="comment">//20</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num);<span class="comment">//10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><ul><li>只有当前所属的方法内部才能使用</li><li>从jdk8开始，只要局部内部类的局部变量事实不变，那么final关键字可以省略。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//jdk8后,final关键字可省略</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MainTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.methodOuter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><ul><li>如果接口的实现类 or 父类的继承类 只需要使用<strong>唯一的一次</strong>，那么可以省略该类的定义，直接使用【匿名内部类】</li><li>匿名内部类是省略了【单独实现子类】，匿名对象是省略了【对象引用名称】</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MainTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyInterface obj = <span class="keyword">new</span> MyInterface()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        obj.method();</span><br><span class="line">        MyInterface obj2 = <span class="keyword">new</span> MyInterface()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现了方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method();<span class="comment">//匿名内部类的匿名对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>外部类权限：public任何包都可以访问 / (default同一个包可以访问)</p><p>成员内部类权限：所有都可以</p><p>局部内部类权限：什么都不能写</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-反射</title>
      <link href="/2020/12/19/java-%E5%8F%8D%E5%B0%84/"/>
      <url>/2020/12/19/java-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h4 id="静态语言（强类型语言）"><a href="#静态语言（强类型语言）" class="headerlink" title="静态语言（强类型语言）"></a>静态语言（强类型语言）</h4><p>静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前必须声明数据类型。<br>例如：C++、Java、Delphi、C#等。</p><h4 id="动态语言（弱类型语言）"><a href="#动态语言（弱类型语言）" class="headerlink" title="动态语言（弱类型语言）"></a>动态语言（弱类型语言）</h4><p>动态语言是在运行时确定数据类型的语言。变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。<br>例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。</p><h4 id="强类型定义语言"><a href="#强类型定义语言" class="headerlink" title="强类型定义语言"></a>强类型定义语言</h4><p>强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</p><h4 id="弱类型定义语言"><a href="#弱类型定义语言" class="headerlink" title="弱类型定义语言"></a>弱类型定义语言</h4><p>数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。</p><h2 id="什么是反射（反射机制）"><a href="#什么是反射（反射机制）" class="headerlink" title="什么是反射（反射机制）"></a>什么是反射（反射机制）</h2><ul><li><p>Java时静态语言，通过反射，Java成为了准动态语言</p></li><li><p>反射禁止允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>这个存在内存中的Class类型的对象就是一面镜子，我们通过镜子的反射能看到类的结构。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201218155009.png"></p></li><li><p>反射机制的功能：</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul></li><li><p>反射的优点和缺点：</p><ul><li>可以实现动态创建对象和编译，很灵活</li><li>对性能有影响，反射基本上是一种解释操作</li></ul></li></ul><h2 id="理解Class类并获取Class实例"><a href="#理解Class类并获取Class实例" class="headerlink" title="理解Class类并获取Class实例"></a>理解Class类并获取Class实例</h2><ul><li><p>发射相关的主要API</p><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li></ul></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> itn age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,<span class="keyword">int</span> id,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略get,set方法，toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.jack.User&quot;</span>);</span><br><span class="line">        c1.get</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Class类是Java反射的源头。所谓反射实际就是：可以通过对象反射求出类的名称</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201218162814.png" style="zoom: 80%; margin-left:0px"/></li></ul><h2 id="类的加载与ClassCloader"><a href="#类的加载与ClassCloader" class="headerlink" title="类的加载与ClassCloader"></a>类的加载与ClassCloader</h2><ul><li><p>对象照镜子后可以得到的信息：某个类的属性，方法和构造器，某个类实现了哪些接口。</p></li><li><p>对于一个类而言，JRE都为其保留一个不变的Class类型的对象，一个Class对象包含了特定某个结构的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection地根源，针对任何逆向动态加载，运行的类，唯有先获得相应的Class对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class类的常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Class <span class="title">forName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">newInstance</span><span class="params">()</span></span>;</span><br><span class="line">getName();</span><br><span class="line"><span class="function">Class <span class="title">getSuperClass</span><span class="params">()</span></span>;</span><br><span class="line">Class[] getinterfaces();</span><br><span class="line"><span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">Constructor[] getConstructor();</span><br><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name,Class T)</span></span>;</span><br><span class="line">Field[] getDeclaredFields();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class类的实例</span></span><br><span class="line"><span class="comment">//通过类的clas属性获取（多用于传参）</span></span><br><span class="line">Class c1 = Person.class;</span><br><span class="line"><span class="comment">//用类的实例的getClass获取Class对象（多用于对象获取字节码）</span></span><br><span class="line">Class c2 = person.getClass();</span><br><span class="line"><span class="comment">//用Class类的静态方法forName通过一个类的全类名获取Class对象（多用于读取配置文件）</span></span><br><span class="line">Class c3 = Class.forName(<span class="string">&quot;jack.Person&quot;</span>);</span><br><span class="line"><span class="comment">//内置基本数据类型的包装类可以直接用类名.Type</span></span><br><span class="line"><span class="comment">//还可以利用ClassLoader</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219101125.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219101155.png"></p><h2 id="类初始化的时机"><a href="#类初始化的时机" class="headerlink" title="类初始化的时机"></a>类初始化的时机</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219101511.png"></p><h2 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219102507.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219113843.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219113851.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取系统类加载器可以加载的路径</span></span><br><span class="line">System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219114522.png"></p><h2 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h2><ul><li>通过反射获取运行时类的完整结构<ul><li>Field：全部的属性</li><li>Method：全部的方法</li><li>Constructor：全部的构造器</li><li>Superclass：所继承的父类</li><li>Interface：实现的全部接口</li><li>Annotation：注解</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.jack.User&quot;</span>);</span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">        System.out.println(c1.getSimpleName());</span><br><span class="line">        System.out.println(c1.getFields());</span><br><span class="line">        System.out.println(c1.getDeclaredFields());</span><br><span class="line">        System.out.println(c1.getFields(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(c1.getDeclaredField(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(c1.getMethods());</span><br><span class="line">        System.out.println(c1.getDeclaredMethods());</span><br><span class="line">        System.out.println(c1.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="keyword">null</span>));</span><br><span class="line">        System.out.println(c1.getMethod(<span class="string">&quot;setName&quot;</span>,String.class));</span><br><span class="line">        System.out.println(c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>,<span class="keyword">null</span>));</span><br><span class="line">        System.out.println(c1.getConstructors());</span><br><span class="line">        System.out.println(c1.getDeclaredConstructors());</span><br><span class="line">        System.out.println(c1.getConstructor(String.class,<span class="keyword">int</span>.class,<span class="keyword">int</span>.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.jack.User&quot;</span>);</span><br><span class="line">        User user1 = (User)c1.newInstance();<span class="comment">//本质上调用无参构造器</span></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class,<span class="keyword">int</span>.class);</span><br><span class="line">        User user2 = constructor.newInstance(<span class="string">&quot;Jack&quot;</span>,<span class="number">001</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//通过反射调用方法</span></span><br><span class="line">        User user3 = c1.newInstance();</span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String,<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;Sam&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user4 = c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射：不能直接访问私有属性，我们要关闭程序的安全检测。这里如果设置为false则指示反射的对象实施Java语言的语言访问检查</span></span><br><span class="line">        name.set(user4,<span class="string">&quot;Mariah&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>反复执行类中获取名字的方法的三种方式的效率对比：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201219122112.png" style="zoom: 80%;" /></li></ul><h2 id="通过反射操作泛型"><a href="#通过反射操作泛型" class="headerlink" title="通过反射操作泛型"></a>通过反射操作泛型</h2><ul><li>Java采用的泛型擦除机制来引入泛型，Java中的泛型仅仅是给编译器javac使用的，确保数据的安全性和免去强制类型转换问题。但是，一旦编译完成，所有和泛型相关的类型会全部擦除。</li><li>为了通过反射来操作这些类型，Java新增了Parameterized，GenericArrayType，TypeVariable和WildcaredType几种类型来代表<strong>不能被归一到Class类中的类型</strong>但是又和原始类型齐名的类型</li><li>ParameterizedType：表示一种参数化类型，比如<code>Collection&lt;String&gt;</code></li><li>GenericArrayType：表示一种元素类型是参数化类型或者类型变量的数组类型</li><li>TypeVaraible：是各种类型变量的公共父接口</li><li>WildcaredType：代表一种通配符类型表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;  </span><br><span class="line">    <span class="comment">//定义两个带泛型的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String,Person&gt; map,List&lt;Person&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo.test01()&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer,Person&gt; <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo.test02()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;           </span><br><span class="line">            <span class="comment">//获得指定方法参数泛型信息</span></span><br><span class="line">            Method m = Demo.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class,List.class);</span><br><span class="line">            Type[] t = m.getGenericParameterTypes();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Type paramType : t) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;#&quot;</span>+paramType);</span><br><span class="line">                <span class="keyword">if</span>(paramType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                    <span class="comment">//获取泛型中的具体信息</span></span><br><span class="line">                    Type[] genericTypes = ((ParameterizedType) paramType).getActualTypeArguments();</span><br><span class="line">                    <span class="keyword">for</span> (Type genericType : genericTypes) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;泛型类型：&quot;</span>+genericType);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得指定方法返回值泛型信息</span></span><br><span class="line">            Method m2 = Demo.class.getMethod(<span class="string">&quot;test02&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">            Type returnType = m2.getGenericReturnType();</span><br><span class="line">            <span class="keyword">if</span>(returnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                    Type[] genericTypes = ((ParameterizedType) returnType).getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Type genericType : genericTypes) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;返回值，泛型类型：&quot;</span>+genericType);</span><br><span class="line">                    &#125;                   </span><br><span class="line">            &#125;       </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过注解反射操作注解"><a href="#通过注解反射操作注解" class="headerlink" title="通过注解反射操作注解"></a>通过注解反射操作注解</h2><p><strong>小例子：</strong>通过注解和反射完成类和表结构的映射关系</p><p>ORM：Object Relationship Mapping——》对象关系映射</p><ul><li>类和表结构对应</li><li>睡醒和字段对应</li><li>对象和记录对应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test12</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;dome_05_注解.Student2&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射 获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得 注解 value 的值</span></span><br><span class="line">        Tablekuang annotation = (Tablekuang) c1.getAnnotation(Tablekuang.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类指定的注解</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Fieldkuang annotation2 = name.getAnnotation(Fieldkuang.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(annotation2.Columname());</span><br><span class="line">        System.out.println(annotation2.type());</span><br><span class="line">        System.out.println(annotation2.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Tablekuang &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Fieldkuang &#123;</span><br><span class="line">    <span class="function">String <span class="title">Columname</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">()</span> </span>&#123;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> id;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;    <span class="keyword">this</span>.id = id;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> age;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;    <span class="keyword">this</span>.age = age;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> name;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;    <span class="keyword">this</span>.name = name;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-注解</title>
      <link href="/2020/12/19/java-%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/12/19/java-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h2><ul><li>可以被其他程序读取</li><li>可以附加在package,class,method,field上都可以添加注解</li><li>可通过反射实现对注解中信息的访问</li><li>注解是jdk1.5后的新特性</li></ul><h2 id="注解作用"><a href="#注解作用" class="headerlink" title="注解作用"></a>注解作用</h2><ol><li>编写文档：通过代码里标识的注解生成doc文档</li><li>代码分析：通过代码里标识的注解堆代码进行分析（结合反射）</li><li>编译检查：通过代码里标识的注解让编译器能实现基本的编译检查（@Override）</li></ol><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><ul><li>@Override：必须重写父类的方法</li><li>@Deprecated：已过时的，不推荐使用，存在更好的方式</li><li>@SuppressWarning：镇压警告</li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul><li>负责解释其他注解的注解：Java定义了4个标准的meta-annotation类型，以供其他的annotation类型做说明</li><li>@target：描述注解使用范围</li><li>@Retention：描述什么级别保存该注释信息，用于描述注解的生命周期(SOURCE&lt;CLASS&lt;RUNTIME)</li><li>@Documented：说明该注解将被包含在javadoc中</li><li>@Inherited：说明子类可以继承父类中的该注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value=&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value=RetentionPolicy=RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>@interface用来声明一个注解</li><li>注解体中的每一个方法实际就是一个配置参数，方法名就是参数名，返回值类型就是参数的类型（返回值只能是Class,String,enum）</li><li>可以通过default来声明参数的默认值</li><li>只有一个参数，参数名是value，赋值时可省略参数名</li><li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串0作为默认值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//注解可以显式赋值，如果没有默认值必须给注解赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotation(name = &quot;JackYang&quot;,school=&#123;&quot;西部开源&quot;,&quot;清华大学&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value=&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value=RetentionPolicy=RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation()&#123;</span><br><span class="line">   <span class="comment">//注解的参数：参数类型+参数名</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//默认值是-1代表不存在</span></span><br><span class="line">    String[] school();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初试刷机</title>
      <link href="/2020/12/05/%E5%88%9D%E8%AF%95%E5%88%B7%E6%9C%BA/"/>
      <url>/2020/12/05/%E5%88%9D%E8%AF%95%E5%88%B7%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/Top-10-Android-Emulators-for-Linux-To-Enjoy-Android-Apps-in-Linux.jpg" alt="img"></p><h2 id="解BL锁"><a href="#解BL锁" class="headerlink" title="解BL锁"></a>解BL锁</h2><ol><li>首先需要确保MIUI处于开发版最新版</li><li>连续点击全部参数里的MIUI版本将设备处于开发者模式</li><li>退出系统中所有登录的账号（小米账号，谷歌账号……）</li><li>关机后打开fastboot模式（同时按电源键&amp;音量下键）</li><li>向小米官方申请解锁并在电脑上下载miflash解锁工具</li><li>电脑usb连接手机，点击解锁，会显示成功。</li></ol><h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><ol><li>在刷新的rec和新系统之前如果需要备份原系统的数据，可以用小米助手（MiAssistant）来备份数据，官方可下载。</li></ol><h2 id="刷入第三方REC"><a href="#刷入第三方REC" class="headerlink" title="刷入第三方REC"></a>刷入第三方REC</h2><ol><li>可选的第三方REC很多（TWRP，橙狐，奇兔）</li><li>根据选择的REC不同，刷入REC的方式也不同，这里以TWRP为例：</li><li>在各种论坛自己找到自己设备（小米平板4）的TWRP刷入工具包，按照规则傻瓜式操作即可操作成功，成功后系统自动启动进入REC</li></ol><h2 id="刷入系统-amp-面具-amp-谷歌套件"><a href="#刷入系统-amp-面具-amp-谷歌套件" class="headerlink" title="刷入系统&amp;面具&amp;谷歌套件"></a>刷入系统&amp;面具&amp;谷歌套件</h2><ol><li>可以选择各种适配自己设备的系统，以魔趣为例：</li><li>登录魔趣官网<code>https://download.mokeedev.com/</code>，根据设备型号选择下载系统包（稳定版&amp;每夜版）</li><li>在论坛寻找下载magisk面具zip包</li><li>在<code>https://opengapps.org/</code>下载谷歌套件zip包</li><li>之前的三个包可以在电脑下载</li><li>设备关机并进入REC（同时按电源键&amp;音量上键）</li><li>清理data分区和四清，重启进入REC</li><li>从电脑拷入三个zip包进入设备根目录</li><li>点击安装，选择系统zip包刷入</li><li>继续刷入magisk包，成功后重启进入系统</li><li>此时基本就可以了，系统基本配置好后就可以关机再次进入REC，刷入谷歌套件zip包，重启即可</li></ol><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol><li>谷歌套件如果只需要谷歌服务的话，推荐用nano版本的，其他版本会有其他不必要的东西</li><li>经常出现这种情况：再次进入REC时会让输入data密码确认，否则访问不了data目录，此时可能有两种情况：<ol><li>系统设置了开机密码，此密码就是开机密码</li><li>设备没开机密码，但是还是要输入data密码，此时就没辙了，除了清理data毫无他法。这里的问题就是TWRP包本身的问题，这里最好就多换几个TWRP包试一试，有些包自带data解密的，或者寻找一个data解密文件来解密</li></ol></li><li>推荐魔趣稳定版本，每夜版每天都会更新，非常不稳定，可能会出现各种各样的问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组-运算方法和运算部件</title>
      <link href="/2020/12/01/%E8%AE%A1%E7%BB%84-%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E9%83%A8%E4%BB%B6/"/>
      <url>/2020/12/01/%E8%AE%A1%E7%BB%84-%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E9%83%A8%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="原码的加减"><a href="#原码的加减" class="headerlink" title="原码的加减"></a>原码的加减</h2><ul><li>原码的加法运算：<ul><li>正+正：绝对值做加法，结果为正（可能溢出）</li><li>负+负：绝对值做加法，结果为负（可能溢出）</li><li>正+负：绝对值大的减去绝对值小的，符号取绝对值大的符号</li><li>负+正：绝对值大的减去绝对值小的，符号取绝对值大的符号</li></ul></li><li>原码的减法运算：将“减数”的符号取反，转化为以上四种</li></ul><h2 id="补码的加减（符号位参加运算）"><a href="#补码的加减（符号位参加运算）" class="headerlink" title="补码的加减（符号位参加运算）"></a>补码的加减（符号位参加运算）</h2><ul><li><p>补码的加法/减法运算：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201201221105.png" style="zoom: 80%;margin-left:0px;" /></li><li><p>判断溢出：</p><ul><li>上溢：两个正数相加得到一个看似“负数”的数</li><li>下溢：两个负数相加得到一个看似“正数”的数</li></ul></li></ul><h2 id="原码的乘法运算"><a href="#原码的乘法运算" class="headerlink" title="原码的乘法运算"></a>原码的乘法运算</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204091235.png" style="zoom: 80%; margin-left: 0px;" /><h2 id="原码的除法运算"><a href="#原码的除法运算" class="headerlink" title="原码的除法运算"></a>原码的除法运算</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204111717.png" style="zoom:80%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204112814.png" style="zoom:80%;margin-left:0px;" /><h2 id="补码的乘法运算"><a href="#补码的乘法运算" class="headerlink" title="补码的乘法运算"></a>补码的乘法运算</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204091534.png" style="zoom:80%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204104949.png" style="zoom:80%;margin-left:0px;" /><h2 id="补码的除法运算"><a href="#补码的除法运算" class="headerlink" title="补码的除法运算"></a>补码的除法运算</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204113514.png" style="zoom:80%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204113606.png" style="zoom:80%;margin-left:0px;" /><h2 id="浮点数加减运算"><a href="#浮点数加减运算" class="headerlink" title="浮点数加减运算"></a>浮点数加减运算</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204145751.png" style="zoom:80%;margin-left:0px;" /><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204114128.png" style="zoom:80%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201204145754.png" style="zoom:80%;margin-left:0px;" />]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-线性表</title>
      <link href="/2020/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2020/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表的定义和特点"><a href="#线性表的定义和特点" class="headerlink" title="线性表的定义和特点"></a>线性表的定义和特点</h2><ul><li>n个相<strong>同性质</strong>的数据元素组成的<strong>有限线性序列</strong></li><li>直接前驱，直接后继，线性起点，线性终点</li></ul><h2 id="案例引入"><a href="#案例引入" class="headerlink" title="案例引入"></a>案例引入</h2><ul><li>选择合适的存储结构</li><li>实现此存储结构上的基本操作</li><li>利用基本操作完成功能</li></ul><h2 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">InitList(&amp;L)</span><br><span class="line">Destroy(&amp;L)</span><br><span class="line">ClearList(&amp;L)</span><br><span class="line">ListEmpty(L)</span><br><span class="line">ListLength(L)</span><br><span class="line">GetElem(L,i,&amp;e)</span><br><span class="line">LocateElem(L,e,compare())</span><br><span class="line">PriorElem(L,cur,e,&amp;pre_e)</span><br><span class="line">NextElem(L,cur,e,&amp;next_e)</span><br><span class="line">ListInsert(&amp;L,i,e)</span><br><span class="line">ListDelete(&amp;L,i,&amp;e)</span><br><span class="line">ListTraverse(&amp;L,visited())</span><br></pre></td></tr></table></figure><p>以上提及的运算是逻辑结构上定义的运算，至于如何做的细节问题，只能在确定了存储结构之后才能确定具体的实现细节。</p><h2 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h2><ul><li>中间没有空出的存储单元</li><li>线性表的顺序存储结构占用一片连续的存储空间</li><li>地址连续，依次存放，随机存取，类型相同——》用<strong>一维数组</strong>来表示顺序表</li><li>线性表长度可变，数组长度不可变——》用一个变量表示顺序表的长度属性</li><li>线性表定义模板：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType elem[LIST_INIT_SIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line">L.elem=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*LIST_INIT_SIZE);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">L.elem=<span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!E.elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.elem) <span class="keyword">delete</span> L.elem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListEmpty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SqList L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length) <span class="keyword">return</span> ERROR;</span><br><span class="line">    e=L.elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">PriorElem(L,cur,e,&amp;pre_e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">NextElem(L,cur,e,&amp;next_e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">ListTraverse(&amp;L,visited())&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">ListInsert(&amp;L,i,e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListDelete(&amp;L,i,&amp;e)ListInsert(&amp;L,i,e)</span><br><span class="line"></span><br><span class="line">ListDelete(&amp;L,i,&amp;e)</span><br><span class="line"></span><br><span class="line">LocateElem(L,e,compare())&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位置比下标多1</span></span><br><span class="line">LocateElem(SqList L,ElemType e)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[i]==e) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间效率：平均查找长度(期望值)=(n+1)/2</span></span><br></pre></td></tr></table></figure><h2 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h2><h2 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h2><h2 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h2><h2 id="案例分析与实现"><a href="#案例分析与实现" class="headerlink" title="案例分析与实现"></a>案例分析与实现</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-绪论</title>
      <link href="/2020/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BB%AA%E8%AE%BA/"/>
      <url>/2020/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129204911.png" style="zoom:67%;margin-left:0px;" /><h2 id="数据结构研究"><a href="#数据结构研究" class="headerlink" title="数据结构研究"></a>数据结构研究</h2><p>很多问题的都是无法用数学公式或方程来描述，是一些”非数值计算“的程序设计问题。描述非数值计算问题的数学模型不是数学方程，而是诸如<strong>表，树和图之类的具有逻辑关系的数据</strong>。</p><p>数据结构是一门研究非数值计算的程序设计中计算机的<strong>操作对象以及他们之间的关系和操作</strong>的学科</p><ul><li>抽象数学模型：得到数据结构<ul><li>明确操作对象</li><li>明确操作算法</li><li>操作对象之间的关系</li><li>得到数据结构</li></ul></li><li>设计算法</li><li>编程调试运行</li></ul><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><ul><li><p>数据：能输入计算机且能被计算机处理的各种符合的集合</p></li><li><p>数据元素：能作为一个整体操作的的数据的基本单位，是集合的个体</p></li><li><p>数据项：构成数据元素的不可分割的最小单位</p></li><li><p>数据对象：性质相同的数据元素的集合，是集合的子集</p></li><li><p>数据结构：数据元素相互之间的关系</p><ul><li>逻辑结构：线性，树形，图状，集合</li><li>物理结构：顺序，链式，索引，散列</li><li>运算&amp;实现</li></ul></li><li><p>抽象数据类型：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129211558.png" style="zoom:67%;" /></li><li><p>总结：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129211907.png" style="zoom: 67%;" /></li></ul><h2 id="抽象数据结构的表示和实现"><a href="#抽象数据结构的表示和实现" class="headerlink" title="抽象数据结构的表示和实现"></a>抽象数据结构的表示和实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">float</span> realpart;<span class="comment">//实部</span></span><br><span class="line">    <span class="keyword">float</span> imaqpart;<span class="comment">//虚部</span></span><br><span class="line">&#125;Complex;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(Complex *A,<span class="keyword">float</span> real,<span class="keyword">float</span> imag)</span></span>;<span class="comment">//赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Complex *A,<span class="keyword">float</span> real,<span class="keyword">float</span> imag)</span></span>;<span class="comment">//加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minus</span><span class="params">(Complex *A,<span class="keyword">float</span> real,<span class="keyword">float</span> imag)</span></span>;<span class="comment">//减</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mutiply</span><span class="params">(Complex *A,<span class="keyword">float</span> real,<span class="keyword">float</span> imag)</span></span>;<span class="comment">//乘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(Complex *A,<span class="keyword">float</span> real,<span class="keyword">float</span> imag)</span></span>;<span class="comment">//除</span></span><br></pre></td></tr></table></figure><h2 id="算法与算法分析"><a href="#算法与算法分析" class="headerlink" title="算法与算法分析"></a>算法与算法分析</h2><ul><li><p>对特定问题求解方法和步骤的一种描述</p></li><li><p>描述算法：</p><ul><li>自然语言</li><li>流程图</li><li>伪代码</li><li>程序代码</li></ul></li><li><p>程序=数据结构+算法</p></li><li><p>特性：</p><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul></li><li><p>算法要求：</p><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效性</li></ul></li><li><p>算法效率评价：</p><ul><li>时间效率：<ul><li>事后统计</li><li>事前分析<ul><li>算法运行时间=Σ每条语句频度✖该语句执行一次所需时间</li><li>假设执行每条语句所需时间均为单位时间，此时算法运行时间转化为所有语句的执行次数</li><li>只需比较最高次的那个基本语句的数量级：O(f(n))称为算法的渐近时间复杂度，f(n)就是基本语句的数量级，一般就是嵌套最深的那个语句。</li><li>最好/最坏/平均时间复杂度</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129214824.png" style="zoom:67%;margin-left:0px;" /></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129215026.png"></li></ul></li></ul></li><li>空间效率：<ul><li>本身占用空间</li><li>辅助空间 </li></ul></li></ul></li><li><p>设计好算法的过程：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129220358.png" style="zoom:67%;" /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组-数据的机器级表示</title>
      <link href="/2020/11/29/%E8%AE%A1%E7%BB%84-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
      <url>/2020/11/29/%E8%AE%A1%E7%BB%84-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="数值数据的表示"><a href="#数值数据的表示" class="headerlink" title="数值数据的表示"></a>数值数据的表示</h2><p>机器数：用0和1编码的计算机内部0/1序列</p><p>真值：机器数真正的值，现实中带正负号的值</p><p>三要素：进位计数制；定、浮点表示；如何用二进制编码</p><h3 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h3><h4 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h4><p> 编码：原码，反码，补码，移码</p><p>整数都采用补码表示，浮点数的尾数用原码定点小数表示</p><p><strong>原码变补码</strong>的原理：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129091346.png" style="zoom: 67%;margin-left:0px;" /><p><strong>模4补码</strong>：后面<strong>乘法</strong>可能出现中间的类似于下图的情况，但是不能丢掉，所以采用模4补码把中间结果保存，确保最终结果正确。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129092034.png" style="zoom:67%;margin-left:0px;" /><p><strong>移码</strong>：将每个数**加一个偏置常数，通常是2^(位数-1)**，实际就是最高位(符号位)+1</p><table><thead><tr><th>真值</th><th>补码表示</th><th>移码表示</th><th>IEEE574移码原理</th><th>原码表示</th></tr></thead><tbody><tr><td>3</td><td>011（3）</td><td>111</td><td>110</td><td>011</td></tr><tr><td>2</td><td>010（2）</td><td>110</td><td>101</td><td>010</td></tr><tr><td>1</td><td>001（1）</td><td>101</td><td>100</td><td>001</td></tr><tr><td>0</td><td>000（0）</td><td>100</td><td>011</td><td>000，100</td></tr><tr><td>-1</td><td>111（7）</td><td>011</td><td>010</td><td>101</td></tr><tr><td>-2</td><td>110（6）</td><td>010</td><td>001</td><td>110</td></tr><tr><td>-3</td><td>101（5）</td><td>001</td><td>000</td><td>111</td></tr><tr><td>-4</td><td>100（4）</td><td>000</td><td>111</td><td>不能表示</td></tr></tbody></table><ul><li>从真值来看，补码的最高位表示的是符号位；从补码的实际意义来看，补码的值是不包含符号位，如上图所示：</li><li>0的移码和补码表示都是唯一的</li><li>移码和补码仅符号位不同，数值位相同。</li><li>对阶的目的是为了比较大小</li></ul><p>补码的原理就是：做减法的时候可以用加上补码（补码就是真值+模），最后取模来实现。实现了减和加的统一，计算机就是一个模运算系统</p><p>补码：真值的+模（结果取绝对值，符号等于真值的符号）</p><p>移码：真值+模（结果带符号位）</p><h4 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h4><p>从左往右&amp;从右往左排列：MIPS采用高到低位从左往右，也就是左大右小LSB</p><p>一般在表示<strong>编号&amp;地址</strong>的时候选择unsigned</p><p>原码用来标志浮点数的尾数，反码现已弃用，补码用来表示定点整数和定点纯小数</p><p>带符号和无符号数的<strong>扩展操作</strong>：带符号数添符号位，无符号数添0</p><p><strong>带符号和无符号数</strong>的<strong>移位操作</strong>：</p><ul><li>有符号数（指的是补码，现在都是用补码表示定点有符号数）<ul><li>左移：逻辑左移，空位补0</li><li>右移：算数右移。若为正数，空位补0，若为负数，空位补1</li></ul></li><li>无符号数<ul><li>左移和右移均是逻辑位移，空位补0</li></ul></li></ul><p>MIPS规定：无符号数没有溢出检查</p><p>C编译器默认将带符号整数转化为无符号数</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129103559.png" style="zoom:80%;margin-left:0px;" /><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>补码和移码的运算：</p><ul><li>[A+B]补=[A]补+[B]补</li><li>[A-B]补=[A]补+[-B]补</li><li>[A+B]移=[A]移+[B]补</li><li>[A-B]移=[A]移+[-B]补</li></ul><p>规格化形式：小数点前只有一位表示</p><p>浮点数的尾数用原码表示，阶码用移码表示</p><p>只需要对<strong>尾数</strong>和<strong>指数(阶码)<strong>编码，就可以表示一个浮点数，</strong>基数</strong>不需要存在计算机</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129155727.png" style="zoom:67%;margin-left:0px;" /><p>IEEE 754标准将阶码的移码偏移值设置为127的目的是为了阶码能表示多一位的数</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129163821.png" style="zoom:80%;margin-left:0px;" /><p><strong>将IEEE 754标准的浮点数翻译为十进制科学计数法</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129162323.png" style="zoom:67%;margin-left:0px;" /><p><strong>将十进制科学计数法翻译为IEEE 754标准的浮点数</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129162629.png" style="zoom:67%;margin-left:0px;" /><p><strong>四种特殊的IEEE 754表示：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129163457.png" style="zoom:67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129163500.png" style="zoom:67%;margin-left:0px;" /><p><strong>IEEE 754标准的32位格式的表示范围：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129164408.png" style="zoom: 67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129164409.png" style="zoom:67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129185632.png" style="zoom:50%;margin-left:0px;" /><h2 id="10进制数值数据"><a href="#10进制数值数据" class="headerlink" title="10进制数值数据"></a>10进制数值数据</h2><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><img src="https://bkimg.cdn.bcebos.com/pic/e850352ac65c103880a07b53bc119313b17e8941?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2UxMTY=,g_7,xp_5,yp_5" style="zoom:60%;margin-left:0px;" /><h3 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h3><p>0到9十个数字位用二进制编码。至少用4位二进制表示，就有6中状态状态</p><p>分类：</p><ul><li>8421码：十进制有权码</li><li>余3码：十进制无权码</li><li>2421码：十进制有权码</li></ul><p>8421码+6修正：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129191939.png" style="zoom:80%;margin-left:0px;" /><p>10在机器中的表示：</p><ul><li><p>unsigned：000…01010（32位）</p></li><li><p>signed：00001010（32位）</p></li><li><p>ASCII码：00110001  00110000</p></li><li><p>8421码：00010000</p></li><li><p>-10的unsigned：111…10110（32位）</p></li><li><p>浮点表示：+1.01×2^3</p><p>0  10000010  01000…(23位)</p></li></ul><h2 id="非数值数据的表示"><a href="#非数值数据的表示" class="headerlink" title="非数值数据的表示"></a>非数值数据的表示</h2><p><strong>逻辑数据</strong>的编码表示：</p><ul><li><p>N位二进制数可以表示N个逻辑数据，或者一个位串</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129195236.png" style="zoom:50%;margin-left:0px;" /></li></ul><p><strong>西文字符/汉字</strong>的表示</p><ul><li>常见的ASCII码：<ul><li>十进制数字：0/1/2/3…/9</li><li>英文字母：A/B/C…/Z/a/b…/z</li><li>专用符号：+/-/%/*/&amp;/…</li><li>控制符号</li></ul></li><li>汉字：输入码，内码，字模码<ul><li>国标码</li></ul></li><li>国际多字符集</li></ul><h2 id="数据的宽度"><a href="#数据的宽度" class="headerlink" title="数据的宽度"></a>数据的宽度</h2><ul><li><p>比特：计算机中处理，存储，传输信息的最小单位</p></li><li><p>二进制信息的计量单位是字节</p></li><li><p>存储器按照字节编址，字节是最小可寻址单位</p></li><li><p>机器字长：数据通路的宽度，=进行运算的运算器宽度=传输数据的总线宽度=寄存器的宽度</p></li><li><p>存储字长：存储器中一个存储单元(存储地址)所存储的二进制代码的位数，即存储器中的MDR的位数。</p></li><li><p>指令字长：计算机指令字的位数。</p></li><li><p>存储单元：</p><p>计算机中的存储是由存储体来完成的，一个存储体相当于一个<strong>大箱子</strong>，这个大箱子又有许多<strong>小格子</strong></p><p>小格子中存储的就是实际存储的数据，这个小格可以存储<strong>不同位数的数据，与MDR相关</strong></p><p>存储体中的<strong>小格子数量由地址线确定，和MAR相等</strong></p></li></ul><h2 id="存储排列"><a href="#存储排列" class="headerlink" title="存储排列"></a>存储排列</h2><ul><li><p><strong>大端，小端问题</strong>：如何从一个字节地址中取到一个32位的字</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201129203821.png" style="zoom: 67%;margin-left:0px;" /></li><li><p><strong>对齐问题</strong>：一个字能否存放在任何字节边界</p><ul><li>是由编译器控制的（给程序中每一个变量分配一个地址的工作是由编译器来管的），可以对编译器控制是否采取字符边界对其策略）</li></ul></li></ul><h2 id="纠-检错"><a href="#纠-检错" class="headerlink" title="纠/检错"></a>纠/检错</h2><ul><li><p>数据检错纠错的目的：在存取和传送时，由于元器件故障或者噪音干扰等原因会出现差错。</p><ul><li><p>奇偶校验：码字，码距；奇校验码，偶校验码；只能检测奇数个跳变的错误</p></li><li><p>冗余校验：CRC码，采用模2除法除以生成多项式确定的一个信息码，得到一个余数（校验码），该校验码除以信息码得到的余数应该是0，否则就说明出现了错误。</p></li><li><p>海明校验</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201201213212.png" style="zoom: 80%;margin-left:0px;" /></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组-概述</title>
      <link href="/2020/11/28/%E8%AE%A1%E7%BB%84-%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/11/28/%E8%AE%A1%E7%BB%84-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>学习目录：</p><ul><li>性能评价</li><li>计算机算术</li><li>存储器层次结构</li><li>指令集体系结构</li><li>CPU设计</li><li>流水线技术</li><li>系统总线</li><li>输入/输出系统</li></ul><p>计算机的功能：计算，存储，传送，控制</p><p>计算机特点：高速，通用，准确，智能</p><p>发展史：电子管，晶体管，小/中规模集成电路，大/超大/极大规模集成电路</p><p>ISA：指令集体系结构（软硬件的衔接），软件系统运行再ISA上，硬件系统是实现ISA的</p><p>翻译程序：汇编程序，编译程序，解释程序</p><p><strong>评价标准：</strong></p><ul><li><p>响应时间</p><ul><li>用户CPU时间：运行代码（之后的CPU时间指定是用户CPU时间）</li><li>系统CPU时间：执行用户程序所需的操作系统的时间</li><li>其他时间：等待I/O操作的时间或者CPU花在其他地方的时间</li></ul></li><li><p>吞吐量/带宽</p></li><li><p>用户CPU执行时间（测量用户程序每条指令再CPU上的的执行时间）</p><ul><li>CPI：执行每条指令所花的时钟周期数</li><li>CPU执行时间=时钟周期数×时钟周期=时钟周期数➗时钟频率=指令条数✖CPI✖时钟周期</li><li>与硬件，ISA，算法和编译器有关</li><li>机器时钟频率的提高往往会导致CPI提高，导致实际CPU时间并不会随时钟频率同比例减少</li><li>MIPS：每秒钟执行多少百万条指令=时钟频率 / (CPI * 10^6)</li><li>MFLOPS：每秒钟执行多少百万条浮点操作</li><li>选择性能评价程序：基准程序</li></ul></li><li><p>最终的目的就是缩短CPU执行时间：提高频率，其他指标不变，CPI缩短，编译优化指令数减少&amp;CPI少的指令</p></li></ul><p>课程学习内容：</p><ul><li>如何设计高性能CPU</li><li>如恶化设计存储器系统</li><li>如何设计总线BUS</li><li>如何设计I/O</li><li>指令和数据再计算机中如何表示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-无线网络</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>无线网络的比较</strong></p><ul><li>PAN：蓝牙</li><li>LAN：WiFi</li><li>MAN：WiMAX</li><li>WAN：2G，3G，4G，5G</li></ul><p>以无线AP（无线交换机）为中心的无线局域网</p><p>最原始的单计算机拨号上网：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127224828.png" style="zoom: 67%;margin-left:0px;" /><p>要实现一个局域网网段的多计算机同时上网，加入一个无线路由器来实现：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127224833.png" style="zoom:67%;margin-left:0px;" /><p>通常所说的所谓“无线路由器”实际上是一个三合一设备：路由器功能+交换机功能+无线AP功能</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127224836.png" style="zoom:67%;margin-left:0px;" /><p>左边教室的所有机器按照上述能上网，右边教师的也想并入左边的网段上网，只需要把右边的无线路由器当作一个路由器来使就行了，拿一根网线把两个交换机连接起来，同时右边的无线设备也可以通过以无线AP为中心的无线局域网并入左边教室的网段。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127224910.png" style="zoom:67%;margin-left:0px;" /><p><strong>还有一种无线网络是不需要无线AP接入设备的：临时的无线网络</strong></p><p>手机通过3G,4G,5G来上网的原理：</p><ul><li>手机打电话的方式：从最近的基站注册然后发出通信，基站之间通过光纤或者其他线连接。手机移动位置的时候需要连接新的基站，然后就会更新基站数据库</li><li>上网就是通过基站的光纤连接的网关来访问Internet，2G,3G,4G,5G，一代比一代的带宽高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-音频服务</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E9%9F%B3%E9%A2%91%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E9%9F%B3%E9%A2%91%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在Internet上传输音频视频面临的问题？</p><ul><li>音频视频：占用的带宽高，网速需要恒定，延迟要低（尤其是交互性的）</li><li>数据信息：对带宽，网速是否恒定，有延迟要求不高</li></ul><p>延迟：对需要实时交互的音视频影响大。</p><p>网速是否稳定：对非交互式的音视频也有很大影响，可以通过在客户端设置缓存来实现</p><p>目前因特网提供的音视频服务的三种类型：</p><ul><li>流式存储音视频——边下载边播放<ul><li>只能在线播放，有利于保护版权</li><li>节省客户端硬盘空间</li></ul></li><li>流式实况音视频——边录制边播放<ul><li>通过网络现场直播</li></ul></li><li>交互式音视频——实时交互式通信<ul><li>视频/音频聊天</li></ul></li></ul><p>一般的流媒体服务器中存放了所有音视频，通过一个web站点调用这些流媒体，一般顾客通过访问这些web站点就可以访问到流媒体了。</p><p>利用流媒体服务器实现现场直播：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127215633.png" style="zoom:80%;margin-left:0px" /><p>就近选择流媒体服务器，让就近的流媒体服务器从远处编码器要数据，然后再分发给每台计算机，这样可以极大节省带宽</p><p><strong>IP电话</strong></p><p>传统电话是用电路交换实现面向连接的通信</p><p>IP电话是利用分组交换通过互联网实现通信（交换式音视频），长途电话可以利用语音网关</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127221936.png" style="zoom:67%;margin-left:0px" /><p>改进的“尽最大努力交付”：分组标记，路由器加分类，流量管制，路由器调度，呼叫接纳</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-网络安全</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="网络安全问题概述"><a href="#网络安全问题概述" class="headerlink" title="网络安全问题概述"></a>网络安全问题概述</h2><h3 id="网络安全面临的4种威胁"><a href="#网络安全面临的4种威胁" class="headerlink" title="网络安全面临的4种威胁"></a>网络安全面临的4种威胁</h3><ul><li>截获（被动式攻击）：窃听他人通信内容</li><li>中断（主动式攻击）：中断他人的网络通信</li><li>篡改（主动式攻击）：故意修改网络上传送的报文</li><li>伪造（主动式攻击）：伪造信息在网络上传送</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127165620.png" style="zoom:80%;margin-left:0px;" /><p><strong>Cain</strong>工具：<strong>捕获同一网段</strong>中用户输入的账号密码；篡改域名解析结果</p><ul><li>通过arp欺骗实现（应对方法就是在自己的计算机上安装arp防火墙，但是如果交换机能监视，cain能直接从交换机拿数据，自己机器上的arp防火墙就没用了）</li></ul><p><strong>DNS欺骗（篡改DNS解析结果）</strong>的实例：钓鱼网站：你输入工商银行的域名，经由篡改服务机到DNS服务器得到正确的ip地址，回来先到篡改服务机，会把正确的ip改为一个和工商银行界面相似的钓鱼网站的ip，然后你进入钓鱼网站输入工商银行的域名，钓鱼网站就把你的账号密码拿到了。</p><p><strong>伪造：</strong>一个服务器只允许某几台计算机能访问，这时一台范围外的计算机伪造自己的ip为其中一台有访问权限的ip来访问目标服务器，前提是那一台计算机没有运行，否则会出现ip冲突。</p><p><strong>中断：</strong>Dos攻击和DDos攻击</p><h3 id="计算机面临的威胁（恶意程序）"><a href="#计算机面临的威胁（恶意程序）" class="headerlink" title="计算机面临的威胁（恶意程序）"></a>计算机面临的威胁（恶意程序）</h3><ul><li><p>计算机病毒：熊猫烧香</p><p>能传染，通过修改其他程序来吧自身或者变种复制进入完成的</p></li><li><p>计算机蠕虫：一般是消耗系统资源，不一定更改系统的设置</p><p>通过网络的通信功能将自身从一个节点发送到另一个节点并启动运行的程序</p></li><li><p>特洛伊木马：盗号木马，灰鸽子远程控制木马，特点是需要和外界通信</p><p>一种程序，执行的功能超出其所声称的功能</p></li><li><p>逻辑炸弹：定时错误</p><p>一种当运行环境满足某种特定条件时执行其他特殊功能的程序</p></li></ul><p><strong>如何养病毒</strong>：需要把病毒文件加密，否则杀毒软件会清除掉这些文件。</p><h2 id="两类密码体制"><a href="#两类密码体制" class="headerlink" title="两类密码体制"></a>两类密码体制</h2><h3 id="对称加密："><a href="#对称加密：" class="headerlink" title="对称加密："></a>对称加密：</h3><ul><li><p>对称加密指的就是加密和解密使用同一个秘钥，所以叫做对称加密。对称加密只有一个秘钥，作为私钥。</p></li><li><p>常见的对称加密算法：DES（分组加密后在解密合并），AES，3DES等等。</p></li><li><p>缺点：</p><ul><li><p>密钥不能在网上传，只能本地保存，否则不安全</p></li><li><p>密钥要两个人一对，密钥维护相当麻烦</p></li></ul></li><li><p>优点：</p><ul><li>加密效率高</li></ul></li></ul><h3 id="非对称加密："><a href="#非对称加密：" class="headerlink" title="非对称加密："></a>非对称加密：</h3><ul><li>非对称加密指的是：加密和解密使用不同的秘钥，一把作为公开的公钥，另一把作为私钥。公钥加密的信息，只有私钥才能解密。私钥加密的信息，只有公钥才能解密。</li><li>常见的非对称加密算法：RSA，ECC</li><li>公钥可以随便传，私钥需要本地保管。</li><li>非对称加密单独使用效率不如对称加密，所以<strong>实际过程中的使用方法往往是非对称和对称的融合</strong>：用对称加密加密传输内容，用非对称公钥加密加密对称加密的密钥，把这两部分一起发给接收方。接收方先通过非对称加密的私钥解密得到对称加密的密钥，用这个密钥再去解密得到传输内容。</li></ul><p>对称加密算法相比非对称加密算法来说，加解密的效率要高得多。但是缺陷在于对于秘钥的管理上，以及在非安全信道中通讯时，密钥交换的安全性不能保障。所以在实际的网络环境中，会将两者混合使用.</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><ul><li><p>数字签名是非对称加密的一个实际应用</p></li><li><p>作用：防止抵赖，能够检查签名之后内容是否被更改</p></li><li><p>目的不是为了保密，而是确保传输的文件没有被更改而且发送方无法狡辩说不是我发的（例如：中央红头文件发到地方政府）</p></li><li><p><strong>图示：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127182819.png" style="zoom:67%;margin-left:0px;" /></li><li><p>注意观察上面的过程，有个细节问题：接收方如何确认解密的公钥是发送方发的。此时就需要第三方的证书颁发机构CA</p></li></ul><h2 id="因特网使用的安全协议"><a href="#因特网使用的安全协议" class="headerlink" title="因特网使用的安全协议"></a>因特网使用的安全协议</h2><h3 id="安全套接字层SSL"><a href="#安全套接字层SSL" class="headerlink" title="安全套接字层SSL"></a>安全套接字层SSL</h3><ul><li><p>在应用层和传输层之间加入一个SSL加密层</p></li><li><p>在发送方，SSL接收应用层的数据，对数据进行加密，然后把加密的数据送往TCP套接字</p></li><li><p>在接收方，SSL从SSL套接字读取数据，解密后把数据交给应用层</p></li><li><p>例如：访问web时，不使用安全套接字的协议是http（80端口），使用了安全套接字的协议是https（443端口）</p></li><li><p>实现SSL需要的配置：也是用非对称密钥加密对称密钥来解决的（上面有介绍）</p></li><li><p>几个可以加上SSL层的应用层协议：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IMAPS tcp-993</span><br><span class="line">POP3 tcp-995</span><br><span class="line">SMTPS tcp-465</span><br><span class="line">HTTPS tcp-443</span><br></pre></td></tr></table></figure></li><li><p>其实SSL层可是实现如下三个功能</p><ul><li>加密SSL会话：（上面介绍的）</li><li>SSL服务器鉴别：允许用户证实服务器身份</li><li>SSL客户鉴别：允许服务器证实用户身份</li></ul></li></ul><h3 id="网络层安全协议IPSec"><a href="#网络层安全协议IPSec" class="headerlink" title="网络层安全协议IPSec"></a>网络层安全协议IPSec</h3><p>网络安全是分层的：</p><ul><li><strong>数字签名/数字加密</strong>：属于应用层安全，需要应用服务的支持加密解密</li><li><strong>SSL层</strong>：位于应用层和传输层之间，不需要应用程序的支持，但是需要配置证书才能实现SSL层安全</li><li><strong>IPSec</strong>：位于网络层(属于底层加密)，不需要应用程序的支持，也不需要配置任何证书，时自动加密的，对上层透明。</li></ul><p>使用IPSec建立通信之前，两个节点之间需要建立一个SA安全关联</p><p>IPSec中的两个协议<strong>AH</strong>和<strong>ESP</strong></p><ul><li><strong>AH</strong>：只数字签名</li><li><strong>ESP</strong>：既要签名又要加密</li></ul><h2 id="链路加密与端到端加密"><a href="#链路加密与端到端加密" class="headerlink" title="链路加密与端到端加密"></a>链路加密与端到端加密</h2><ul><li><p>数据链路层的安全：每个网段传输数据加密解密</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127202702.png" style="zoom:67%;margin-left:0px;" /></li><li><p>数据链路层身份验证：PPP身份验证；ADSL数据链路层安全</p></li></ul><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><ul><li>防火墙时由软件硬件构成的系统，是一种特殊编程的路由器，用来在两个网络之间实施接入控制策略。该策略由防火墙使用者自行制定以适合自身内网需要。</li><li>墙内的网络称为“可信赖的网络”，而将外部的因特网称为“不可信赖的网络”。</li><li>防火墙可以通过控制内网到Internet的数据流量来解决内联网和外联网的安全问题</li><li>可以分为：<ul><li>网络级防火墙：是基于数据包，源地址，目标地址，协议和端口，控制流量 来控制</li><li>应用级防火墙：根据数据包，源地址，目标地址，协议，端口，用户名，时间段，内容来控制，可以防病毒进入内网</li></ul></li><li>防火墙基于的结构有：<ul><li>边缘防火墙</li><li>三向外围网</li><li>背靠背防火墙</li><li>单一网卡</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-应用层</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><ul><li><p>QQ客户端能登录，但是QQ网站打不开，可能说明DNS出问题了</p></li><li><p>域名服务器采用分布式的域名查询解析</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127112636.png" style="zoom: 67%;margin-left:0px;" /></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127112635.png" style="zoom: 67%;margin-left:0px;" /></li><li><p>我个人认为这里的<strong>本机缓存</strong>指的是本机的DNS缓存，访问网站的时候是先查询本机缓存，再查询<strong>hosts配置</strong>，之后才去请求<strong>本地DNS缓存</strong>。</p></li></ul><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><ul><li><p>静态IP地址：手动配置</p><p>一般固定的台式机</p></li><li><p>动态IP地址：通过DHCP协议自动获得</p><p>一般的移动的设备，例如wifi连接的笔记本电脑</p><ul><li>计算机通过广播向DHCP服务器发送广播请求，DHCP服务器从地址池里选择一个地址给计算机发过去。如果同时有多个DHCP服务器应答，计算机还要选择一个DHCP服务器发一个确认信息，然后DHCP服务器才能把所有设置给计算机。</li><li>DHCP服务器要是静态地址，一般只给本网段的计算机分配地址。</li><li>了解租期和续约</li><li>除了同网段的DHCP分配，还可以跨网段DHCP分配</li></ul></li><li><p><strong>对比RARP</strong>逆向地址解析协议：从功能上说，RARP只能实现简单的从MAC地址到IP地址的查询工作，RARP server上的MAC地址和IP地址是必须事先静态配置好的。但DHCP却可以实现除静态分配外的动态IP地址分配以及IP地址租期管理等等相对复杂的功能。</p></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127140344.png" style="zoom:80%;margin-left:0px;" /></li></ul><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><ul><li>控制连接：标准端口21，用于发送ftp命令信息</li><li>数据连接：标准端口22，用于上传下载数据</li><li>数据连接的建立类型：<ul><li>主动模式：ftp客户端告诉ftp服务器使用什么端口侦听，ftp服务器和ftp客户端的这个端口建立连接</li><li>被动模式：ftp服务器打开一个端口等待客户端来连接</li></ul></li><li>FTP服务器端如果有防火墙，需要在防火墙上开21和20端口，需要使用主动模式进行连接</li></ul><h2 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h2><ul><li>默认使用TCP 的23端口</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127142955.png" style="zoom:50%;margin-left:0px;" /></li></ul><h2 id="远程桌面RDP"><a href="#远程桌面RDP" class="headerlink" title="远程桌面RDP"></a>远程桌面RDP</h2><ul><li>net user administrator all 更改用户密码</li><li>net user han all /add 添加用户</li><li>将用户添加到远程桌面组 Remote Desktop Users组</li><li>Server多用户操作系统，启用远程桌面可以都用户同时使用服务器</li><li>XP和Windows 7是单用户操作系统，不支持多用户同时登录</li><li>远程时可以将本地的硬盘资源映射到远程计算机上</li></ul><h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><ul><li>一个网站的标志：可以通过不同端口，不同的IP地址，不同的主机头（域名）来区分；<ul><li>tomcat服务器部署了多个项目，阿里云的域名解析到服务器ip，可以通过配置，让不同域名解析访问不同的项目。</li></ul></li></ul><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127154738.png" style="zoom:100%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127154742.png" style="zoom:80%;margin-left:0px;" /><h3 id="web代理服务器"><a href="#web代理服务器" class="headerlink" title="web代理服务器"></a>web代理服务器</h3><ol><li>节省内网访问Internet的带宽</li><li>使用代理服务器连网关，DNS都不需要，只需要和代理的服务器通信就行了，所有访问Internet的工作都是代理服务器做的。</li><li>能绕过防火墙直接访问墙外的网站，这是一种正向代理</li></ol><h2 id="电子邮件（SMTP，POP3，IMAP）"><a href="#电子邮件（SMTP，POP3，IMAP）" class="headerlink" title="电子邮件（SMTP，POP3，IMAP）"></a>电子邮件（SMTP，POP3，IMAP）</h2><h3 id="发送协议：SMTP"><a href="#发送协议：SMTP" class="headerlink" title="发送协议：SMTP"></a>发送协议：SMTP</h3><h3 id="接收邮件协议：POP3，IMAP"><a href="#接收邮件协议：POP3，IMAP" class="headerlink" title="接收邮件协议：POP3，IMAP"></a>接收邮件协议：POP3，IMAP</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127160235.png" style="zoom: 50%;margin-left:0px;" /><p><strong>注意：</strong></p><p>DNS占用53号端口，同时使用TCP和UDP协议。DNS在<strong>区域传输</strong>的时候使用TCP协议，<strong>其他时候</strong>使用UDP协议。</p><p><strong>DNS区域传输的时候使用TCP协议：</strong></p><p>1.辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</p><p>2.TCP是一种可靠连接，保证了数据的准确性。</p><p><strong>域名解析时使用UDP协议：</strong></p><p>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-运输层</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p><strong>传输层两个协议</strong>的应用场景：</p><ul><li><p><strong>TCP</strong>：基于可靠传输的，丢包重传，分段编号，流量控制，建立会话(三次握手)</p><ul><li>QQ传文件，访问网站，下载文件</li></ul></li><li><p><strong>UDP</strong>：基于不可靠传输，一个数据包就能完成数据通信，不建立会话，支持多播</p><ul><li>QQ聊天，</li></ul></li><li><p><strong>UDP中IP分片是在IP层完成的， 而TCP分段是在TCP层完成的，TCP在ip层会尽量避免分片</strong></p><p><strong>MTU = IP头+【TCP头+(MSS)】</strong></p><p>TCP层提前完成了分段， 而且， 两个TCP包中都有TCP头， 这是必然的。 所以到了IP层后， 都保留了TCP头， 当然就有了端口信息啊。 这一点与IP层次的分片是不同的。</p><p>​    而且我们应该看到， 因为TCP包在TCP层已经做了限制， 这就决定了， 等TCP包达到IP层的时候， IP层的数据绝对不会超过MTU,  因此， 对于TCP传输来说， IP层是没有必要分片的， 因为TCP层分段的时候， 已经考虑到了这个限制。</p><p>​    所以， 我们经常会说， <strong>UDP传输中， IP分片， 是受到了MTU的限制</strong>， <strong>TCP传输中， TCP分段， 是受到了MSS的限制</strong>（实际上最终还是受到了MTU的限制）</p></li><li><p>http=TCP+80</p><p>https=TCP+443</p><p>ftp=TCP+25</p><p>SMTP=TCP+25</p><p>POP3=TCP+110</p><p>RDP=TCP+3389</p><p>smb=TCP+445</p><p>SQL Server=TCP+1433</p><p>MySQL=TCP+3306</p><p>DNS=UDP+53 or TCP+53</p><p>Telnet=TCP+23</p><p>SSH=TCP+22</p></li><li><p>应用层协议和服务之间的关系：</p><p>用ip地址定位计算机，用端口来定位服务，服务本质上是运行在TCP或UDP的某个端口侦听客户端请求的软件</p><p>查看自己计算机侦听的端口：netstat -an</p><p>测试远程计算机打开的端口：telnet xxx.xxx.xxx.xxx</p></li><li><p>可以<strong>更改服务的端口</strong>和<strong>只打开必要的端口</strong>来<strong>增加服务器安全</strong></p></li><li><p>Windows防火墙安全：</p><ul><li>在网卡上加一层过滤器：只允许某些端口的数据进来</li><li>防火墙是单向的，只拦截来的，不管出去的，出去的时候自动打开端口，出去了就关了，外面的就不要想进来的。</li></ul></li><li><p>Windows防火墙程序防不了灰鸽子木马程序</p><ul><li><p>防火墙是严进宽出，灰鸽子利用了这一点，让中木马的计算机灰鸽子客户端主动连到服务端。所以防火墙防不了灰鸽子木马。</p></li><li><p>解决灰鸽子木马的问题：用IPsec的网络层安全严格控制网络流量</p></li></ul></li></ul><h2 id="运输层的功能"><a href="#运输层的功能" class="headerlink" title="运输层的功能"></a>运输层的功能</h2><ul><li><p>TCP传送的协议数据的那元是TCP报文段</p></li><li><p>UDP传送的协议数据单元是UDP报文或者用户数据报</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125125536.png" style="zoom:100%;margin-left:0px;" /></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125125723.png" style="zoom:80%;margin-left:0px;" /></li></ul><h2 id="运输层协议UDP和TCP"><a href="#运输层协议UDP和TCP" class="headerlink" title="运输层协议UDP和TCP"></a>运输层协议UDP和TCP</h2><ul><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125130057.png" style="zoom:80%;margin-left:0px;" /><p>UDP是无连接的，即是发送数据之前不需要建立连接</p><p>UDP使用尽最大努力交付数据，既不保证可靠交付，同时也不使用拥塞控制</p><p>UDP是面向报文的，UDP没有拥塞控制，很适合多媒体通信的要求</p><p>UDP支持一对一，一对多，多对一和多对多的叫交互通信</p><p>UDP的首部开销小，只有8个字节</p></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125133249.png" style="zoom:67%;margin-left:0px;" /><p><strong>TCP中的几个标志位的作用</strong></p><ul><li><strong>URG</strong> 紧急指针，告诉接收TCP模块<strong>紧要指针域</strong>指着紧要数据。</li><li><strong>ACK</strong> 置1时表示<strong>确认</strong>号（为合法，为0的时候表示数据段不包含确认信息，确认号被忽略。</li><li><strong>PSH</strong> 置1时请求的数据段在<strong>接收方得到后就可直接送到应用程序</strong>，而不必等到缓冲区满时才传送。</li><li><strong>RST</strong> 置1时<strong>重建连接</strong>。如果接收到RST位时候，通常<strong>发生了某些错误</strong>。</li><li><strong>SYN</strong> 置1时用来<strong>发起一个连接</strong>，建立通话和同意建立通话的标志。</li><li><strong>FIN</strong> 置1时表示发端完成发送任务。用来<strong>释放连接</strong>，表明发送方已经没有数据发送了。</li></ul><p>TCP是面向连接的传输层协议</p><p>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的，这里的端点是应用程序，也就是套接字(IP+端口号)。</p><p>TCP提供可靠交付的服务</p><p>TCP提供全双工通信（表现为通信与反馈）</p><p>面向字节流</p></li></ul><h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><p>提供可靠传输，流量控制，拥塞控制功能</p><ul><li><p>可靠传输的工作原理：停止等待，超时重传，确认丢失，确认迟到，自动重传</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125133753.png" style="zoom: 67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125133858.png" style="zoom:67%;margin-left:0px;" /><p>使用ARQ机制的优点是简单，但是信道利用率太低（发送所用的时间占比太小）；基于此可以采用<strong>流水线传输（连续ARQ协议），可以得到更高的信道利用率，采用滑动窗口设计实现流水线的可靠传输</strong></p><p>发一个确认一个</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125134408.png" style="zoom: 67%;margin-left:0px;" /><p>累计确认</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125134612.png" style="zoom:67%;margin-left:0px;" /></li></ul><p><strong>netstat命令</strong>用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a (all)显示所有连接和监听端口选项，默认不显示LISTEN相关</span><br><span class="line">-t (tcp)仅显示tcp相关选项</span><br><span class="line">-o 显示与每个连接相关的所属进程 ID</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 以数字形式显示地址和端口号。</span><br><span class="line">-l 仅列出有在 Listen (监听) 的服務状态</span><br><span class="line">-p 显示 proto 指定的协议的连接</span><br><span class="line">-r 显示路由信息，路由表</span><br><span class="line">-e 显示以太网统计信息。此选项可以与 -s选项组合使用，例如uid等</span><br><span class="line">-s 按各个协议进行统计</span><br><span class="line">-c 每隔一个固定时间，执行该netstat命令。</span><br><span class="line">提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到</span><br></pre></td></tr></table></figure><ul><li><p><strong>Wireshark抓包后的网络层次说明：</strong></p><ul><li><strong>Frame:物理层</strong>的数据帧概况</li><li><strong>Ethernet II: 数据链路层</strong>以太网头部帧</li><li><strong>Internet Protocol Version 4：网络层</strong>IP包头的信息</li><li><strong>Transmission Control Protocol：传输层</strong>的数据段头部信息，此处是TCP协议。</li><li><strong>Hypertext Transfer Protocol：应用层</strong>的信息，此处是<strong>HTTP</strong>协议</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125144521.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125144901.png"></p></li></ul><h2 id="TCP协议连接管理：三次握手-四次挥手协议的大致执行流程"><a href="#TCP协议连接管理：三次握手-四次挥手协议的大致执行流程" class="headerlink" title="TCP协议连接管理：三次握手/四次挥手协议的大致执行流程"></a>TCP协议连接管理：三次握手/四次挥手协议的大致执行流程</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125164801.png" style="zoom: 67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125164802.png" style="zoom:67%;margin-left:0px;" /><p>STP协议默认采用<strong>滑动窗口累计确认</strong>的机制：</p><p><strong>利用TCP的三次握手协议实现对XP系统的攻击：SYN攻击和LAND攻击</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125151050.png" style="zoom: 33%;margin-left:0px;" /><h2 id="TCP实际上的可靠传输实现：以字节为单位的滑动窗口"><a href="#TCP实际上的可靠传输实现：以字节为单位的滑动窗口" class="headerlink" title="TCP实际上的可靠传输实现：以字节为单位的滑动窗口"></a>TCP实际上的可靠传输实现：以字节为单位的滑动窗口</h2><ul><li><p><strong>UDP的可靠传输</strong>有上层的<strong>应用层协议来实现</strong></p></li><li><p>TCP传输过程中<strong>无数据包丢失</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125165726.png" style="zoom: 80%;margin-left:0px;" /></li><li><p>TCP传输过程中<strong>有数据包丢失</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125165727.png" style="zoom: 80%;margin-left:0px;" /></li></ul><p><strong>超时重传时间确认：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125162814.png" style="zoom: 67%;margin-left:0px;" /><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><ul><li><p>TCP的流量控制是基于<strong>滑动窗口机制</strong>的</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125172256.png" style="zoom: 80%;margin-left:0px;" /></li></ul><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><ul><li><p>TCP的拥塞控制指的是将网络中的<strong>所有计算机</strong>，是一种全局控制，是如何避免让网络产生网络堵塞的。当一个计算机发现有丢包问题出现时，会主动把发送数据包的速度降下来。</p></li><li><p>当资源的需求综合&gt;可用的资源时，将产生资源拥塞。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125173907.png" style="zoom:80%;margin-left:0px;" /></li><li><p>拥塞控制的四种算法：慢开始，拥塞避免，快重传，快恢复</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127101954.png" style="zoom: 50%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201127101955.png" style="zoom:50%;margin-left:0px;" /><p>A发送窗口的上限值=Min[A的拥塞窗口,B的接收窗口]</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-网络层</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><p>争论的焦点是<strong>可靠交付应当有谁来负责</strong>？运输过程中只由运输层来决定，网络层不负责可靠传输，可靠传输应该由端系统决定。</p><p>网络层应该向运输层提供怎样的服务？分组交换网提供两种传输服务:</p><ul><li><strong>虚电路服务</strong>：面向连接的，虚电路表示这只是一条逻辑上的连接，和电路交换的一真正的连接只是类似，但并不完全一样。是一种<strong>使所有分组顺序到达目的端</strong>的<strong>可靠性</strong>数据传输服务。</li><li><strong>数据报服务</strong>：无连接的，网络在发送分组时不需要先建立连接，每一个分组独立发送，与其前后的分组无关。是一种<strong>使分组按照独立路由到达目的端</strong>的数据传输服务，比虚电路更加灵活。</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122213200.png" style="zoom:80%;margin-left:0px;" /></li></ul><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><h3 id="虚拟互连网"><a href="#虚拟互连网" class="headerlink" title="虚拟互连网"></a>虚拟互连网</h3><ul><li><p>网络互联的中间设备</p><ul><li>物理层中继系统：转发器，集线器</li><li>数据链路层终极系统：网桥，交换机</li><li>网络层中中继系统：路由器</li><li>网络层以上的中继系统：网关</li></ul></li><li><p>虚拟互连网也就是逻辑互联网络，就是互连起来的各种物理网络的异构性本来就是客观存在的，但是我们利用IP协议就可以使这些性能各异的网络从用户看起来就好像是一个统一的网络。</p></li><li><p><strong>网络层4个协议</strong></p><ul><li>IP协议：</li><li>ARP/RARP协议：</li><li>ICMP协议：</li><li>IGMP协议：</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122215345.png" style="zoom:50%;margin-left:0px;" /></li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><p>分层：分网络部分和主机部分</p></li><li><p>分类：A类（8+24），B类（16+16），C类（24+8），D类（组播），E类（研究）</p></li><li><p>二进制，十进制</p><ul><li><table><thead><tr><th>1</th><th>1</th></tr></thead><tbody><tr><td>10</td><td>2</td></tr><tr><td>100</td><td>4</td></tr><tr><td>1000</td><td>8</td></tr><tr><td>10000</td><td>16</td></tr><tr><td>100000</td><td>32</td></tr><tr><td>1000000</td><td>64</td></tr><tr><td>10000000</td><td>128</td></tr><tr><td>11000000</td><td>192</td></tr><tr><td>11100000</td><td>224</td></tr><tr><td>11110000</td><td>240</td></tr><tr><td>11111000</td><td>248</td></tr><tr><td>11111100</td><td>252</td></tr><tr><td>11111110</td><td>254</td></tr><tr><td>11111111</td><td>255</td></tr></tbody></table></li><li><p>A类 从1.0.0.0 到126.255.255.255<br>B类 从128.0.0.0到191.255.255.255<br>C类 从192.0.0.0到223.255.255.255</p></li><li><p>在IP地址3种主要类型里，各保留了3个区域作为<strong>私有地址</strong>，其地址范围如下：</p><p>A类地址：10.0.0.0～10.255.255.255</p><p>B类地址：172.16.0.0～172.31.255.255</p><p>C类地址：192.168.0.0～192.168.255.255</p><p><strong>注意：网段中主机部分不全为1，不全为0；全0代表这个网段，全1代表网段中的广播</strong></p></li><li><p>几个特殊ip地址：</p><ul><li>0.0.0.0：不是一个真正意义上的IP地址了。它表示的是这样一个集合：所有不清楚的主机和目的网络。</li></ul></li><li><p>255.255.255.255：限制广播地址</p><ul><li><p>244.0.0.1：组播地址</p></li><li><p>127.0.0.1：本地回环地址</p></li><li><p>169.254.0.0：一般开启了dhcp服务的设备但又无法获取到dhcp的会随机使用这个网段的ip</p></li></ul></li></ul></li></ul><h3 id="划分子网和构建超网"><a href="#划分子网和构建超网" class="headerlink" title="划分子网和构建超网"></a>划分子网和构建超网</h3><ul><li><p>子网掩码是一个32位地址，用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在<a href="https://baike.baidu.com/item/%E5%B1%80%E5%9F%9F%E7%BD%91/98626">局域网</a>上，还是在<a href="https://baike.baidu.com/item/%E5%B9%BF%E5%9F%9F%E7%BD%91/422004">广域网</a>上。用来判断自己和目标地址是否在一个网段、</p></li><li><p><strong>子网划分</strong>：解决IPV4不够用的情况</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124084545.png" style="zoom:67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124083233.png" style="zoom:67%;margin-left:0px;" /></li><li><p>C类地址分成四个子网：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124085105.png" style="zoom:67%;margin-left:0px;" /><p>点到点网络的子网掩码是X.X.X.252</p></li><li><p><strong>变长子网划分：</strong>允许把子网继续划分为更小的网络</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124093444.png" style="zoom:67%;margin-left:0px;" /></li><li><p>超网：</p><p>将多个子网合并为一个网</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124094613.png" style="zoom:80%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124094617.png" style="zoom:80%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124101306.png" style="zoom:67%;margin-left:0px;" /></li></ul><h3 id="IP地址和硬件mac地址"><a href="#IP地址和硬件mac地址" class="headerlink" title="IP地址和硬件mac地址"></a>IP地址和硬件mac地址</h3><ul><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124101437.png" style="zoom:50%;margin-left:0px;" /></li><li><p>ip地址决定了数据包最终要到哪一个计算机，mac地址决定了下一跳给谁</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124102027.png" style="zoom:80%;margin-left:0px;" /></li><li><p><strong>同一子网和同一网段可以看作一个意思</strong></p></li><li><p>代理服务器控制那些计算机能上网：同一网段可以用mac地址控制，但是不同网段只能通过ip地址控制。</p></li><li><p><strong>ARP协议：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124153154.png" style="zoom: 67%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124130747.png" style="zoom: 50%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124153158.png" style="zoom:67%;margin-left:0px;" /></li><li><p><strong>ARP欺骗：</strong></p><p>同一局域网里面的两台主机之间相互通信是通过Mac地址寻址的，而如果两台主机若不是处于同一子网里面，则在通信的时候会相互将数据发送给各自的路由器网关，通过网关的IP寻址以达到通信目的。但是网关和自己局域网里面的主机通信的时候还是依靠Mac地址寻址的，所以如果我们要把自己攻击机伪造成网关达到欺骗作用，就应该把目标主机上的网关Mac地址缓存改为攻击机的Mac地址（这就可以通过伪造ARP报文来实现）</p></li><li><p>逆向ARP：计算机请求ip地址的过程</p></li></ul><h3 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h3><ul><li><p>由<strong>首部</strong>和<strong>数据</strong>两部分组成</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124160215.jpg" style="zoom:100%;margin-left:0px;" /></li></ul><h3 id="IP转发分组的流程"><a href="#IP转发分组的流程" class="headerlink" title="IP转发分组的流程"></a>IP转发分组的流程</h3><ul><li>数据路由：路由器在不同网段转发数据包</li><li>网络畅通的条件：能去能回<ul><li>沿途路由器必须知道到目标网络下一跳给哪个接口</li><li>沿途路由器必须知道到源网络下一跳给哪个接口</li></ul></li></ul><h2 id="网际控制报文协议ICMP协议"><a href="#网际控制报文协议ICMP协议" class="headerlink" title="网际控制报文协议ICMP协议"></a>网际控制报文协议ICMP协议</h2><ul><li><p>为了提高IP数据包交付成功的机会，在网络层使用了网际控制报文协议ICMP</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124204747.png" style="zoom:80%;margin-left:0px;" /></li><li><p>报告的错误：终点不可达；原点抑制；时间超过；参数问题；改变路由（重定向）</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124205206.png" style="zoom:80%;margin-left:0px;" /></li><li><p>ping和pathping命令</p></li></ul><h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><h3 id="IGP-内部网关协议"><a href="#IGP-内部网关协议" class="headerlink" title="IGP(内部网关协议)"></a>IGP(内部网关协议)</h3><h4 id="静态路由协议：管理员手工配置路由信息"><a href="#静态路由协议：管理员手工配置路由信息" class="headerlink" title="静态路由协议：管理员手工配置路由信息"></a>静态路由协议：管理员手工配置路由信息</h4><h4 id="动态路由协议RIP：距离向量路由算法，是应用层协议"><a href="#动态路由协议RIP：距离向量路由算法，是应用层协议" class="headerlink" title="动态路由协议RIP：距离向量路由算法，是应用层协议"></a>动态路由协议RIP：距离向量路由算法，是应用层协议</h4><ul><li><p>周期性广播(30s)，可以根据路由器状态变化动态的改变路由表</p></li><li><p>路由器只掌握物理相连的邻居及链路费用</p></li><li><p>动态地选择最佳路径</p></li><li><p>依据路由器跳数选择最佳路径</p></li><li><p>最大跳数16跳</p></li><li><p>网关就是默认路由</p></li><li><p> 用命令来配置动态路由协议RIP：</p></li></ul><p>  router rip</p><p>  network （注意这里的ip地址要看该路由器所连接的几个网段具体属于ABC哪类网，来决定要配置几次）</p>  <img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124212811.png" style="zoom: 50%;margin-left:0px;" /><h4 id="动态路由协议OSPF：链路状态路由算法，是传输层协议"><a href="#动态路由协议OSPF：链路状态路由算法，是传输层协议" class="headerlink" title="动态路由协议OSPF：链路状态路由算法，是传输层协议"></a>动态路由协议OSPF：链路状态路由算法，是传输层协议</h4><ul><li><p>所有路由器掌握完整的网路拓扑和链路费用信息</p></li><li><p>依据带宽来选择最佳路径</p></li><li><p>支持多区域，触发式更新</p></li><li><p>三个表：邻居表，链路状态表，计算路由表</p></li><li><p>用命令来配置动态路由协议OSPF：</p><p>router rip</p><p>network （注意这里的ip地址要看该路由器所连接的几个网段具体属于ABC哪类网，来决定要配置几次）</p></li></ul><h3 id="EGP-外部网关协议-和IGP-外部网关协议"><a href="#EGP-外部网关协议-和IGP-外部网关协议" class="headerlink" title="EGP(外部网关协议)和IGP(外部网关协议)"></a>EGP(外部网关协议)和IGP(外部网关协议)</h3><ul><li>IGP：一个自治系统AS内使用的路由选择协议<ul><li>BGP协议 ：发言人机制</li></ul></li><li>EGP：在自治系统AS之间使用的路由选择协议<ul><li>RIP协议</li><li>OSPF协议</li></ul></li></ul><h2 id="主机A（135-24-25-23）第一次和不同网段的主机B（135-24-52-123）通信完整过程（数据链路层和网络层）"><a href="#主机A（135-24-25-23）第一次和不同网段的主机B（135-24-52-123）通信完整过程（数据链路层和网络层）" class="headerlink" title="主机A（135.24.25.23）第一次和不同网段的主机B（135.24.52.123）通信完整过程（数据链路层和网络层）"></a>主机A（135.24.25.23）第一次和不同网段的主机B（135.24.52.123）通信完整过程（数据链路层和网络层）</h2><ul><li>A封装好要发送的数据，在要写目的地址时</li><li>A会用子网掩码将自己和目的的ip地址做与运算，判断A和B是否在一个网段，如果不在一个网段，A就知道该用网关把自己的数据传递给B，所以A会广播一个ARP包（连带A自己的ip和mac地址）来获取网关的mac地址</li><li>网关收到ARP包后，先把A的ip和mac地址记录下来，然后把自己的ip和mac地址封装在ARP包中，发送给A</li><li>A封装报文，源mac地址写A自己的mac地址，目标mac地址写网关mac地址，源ip地址写A自己的ip地址，目标ip地址写B的ip地址。</li><li>网关收到报文后，发现是给我自己发的，就开始解包，解开后，通过目标ip地址发现是给另一个网段的主机发送的</li><li>此时如果网关本身就是路由器就直接把数据报把送给吓一跳路由器，如果网关是普通的PC，那么就发送给路由器，由路由器发送给下一跳路由器，目标mac地址写下一跳路由器的mac地址。</li><li>（注意：在公网环境中，从源主机向目标主机请求发送数据时，源ip地址和目的ip地址在传输过程中是不需要改变的，但是由于大部分的情况是源主机是位于局域网环境中，所以，考虑NAT的因素，需要在从保留地址到公网ip的变化中同时也要改变源ip的地址。此时，对于目标ip地址，肯定是公网ip，因为不可能用局域网ip去访问另一个网段中的局域网ip）</li><li>历经千辛万苦，报文段终于到达了B的主机的路由器，路由器发送报文到B所在的网段的网关</li><li>C网段的网关解包后发现不是给自己的，而是给自己网段内的B主机（这里再次用arp协议来实现同一个网段内的通信，先用arp发送一个广播，得到主机B的ip和mac地址，然后就可以在数据链路层中完成同一个网段的通信），就发送给了C主机</li></ul><p><strong>另一个个差不多的过程说明，差不多：</strong></p><ul><li><p>广播只有2层的。跨网段访问是寻址。<br>给你举一个例子，详细说一下数据包的转发流程，环境是三层交换机有两个网段，10.0.0.1/24和192.168.0.1/24，pc1是10段的，pc2是192段的。pc1要与pc2通信。过程如下<br>1.pc1将要与pc2通信，首先根据网卡的ip地址与掩码算出pc2是否与pc1是同网段，如果是同网段直接二层转发，如果不是将跨网段转发<br>2.pc1算出pc2和自己不是同网段，所以要将数据包发送到网关由网关进行三层寻址转发。<br>3.pc1到网关为二层转发，也就是数据帧转发，数据帧转发需要知道对方mac地址，首先pc1会读电脑的arp缓存，看是否有网关ip与mac地址的对应关系，如果有将直接封装帧转发；如果没有将使用arp协议也就是广播，携带自己的ip地址与mac地址，目的地址为网关ip，mac地址为ffff-ffff-ffff。网关收到此arp广播后，将回复pc1自己的mac地址，数据包为源网关ip和mac地址目的为pc1ip和mac地址。<br>4.pc1收到数据包后会将此ip和mac地址写入到电脑的arp缓存表里，并直接封装数据包，三层ip头为源pc1-ip，目的为pc2-ip，二层帧格式为源pc1-mac，目的为网关mac地址（记住此包头）。<br>5.网关将收到pc1发来的数据包，进行拆包，根据其目的ip地址进行寻址（路由表），找到对应的路径（也就是192段vlan）。<br>6.三层交换机会根据其目的ip地址进行本机的arp缓存查找，如果查找到ip和mac地址的对应关系将直接封装转发，如果没有交换机将发送arp广播包获取目的ip地址的mac地址（广播包将只发送192段vlan，其他vlan不广播）。<br>7.三层交换机得知pc2-mac地址后将转发数据，三层包头为源pc1-ip，目的为pc2-i，二层帧包头为源192段网关mac，目的为pc2-mac。<br>8.pc2将收到三层交换发来的数据包，进行拆封即可获取数据，并回复pc1过程同上。</p><p>三层交换机等同于路由器。也就是说源ip和目的ip在数据包里一直不变（不经过nat的情况），mac地址将时刻改变。广播只存在二层。三层情况下是路由寻址。</p></li></ul><h2 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h2><ul><li>IGMP协议：是TCP/IP 协议族中负责IP组播成员管理的协议，用来在IP主机和与其直接相邻的组播路由器之间建立、维护组播组成员关系。</li></ul><h2 id="虚拟专用网VPN"><a href="#虚拟专用网VPN" class="headerlink" title="虚拟专用网VPN"></a>虚拟专用网VPN</h2><ul><li>VPN：Virtual Private Network，目的是建立更加安全私密的远程连接</li><li>形象解释就是在巨大的错综复杂的互联网环境中建立一条两个路由器之间的直通隧道</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201125090725.png" style="zoom:80%;margin-left:0px;" /></li></ul><h2 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h2><ul><li><p>从局域网地址到公网地址的转化，可以大大缓解ipv4不够用的情况</p></li><li><p>NAT分为静态NAT，动态NAT和PAT，前两种NAT都是针对ip而言的对应，只不过一个是一对一，一个是多对多，现在所说的NAT实际上是PAT（Port Address Translation：端口地址转换）：</p><ul><li>NAT的地址转换是指每个内网地址都被转换成ip地址+源端口的方式，这需要公网ip地址为多个。</li><li>而PAT由于ip地址不足够，就会出现内网地址被转换成ip地址+端口段的形式，这样的公网ip地址通常只是一个。</li><li>举个例子：<ul><li>NAT<br>　　192.168.0.2：4444 —-〉202.116.100.5：4444<br>  　　192.168.0.3：5555 —-〉202.116.100.6：5555<br>  　　192.168.0.10：1233 —〉202.116.100.5：1233</li><li>PAT<br>　　192.168.0.2：4444 —-〉202.116.100.5：50003<br>  　　192.168.0.3：5555—-〉202.116.100.5：50004<br>  　　192.168.0.10：1233 —〉202.116.100.5：50005</li><li><strong>简单来说，PAT是多对1，NAT是多对多.</strong></li></ul></li></ul></li><li><p>NAT原理图</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124233628.png" style="zoom: 33%;margin-left:0px;" /></li><li><p>端口映射：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124233635.png" style="zoom:33%;margin-left:0px;" /></li><li><p>内网穿透</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124233640.png" style="zoom:33%;margin-left:0px;" /></li><li><p>可见，端口映射和内网穿透技术都可以实现非同网段访问局域网ip，但是因为国内的网络环境是如图所示的套娃情况。NAT的实现往往不是一层，而是多层，所以基本不可能用端口映射的方式实现本地局域网PC的外雇访问。有什么解决方法呢？一.让ISP给你的第一层路由器分配一个公网ip，很难，几乎不可能。二.花钱买内网穿透服务，很贵且限流。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124233704.png" style="zoom:33%;margin-left:0px;" /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-数据链路层</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122095537.png" style="zoom:50%;" /><h2 id="数据链路层基本概念及基本问题"><a href="#数据链路层基本概念及基本问题" class="headerlink" title="数据链路层基本概念及基本问题"></a>数据链路层基本概念及基本问题</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>两种信道类型：<ul><li>点到点信道</li><li>广播信道</li></ul></li><li>链路和数据链路：链路是物理层，数据链路包含物理层和数据链路层</li><li>帧：在网络层包的基础上增加头和尾</li></ul><h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><ul><li>在网络层数据报基础上+帧首部&amp;帧尾部，帧的数据部分MTU≤1500Byte</li></ul><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><ul><li>用<strong>字节填充法</strong>解决透明传输问题</li></ul><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><ul><li><p>传输过程中可能会有比特差错（0变1或者1变0），误码率</p></li><li><p><strong>循环冗余检验CRC</strong>（除数由数据链路层协议确定）,通过CRC算法生成FCS帧检验序列</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122102828.png" style="zoom:50%;margin-left:0px;" /> <p>不纠错，有错误直接丢掉（重传不是数据链路层管的事情）</p><p>有可能出错也检查不出，CRC不是可靠传输</p></li></ul><h2 id="两场情况下的数据链路层"><a href="#两场情况下的数据链路层" class="headerlink" title="两场情况下的数据链路层"></a>两场情况下的数据链路层</h2><h3 id="使用点对点信道的数据链路层（PPP协议）"><a href="#使用点对点信道的数据链路层（PPP协议）" class="headerlink" title="使用点对点信道的数据链路层（PPP协议）"></a>使用点对点信道的数据链路层（PPP协议）</h3><ul><li><p>例子：拨号上网</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122103648.png" style="zoom: 80%;margin-left:0px;" /></li><li><p>特点：简单，封装成帧，支持多层网络协议，多种类型链路，差错检验，检测连接状态，最大传送单元，网络层地址协商，数据压缩协商</p></li><li><p>由三部分组成：</p><ul><li>一个将IP数据报封装到串行链路的方法；</li><li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP；</li><li>一套网络控制协议NCP，其中的每一个协议支持不同的网络层协议</li></ul></li><li><p>PPP帧格式</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122105300.png" style="zoom:50%;margin-left:0px;" /></li><li><p>解决透明传输：传输比特（零比特填充法），传输字节（字节填充）</p></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122105257.png" style="zoom:50%;margin-left:0px;" /></li><li><p><strong>PPP协议工作流程</strong></p><ul><li>当用户拨号接入ISP后，就建立了一条从用户PC机到ISP的物理连接。</li><li>这时用户PC机向ISP发送一系列的LCP分组(封装成多个PPP帧)，以便建立LCP连接。</li><li>这些分组及其响应选择了将要使用的一些PPP参数。</li><li>接着还要进行网络层配置，NCP给新接入的用户PC机分配一个临时的IP地址。</li><li>这样，用户PC机就成为因特网上的一个有IP地址的主机了。</li><li>当用户通信完毕时，NCP释放网络层连接，收回原来分配出去的IP地址。</li><li>接着，LCP释放数据链路层连接。</li><li>最后释放的是物理层的连接。</li></ul></li><li><p><strong>PPPoE</strong>:<br>一种建立在以太网上的点到点的隧道技术。<strong>以太网本身是基于广播的</strong>，无法提供可靠的点到点支持，PPPoE解决了这个问题，在以太网上提供了可靠的点到点连接，可以让运营商验证你的身份并予以计费。</p></li></ul><h3 id="使用广播信道的数据链路层（以太网的CSMA-CS协议）"><a href="#使用广播信道的数据链路层（以太网的CSMA-CS协议）" class="headerlink" title="使用广播信道的数据链路层（以太网的CSMA/CS协议）"></a>使用广播信道的数据链路层（以太网的CSMA/CS协议）</h3><ul><li><p>局域网的拓扑：星形网，总线网，树形网，环形网</p></li><li><p>共享通信媒体：</p><ul><li>静态划分信道：频分/时分/波分/码分复用</li><li><strong>动态媒体接入技术：随机接入（以太网）</strong>，受控接入</li></ul></li><li><p><strong>多点接入，载波监听</strong></p></li><li><p><strong>碰撞检测</strong>，发现冲突最长时间是2焘 </p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122141720.png" style="zoom:50%;margin-left:0px;" /></li><li><p><strong>半双工通信</strong></p></li><li><p>2套=51.2微秒=1争用期=基本退避时间；10Mb/s的以太网争用期发送512bit（64Byte），前64字节没有发现冲突情况，之后也就不会有冲突了。所以<strong>10M以太网中最短有效帧为64字节</strong>。</p></li><li><p>退避算法</p></li></ul><h2 id="以太局域网"><a href="#以太局域网" class="headerlink" title="以太局域网"></a>以太局域网</h2><ul><li><p>两个标准：Ethernet V2和802.3</p></li><li><p>用集线器组以太局域网</p></li><li><p>以太网信道利用率</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122143805.png" style="zoom:50%;margin-left:0px;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122143808.png" style="zoom:80%;margin-left:0px;" /></li><li><p>MAC层的硬件地址：48位二进制（前24为代表厂家，后24为厂家自己指定）</p><ul><li>网卡从网络上每收到一个MAC帧就会用硬件检查MAC帧中的MAC地址，如果是发往本站的帧则收下，其他的丢弃。包括单播帧，广播帧，多播帧</li><li>一个局域网不能出现两个相同的mac地址，因为mac可以手动指定自定义的mac地址</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122163027.png" style="zoom: 67%;margin-left:0px;" /></li><li>帧间最小的间隔时间为9.6微秒，是为了使刚刚收到的数据帧站的接收缓存得以清理，做好接收下一帧的准备</li></ul></li></ul><h2 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h2><ul><li><p>物理层的扩展</p><ul><li>用集线器连网最多不要超过30台机器，否则效率极慢</li></ul></li><li><p>数据链路层的扩展</p><ul><li><p>网桥：有一个mac记忆表，可存储（来源）转发（目的），可以隔离冲突域</p><ul><li>透明网桥：以太网上的站点不知道所发送的帧将经过那几个网桥，是一种即插即用的设备——自学习</li><li>源路由网桥：在发送帧时，把最详细的最佳路由信息（路由最少/时间最短）放在帧的首部中。（通过发送 ’ 发现帧 ‘ 来寻找最佳路由信息）</li></ul></li><li><p>交换机：可以看作多口网桥。基本上每个口直接连一台机器，一台机器一个冲突域，也就是没有冲突了。可以实现全双工。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201124125911.png" style="zoom:50%;margin-left:0px;" /><p><strong>交换机的mac表的生成的流程：</strong></p><ul><li><strong>A</strong> <strong>先向 B 发送一帧，从接口 1 进入到交换机。</strong></li><li><strong>交换机收到帧后，先查找交换表，没有查到应从哪个接口转发这个帧。</strong></li><li><strong>交换机把这个帧的源地址 A 和接口1 写入交换表中，并向除接口1以外的所有的接口广播这个帧。</strong></li><li><strong>C</strong> <strong>和 D 将丢弃这个帧，因为目的地址不对。只 B 才收下这个目的地址正确的帧。这也称为过滤。</strong></li><li><strong>从新写入交换表的项目 (A, 1) 可以看出，以后不管从哪一个接口收到帧，只要其目的地址是A，就应当把收到的帧从接口1转发出去。</strong></li><li><strong>B</strong> <strong>通过接口 3 向 A 发送一帧。</strong></li><li><strong>交换机查找交换表，发现交换表中的 MAC 地址有 A。表明要发送给A的帧（即目的地址为 A 的帧）应从接口1转发。于是就把这个帧传送到接口 1 转发给 A。显然，现在已经没有必要再广播收到的帧。</strong></li><li><strong>交换表这时新增加的项目 (B, 3)，表明今后如有发送给 B 的帧，就应当从接口 3 转发出去。</strong></li><li><strong>经过一段时间后，只要主机 C 和 D 也向其他主机发送帧，以太网交换机中的交换表就会把转发到 C 或 D 应当经过的接口号（2 或 4）写入到交换表中。</strong></li><li><strong>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的有效时间。过期的项目就自动被删除。</strong></li></ul></li></ul></li><li><p>理解<strong>冲突域和广播域</strong>的区别（对于集线器，交换机，路由器）</p></li><li><p>虚拟局域网：</p><ul><li><p>LAN局域网：用集线器组成的一个网段就是一个LAN</p></li><li><p>VLAN虚拟局域网：用交换机组成的每个网段之间又可以组成新的一个个网段，就是虚拟局域网（相当于n刀把交换机分成n+1段）</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122183412.png" style="zoom:67%;margin-left:0px;" /></li></ul></li></ul><h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2><ul><li>速率达到100Mb/s以上的以太网成为高速以太网</li><li>100BSSE-T以太网<strong>全双工，不使用CSMA/CS协议</strong>，因为可以在接口处排队</li><li>帧间时间间隔变为0.96微秒</li></ul><h2 id="半双工-全双工-amp-集线器-交换机"><a href="#半双工-全双工-amp-集线器-交换机" class="headerlink" title="半双工/全双工&amp;集线器/交换机"></a>半双工/全双工&amp;集线器/交换机</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201122171509.jpg" style="zoom:80%;margin-left:0px;" /><ul><li><p><strong>集线器</strong>只能实现<strong>半双工</strong>。<strong>全双工</strong>的网络必须要使用<strong>交换机</strong>组网。</p></li><li><p><strong>集线器</strong>，是共享带宽型网络设备，它本身没有数据处理能力，不能实现点到点的连接，所以不能实现全双工。虽然集线器可以使用双绞线，提供了两对线，但在任一时刻，只能有一对线工作，所以集线器只能是半双工的，不可能是全双工的。除非它带有部分交换机的功能。</p></li><li><p><strong>交换机</strong>，是独享带宽型网络设备，它本身有类似PC机CPU的数据交换处理器，能够识别连接到交换机各端口上的网络设备的MAC地址，能够实现点到点的专用连接，所以能够实现全双工操作。</p></li><li><p><strong>注意：</strong>如果要实现全双工，交换机的端口不能和集线器相连，否则这个端口也只能工作在半双工状态下。交换机具有自动识别全双工和半双工状态的功能。(如上图)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-物理层</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><ul><li>物理层解决如何在连接各种计算机的传输媒体上传输数据比特流</li><li>主要任务时确定与传输媒体接口的一些特性<ul><li>机械特性：接口形状，大小，引脚数量</li><li>电气特性：电压范围</li><li>功能特性：例如规定-5V表示0，+5V表示1</li><li>过程特性：连接时各个部件的工作步骤</li></ul></li></ul><h2 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121195457.png"></p><ul><li><p>消息：具有意义的数据</p></li><li><p>数据：运送消息的实体</p></li><li><p>信号：数据的电气或电磁的表现</p><ul><li><p>模拟信号：消息的参数取值时连续的</p></li><li><p>数字信号：消息的参数取值是离散的</p></li></ul></li><li><p>码元：在数字通信中常常用时间间隔相同的符号来表示一个二进制数字，这样的时间间隔内的信号称为二进制码元，而这个间隔被称为码元长度</p></li><li><p>码元长度：1码元可以携带的nbit信息量</p></li><li><p>信道：向一个方向传送消息的媒体（一条发送的信道+一条接收的信道）</p><ul><li>单工通信：单向高速公路</li><li>半双工通信：对讲机</li><li>全双工通信：电话</li></ul></li><li><p>基带信号：来自信源的信号</p></li><li><p>带通信号：将基带信号经过载波调制（调幅，调频，调相）后（加频）</p></li><li><p>单极性不归零码，双极性不归零码，单极性归零码，双极性归零码，曼彻斯特编码，差分曼彻斯特编码</p></li><li><p>奈氏准则：在任何信道中，<strong>码元传输速率是有上限</strong>的，否则会出现码间串扰导致的干扰和失真，理想的信道的最高码元传输速率=2✖W(信道带宽:Hz) 波特</p></li><li><p>香农定理：信道的极限信息传输速率C=W✖log2(1+S/N) b/s</p></li></ul><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121202938.png"></p><ul><li>导向传输媒体<ul><li>双绞线：STP，UTP</li><li>同轴电缆：50Ω，75Ω</li><li>光纤</li></ul></li><li>非导向传输媒体<ul><li>无线电磁波传播（短波，微波）</li></ul></li><li>物理层设备<ul><li>集线器：是一个很大的冲突域，采用广播的方式</li></ul></li></ul><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><p><strong>充分利用一条共享信道</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121220043.png" style="zoom:67%;" /><h3 id="频分复用技术（FDM）"><a href="#频分复用技术（FDM）" class="headerlink" title="频分复用技术（FDM）"></a>频分复用技术（FDM）</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121220341.png" style="zoom:50%;" /><h3 id="时分复用技术（TDM）"><a href="#时分复用技术（TDM）" class="headerlink" title="时分复用技术（TDM）"></a>时分复用技术（TDM）</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121220518.png" style="zoom:67%;" /><h3 id="统计时分复用（STDM）"><a href="#统计时分复用（STDM）" class="headerlink" title="统计时分复用（STDM）"></a>统计时分复用（STDM）</h3><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121221519.png" style="zoom:67%;" /><h3 id="码分复用技术（CDM）"><a href="#码分复用技术（CDM）" class="headerlink" title="码分复用技术（CDM）"></a>码分复用技术（CDM）</h3><p><strong>同一个频率同时传就只能采用码分复用</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121223627.png" style="zoom: 80%;" /><h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><ul><li>PCM（脉码调制）：电话通信局用的，有两个标准（24路和32路）</li></ul><h2 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h2><ul><li><p>xDSL技术：用电话线提供internet接入。低频留给传统电话，高频给上网用，打电话和上网互不影响。采用频分复用技术</p></li><li><p>HFC光纤同轴混合网：用有线电视提供internet接入。</p></li><li><p>FTTx技术：光纤到户</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网-概述</title>
      <link href="/2020/11/21/%E8%AE%A1%E7%BD%91-%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/11/21/%E8%AE%A1%E7%BD%91-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><p>连通性，信息共享，软硬件共享</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121151622.png"></p><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><ul><li><p>网络 network：结点（计算机，交换机）+链路</p></li><li><p>互联网 internet（数量距离相对网络增大）：网络+路由器</p></li><li><p>因特网 Internet：全球最大的互联网</p></li><li><p>因特网发展三个阶段：</p><ul><li>ARPANET向互联网发展</li><li>三级结构的因特网（校园网，地区网，主干网）</li><li>多层次的ISP结构的因特网</li></ul></li><li><p>因特网的<strong>标准化</strong>工作由<strong>因特网协会</strong>定义：因特网研究部，因特网工程部</p></li></ul><h2 id="因特网组成"><a href="#因特网组成" class="headerlink" title="因特网组成"></a>因特网组成</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121153542.png" style="zoom:67%;" /><p>C/S：客户机/服务器下载东西，客户机越多下载越慢</p><p>P2P：结点越多下载越快</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121153601.png" style="zoom:67%;" /><p>电路交换：需要建立连接搭建专线（建立连接-》通话-》释放资源），适用于实时通讯（打电话）</p><p>分组交换：不需要建立连接，没有专线。将一个报文拆分为多包，每一个包不一定走同一条路。路由器由存储转发的功能。但是比电路交换延迟更大。</p><p>报文交换：和分许交换类似，但是不用拆分。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121155600.png" style="zoom:67%;" /><h2 id="计算机网络在我国发展"><a href="#计算机网络在我国发展" class="headerlink" title="计算机网络在我国发展"></a>计算机网络在我国发展</h2><p>1994年4月20日PRC接入互联网</p><h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121160433.png" style="zoom: 67%;" /><p>局域网：自己购买设备，自己维护，带宽固定。</p><p>广域网：花钱买服务，花钱买带宽。</p><h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><ul><li>速率：连接在计算机网络上的主机在数字信道（一个接收端到一个发送端）上的传送位数的速率。b/s,kb/s,Mb/s,Gb/s</li><li>带宽：数字信道所能传送的<strong>最高</strong>数据率。b/s,kb/s,Mb/s,Gb/s</li><li>吞吐率：单位时间内通过某个网络的数据量（总的）b/s,Mb/s</li><li>时延：发送时延，传播时延，处理时延，排队时延</li><li>时延带宽积：传播时延✖带宽（一个信道承载数据能力）</li><li>往返时间：从发送方发送数据开始，到发送方收到接收方确认</li><li>利用率：有数据通过时间/(有无)数据通过时间</li><li>非性能指标：费用，质量，标准化，可靠性，可扩展性，可升级性，管理与维护</li></ul><h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121162844.png" style="zoom:67%;" /><p><strong>分层的原因：标准化并降低每一层的相互关联</strong></p><h3 id="OSI7层"><a href="#OSI7层" class="headerlink" title="OSI7层"></a>OSI7层</h3><ul><li>应用层：能够产生网络流量，能和用户交互的应用程序</li><li>表示层：加密，压缩，编解码（开发人员需要考虑的问题）</li><li>会话层：服务器和客户端建立的会话（可以用来查木马：netstat -nb）木马一般时隐藏盗窃信息</li><li>传输层：可靠传输(建立会话)，不可靠传输(QQ发消息，广播发送)，流量控制</li><li>网络层：IP地址编址，选择最佳路径</li><li>数据链路层：数据如何封装，添加物理层mac地址</li><li>物理层：电压，接口标准</li></ul><p><strong>网络排错：从底层往高层排错</strong></p><p><strong>网络安全和osi参考模型</strong></p><ul><li>物理层安全(连线安全)</li><li>数据链路层安全(ADSL和AP密码)</li><li>网络层安全（网关对某些网段的ip限制访问外网）</li><li>应用层安全（SQL注入漏洞，上传漏洞）</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121172504.png"></p><table><thead><tr><th align="center">应用层</th><th align="center">传输层</th><th align="center">网络层</th><th align="center">数据链路层</th><th align="center">物理层</th></tr></thead><tbody><tr><td align="center">应用程序（传输数据单元PDU）</td><td align="center">段（报文）</td><td align="center">包（数据报）</td><td align="center">帧</td><td align="center">比特流</td></tr></tbody></table><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121181555.png" style="zoom:50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121181556.png" style="zoom: 50%;" />]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Martin Fowler关于微服务架构的论文译文</title>
      <link href="/2020/11/21/Martin-Fowler%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BA%E6%96%87%E8%AF%91%E6%96%87/"/>
      <url>/2020/11/21/Martin-Fowler%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BA%E6%96%87%E8%AF%91%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/liuning8023/p/4493156.html">中文译文地址</a></p><p><a href="https://martinfowler.com/articles/microservices.html">Martin Flower原论文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 技术 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker进阶指南</title>
      <link href="/2020/11/20/docker%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
      <url>/2020/11/20/docker%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="docker可视化"><a href="#docker可视化" class="headerlink" title="docker可视化"></a>docker可视化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Portainer:利用Portainer可以轻松构建，管理及维护Docker环境，它基于容器安装，高效部署</span></span><br><span class="line">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br><span class="line"><span class="comment"># Rancher:Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应用部署和管理。</span></span><br><span class="line">docker run ‐di ‐‐name=rancher ‐p 9090:8080 rancher/server</span><br></pre></td></tr></table></figure><h2 id="docker的分层机制"><a href="#docker的分层机制" class="headerlink" title="docker的分层机制"></a>docker的分层机制</h2><p>Docker镜像是<strong>分层</strong>构建的，Dockerfile 中每条指令都会新建一层。例如以下 Dockerfile:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">COPY . /app</span><br><span class="line">RUN make /app</span><br><span class="line">CMD python /app/app.py</span><br></pre></td></tr></table></figure><p>以上四条指令会创建四层，分别对应<strong>基础镜像、复制文件、编译文件以及入口文件</strong>，每层只记录本层所做的更改，而这些层都是<strong>只读层(镜像层)<strong>。当你启动一个容器，Docker 会在最顶部添加</strong>读写层</strong>，你在容器内做的所有更改，如写日志、修改、删除文件等，都保存到了读写层内，一般称该层为<strong>容器层</strong>，如下图所示：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201120162027.jpeg"></p><p>事实上，<strong>容器（container）和镜像（image）的最主要区别就是容器加上了顶层的读写层</strong>。所有对容器的修改都发生在此层，镜像并不会被修改，也即前面说的 COW(copy-on-write)技术。容器需要读取某个文件时，直接从底部只读层去读即可，而如果需要修改某文件，则将该文件拷贝到顶部读写层进行修改，只读层保持不变。</p><p><strong>每个容器都有自己的读写层</strong>，因此多个容器可以使用同一个镜像，另外容器被删除时，其对应的读写层也会被删除（如果你<strong>希望多个容器共享或者持久化数据，可以使用 Docker volume</strong>）。</p><p>最后，执行命令 docker ps -s，可以看到最后有两列 size 和 virtual size。其中 size就是容器读写层占用的磁盘空间，而 virtual size 就是读写层加上对应只读层所占用的磁盘空间。如果两个容器是从同一个镜像创建，那么只读层就是 100%共享，即使不是从同一镜像创建，其镜像仍然可能共享部分只读层（如一个镜像是基于另一个创建）。因此，docker 实际占用的磁盘空间远远小于 virtual size 的总和。</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit <span class="comment">#提交容器成为一个新的副本</span></span><br><span class="line">docker commit -m=<span class="string">&quot;描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器id 自定义目标镜像名:[版本号]</span><br></pre></td></tr></table></figure><p><strong>接下来是docker的三个精髓：容器数据卷，DockerFile，Docker网络</strong></p><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>用来实现”删服务不删数据”，数据可持久化，将<strong>容器内的目录</strong>映射<strong>同步</strong>到<strong>宿主机的目录</strong>中，类似于双向绑定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 宿主机目录:容器内目录 <span class="comment">#注意目录都是绝对地址</span></span><br><span class="line">docker inspect 容器id <span class="comment">#查看容器的具体同步目录信息Mount</span></span><br><span class="line"><span class="comment">#数据卷命令</span></span><br><span class="line">docker volume create <span class="comment">#创建数据卷</span></span><br><span class="line">docker volume inspect <span class="comment">#显示数据卷详细信息</span></span><br><span class="line">docker volume ls <span class="comment">#显示所有数据卷</span></span><br><span class="line">docker volume rm <span class="comment">#移除数据卷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#具名和匿名挂载（都不指定路径）</span></span><br><span class="line">docker run -d -P name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">docker run -d -P name nginx01 -v /etc/nginx ngix</span><br><span class="line"></span><br><span class="line">所有的docker容器内的卷没有指定具体路径的情况下，都在`/var/lib/docker/volumes`下</span><br><span class="line"></span><br><span class="line">-v /宿主机路径：容器内路径   <span class="comment">#指定路径挂载</span></span><br><span class="line">-v 数据卷名：容器内路径  <span class="comment">#具名挂载</span></span><br><span class="line">-v 容器内路径  <span class="comment">#指定目录挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里的ro和rw代表读写权限，ro表示只读，rw表示读和写，对挂载出来的内容就进行了限制，ro表示只能通过宿主机进行改变，容器内无法操作</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DockerFile:用来构建docker镜像的构建文件，相当于一个命令脚本。</span></span><br><span class="line"><span class="comment">#镜像是层次的，脚本里的命令也是层次的</span></span><br><span class="line"><span class="comment">#格式：指令(大写) 参数</span></span><br><span class="line"><span class="comment">#每个命令就是镜像的一层</span></span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>] <span class="comment">#匿名挂载</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;------end-------&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line">docker build -f dockerfile01 -t jack/centos</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两个/多个容器之间同步数据（数据卷容器）</span></span><br><span class="line"><span class="comment">#docker02挂载到docker01上，此时docker01就是数据卷容器</span></span><br><span class="line">docker run -d -it --name docker02 --volumes--from docker01 jack/centos</span><br></pre></td></tr></table></figure><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建步骤</span></span><br><span class="line">1. 编写dockerfile文件</span><br><span class="line">2. docker build <span class="comment">#构建成为一个镜像</span></span><br><span class="line">3. docker run <span class="comment">#运行镜像</span></span><br><span class="line">4. docker push <span class="comment">#发布镜像（dockerhub，阿里云镜像仓库）</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基础知识</span></span><br><span class="line">1. 每个保留关键字（指令）都大写</span><br><span class="line">2. 执行从上到下</span><br><span class="line">3. <span class="string">&quot;#&quot;</span>表示注释</span><br><span class="line">4. 每一个指令都会创建提交到一个新的镜像层</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201120220311.png"></p><p><strong>dockerfile是面向开发的，交付环境就是交付一个dockerfile文件：DockFile-&gt;DockerImages-&gt;Docker容器</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201120220723.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM <span class="comment">#基础镜像</span></span><br><span class="line">MAINTAINER <span class="comment">#镜像是谁写的</span></span><br><span class="line">RUN <span class="comment">#镜像构建时需要运行的命令</span></span><br><span class="line">ADD <span class="comment">#添加内容（tocmat，mysql等）</span></span><br><span class="line">WORKDIR <span class="comment">#镜像的工作目录</span></span><br><span class="line">VOLUME <span class="comment">#挂载目录</span></span><br><span class="line">EXPOSE <span class="comment">#暴露的端口</span></span><br><span class="line">CMD <span class="comment">#指定容器启动的时候要运行的命令，只有最后一个会生效</span></span><br><span class="line">ENTRYPOINT <span class="comment">#指定容器启动的时候要运行的命令，可以追加命令</span></span><br><span class="line">ONBUILD <span class="comment">#只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行ONBUILD后的指令</span></span><br><span class="line">COPY <span class="comment">#将文件拷贝到目录中</span></span><br><span class="line">ENV <span class="comment">#构建的时候设置环境变量（例：mysql用户名）</span></span><br></pre></td></tr></table></figure><p><strong>实战：自定义centos</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mydocker-centos</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER jack&lt;yangfanjack1024@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-----end-----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="comment">#ADD </span></span><br><span class="line"><span class="comment">#VOLUME </span></span><br><span class="line"><span class="comment">#ENTRYPOINT </span></span><br><span class="line"><span class="comment">#ONBUILD </span></span><br><span class="line"><span class="comment">#COPY </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#得到自定义镜像mycentos:0.1</span></span><br><span class="line">docker build -f mydocker-centos -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编写包含tomcat的centos自定义镜像</span></span><br><span class="line">1. 准备镜像文件tomvat和jdk的压缩包</span><br><span class="line">2. 编写dockerfile文件，官方命名Dockerfile，build会自动寻找这个文件，就不需要-f指定了</span><br><span class="line"></span><br><span class="line"><span class="comment">#Dockerfile文件</span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER jack&lt;yangfanjack1024@qq.com&gt;</span><br><span class="line">COPY readme.txt /usr/<span class="built_in">local</span>/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u271-linux-x64.tar.gz /usr/<span class="built_in">local</span></span><br><span class="line">ADD apache-tomcat-9.0.40.tar.gz /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORK <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_271</span><br><span class="line">ENV CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.40</span><br><span class="line">ENV CATALINA_BASE /usr/<span class="built_in">local</span>/apache-tomcat-9.0.40</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.40/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.40/bin/logs/catalina.out</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建自定义tomcat的镜像</span></span><br><span class="line">docker build -t diytomcat .</span><br><span class="line"><span class="comment">#启动tomcat</span></span><br><span class="line">docker run -d -p 8080:8080 --name jacktomcat -v /root/<span class="built_in">test</span>/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.40/webapps/<span class="built_in">test</span>/ -v /root/tomcatlogs/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.40/logs/ diytomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后直接在宿主机的test中发布网站即可</span></span><br></pre></td></tr></table></figure><p><strong>发布镜像到dockerhub和阿里云</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先注册</span></span><br><span class="line">https://hub.docker.com/</span><br><span class="line"><span class="comment">#在宿主机登录</span></span><br><span class="line">docker login -u XXX -p XXX</span><br><span class="line"><span class="comment">#发布前先用tag命令修改为规范的镜像</span></span><br><span class="line">docker tag 镜像id jack/diytomcat:1.0</span><br><span class="line">docker push jack/diytomcat:1.0</span><br><span class="line"><span class="comment">#提交的时候就是按照层级来发布的</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先注册</span></span><br><span class="line">https://www.aliyun.com/?spm=5176.12901015.ahjq0uaqt.1.a8fd525cv7uh0R</span><br><span class="line"><span class="comment">#找到容器镜像服务</span></span><br><span class="line"><span class="comment">#创建命名空间（一个账号只能创建三个）</span></span><br><span class="line"><span class="comment">#创建镜像仓库</span></span><br><span class="line"><span class="comment">#之后阿里云会有官方详细步骤</span></span><br><span class="line">docker login XXXXXXXXXXXXXXX</span><br><span class="line">docker tag XXXXXXXXXXXXX</span><br><span class="line">docker push jack/diytomcat:1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>docker所有流程</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121084949.png"></p><h2 id="Docker网络（容器编排，集群部署）"><a href="#Docker网络（容器编排，集群部署）" class="headerlink" title="Docker网络（容器编排，集群部署）"></a>Docker网络（容器编排，集群部署）</h2><p><strong>docker网络模式</strong>：有如下四种：</p><p> host模式(–net=host)      container模式         none模式(–net=none)          bridge模式(–net=bridge)</p><p><strong>host模式</strong>： 需要使用<strong>docker run</strong>是指定： <strong>–net=host</strong>   使用的网络实际上和宿主机是一样,在容器内的IP和宿主机的IP是一样,类似于<strong>vmare桥接模式</strong>；</p><p>container模式：使用 <strong>–net=container:container_id/container_name</strong>，多个容器使用共同的网络,看到的IP是一样的；</p><p>none模式： -<strong>-net=none</strong>  这种模式下,不会配置任何网络；</p><p><strong>bridge模式</strong>：**–net=bridge**，不指定是默认也是这种模式，这种模式会为每个容器分配一个独立的network 网卡，同一个宿主机是在同一个网段下可以通信的，类似于 <strong>VMware 的 NAT模式</strong>；</p><p><strong>桥接模式</strong>（类似于vm的nat模式）</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121122657.png" style="zoom: 67%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121122811.png" style="zoom:50%;" /><p><strong>host模式</strong>（类似于vm的桥接模式）</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121122812.png" style="zoom:50%;" /><p><strong>两个docker网络如何通信呢？</strong></p><ul><li>一台bai计算机是可以有多个IP地址的，如果我们给一台du服务器绑定两个以上zhiIP地址dao，其中一个IP地址在一个网段中(如192.168.1.0)，另一个IP地址在另一个网段中(如192.168.2.0)，如果给服务器提供路由功能，这两个IP地址充当网关，就可以把两个网段连接在一起了。</li></ul><p><strong>接下来是实战：Docker Compose，Docker Swarm，CI/CD Jenkins</strong></p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121112356.png" style="zoom:50%;" /><p><strong>DevOps（Development和Operations</strong>的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。</p><p>它是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p><p>它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运维工作必须紧密合作。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121111806.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121112357.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121112358.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux网络配置</title>
      <link href="/2020/11/20/linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/11/20/linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置eth0的IP地址， 同时激活该设备</span></span><br><span class="line">sudo ifconfig eth0 192.168.1.10 netmask 255.255.255.0 up</span><br><span class="line"><span class="comment">#添加默认网关 </span></span><br><span class="line">sudo route add default gw 192.168.1.1</span><br><span class="line"><span class="comment">#配置DNS</span></span><br><span class="line">sudo vi /etc/resolv.conf</span><br><span class="line"><span class="comment">#激活设备</span></span><br><span class="line">ifconfig eth0 up</span><br><span class="line"><span class="comment">#禁用设备</span></span><br><span class="line">ifconfig eth0 down</span><br></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看相应设备名称对应的设备信息</span></span><br><span class="line">ethtool eth0</span><br><span class="line"><span class="comment">#查看相应设备名称对应的设备位置(回车后与eth0 相对应的网卡接口旁边的指示灯就会闪烁，这样你就能很快确定eth0 网口的位置啦)</span></span><br><span class="line">ethtool -p eth0</span><br><span class="line"><span class="comment">#Linux里面有两套管理网络连接的方案,两套方案是冲突的，不能同时共存。</span></span><br><span class="line">/etc/network/interfaces（/etc/init.d/networking）</span><br><span class="line">Network-Manager</span><br></pre></td></tr></table></figure><p><strong>都是基于单网卡单ip的配置</strong></p><h3 id="静态配置"><a href="#静态配置" class="headerlink" title="静态配置"></a>静态配置</h3><h4 id="Redhat类"><a href="#Redhat类" class="headerlink" title="Redhat类"></a>Redhat类</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysconfig/network-scripts/ifcfg-eth[x]文件([x]为使用的网卡)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xxxxxxx(网卡名称，不用改)</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">TYPE=ether</span><br><span class="line">HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)</span><br><span class="line">IPADDR=x.x.x.x(ip地址)</span><br><span class="line">NETMASK=x.x.x.x(子网掩码)</span><br><span class="line">BROADCAST=x.x.x.x.(广播地址)</span><br><span class="line">NETWORK=x.x.x.x(网络地址)</span><br><span class="line">GATEWAY=x.x.x.x(网关地址)</span><br><span class="line">ONBOOT=yes(开机自启动)</span><br><span class="line">DNS1=x.x.x.x(域名服务器地址)</span><br><span class="line">DNS2=x.x.x.x </span><br></pre></td></tr></table></figure><h4 id="Ubuntu类"><a href="#Ubuntu类" class="headerlink" title="Ubuntu类"></a>Ubuntu类</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The primary network interface (配置主网络接口)</span></span><br><span class="line">　　auto eth0 <span class="comment">#开机自动激活eth0接口</span></span><br><span class="line">　　iface eth0 inet static <span class="comment">#配置eth0接口为静态地址</span></span><br><span class="line">　　address 192.168.1.10</span><br><span class="line">　　gateway 192.168.1.254</span><br><span class="line">　　Netmask 255.255.255.0</span><br><span class="line">　　network 192.168.1.0</span><br><span class="line">　　broadcast 192.168.1.255 </span><br></pre></td></tr></table></figure><h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h3><h4 id="Redhat类-1"><a href="#Redhat类-1" class="headerlink" title="Redhat类"></a>Redhat类</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xxxxxxx(网卡名称，不用改)</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">TYPE=ether</span><br><span class="line">HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)</span><br><span class="line">ONBOOT=yes(开机自启动) </span><br></pre></td></tr></table></figure><h4 id="Ubuntu类-1"><a href="#Ubuntu类-1" class="headerlink" title="Ubuntu类"></a>Ubuntu类</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The loopback network interface (配置环回口)</span></span><br><span class="line">　　auto lo <span class="comment"># 开机自动激lo接口</span></span><br><span class="line">　　iface lo inet loopback <span class="comment"># 配置lo接口为环回口</span></span><br><span class="line">　　<span class="comment"># The primary network interface #配置主网络接口</span></span><br><span class="line">　　auto eth0 <span class="comment">#开机自动激活eth0接口</span></span><br><span class="line">　　iface eth0 inet dhcp <span class="comment">#配置eth0接口为DHCP自动获取</span></span><br></pre></td></tr></table></figure><h2 id="VM的三种网络模式"><a href="#VM的三种网络模式" class="headerlink" title="VM的三种网络模式"></a>VM的三种网络模式</h2><ul><li><p>打开vmware虚拟机，我们可以在选项栏的“编辑”下的“虚拟网络编辑器”中看到VMnet0（桥接模式）、VMnet1（仅主机模式）、VMnet8（NAT模式），那么这些都是有什么作用呢？其实，我们现在看到的VMnet0表示的是用于桥接模式下的虚拟交换机；VMnet1表示的是用于仅主机模式下的虚拟交换机；VMnet8表示的是用于NAT模式下的虚拟交换机。</p></li><li><p>同时，在主机上对应的有VMware Network Adapter VMnet1和VMware Network Adapter VMnet8两块虚拟网卡，它们分别作用于仅主机模式与NAT模式下。在“网络连接”中我们可以看到这两块虚拟网卡，如果将这两块卸载了，可以在vmware的“编辑”下的“虚拟网络编辑器”中点击“还原默认设置”，可重新将虚拟网卡还原。</p></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121193135.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121193139.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201121193144.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux服务器搭建ssm项目环境</title>
      <link href="/2020/11/19/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAssm%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/11/19/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAssm%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>阿里云云翼计划：9.5块钱/月</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><h4 id="jdk环境"><a href="#jdk环境" class="headerlink" title="jdk环境"></a>jdk环境</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install java-1.8.0-openjdk.x86_64</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="mysql环境"><a href="#mysql环境" class="headerlink" title="mysql环境"></a>mysql环境</h4><ul><li>安装mysql</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm  </span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm </span><br><span class="line">yum install mysql mysql-server mysql-devel -y</span><br></pre></td></tr></table></figure><ul><li>启动mysql</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql.service</span><br><span class="line">mysqladmin -u root password root</span><br><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure><h4 id="tomcat环境"><a href="#tomcat环境" class="headerlink" title="tomcat环境"></a>tomcat环境</h4><ul><li><p>windwos环境中下载tomcat9的tar.gz后缀的压缩包</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/">https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/</a></p></li><li><p>用FileZilla上传到linux服务器<code>/usr/local</code>目录下</p></li><li><p>解压缩后启动tomcat</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">tar xzf apache-tomcat-9.0.17.tar.gz</span><br><span class="line"><span class="comment">#更名文件夹为tomcat9</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat9/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="打包上传war包"><a href="#打包上传war包" class="headerlink" title="打包上传war包"></a>打包上传war包</h3><ul><li><p>打包上传前需要在阿里云的服务器防火墙中打开8080端口权限</p><p>也可以把tomcat的默认款口号设置为80（在tomcat的conf目录下修改server.xml文件的默认端口号）（推荐）</p></li><li><p>在IDEA中用maven工具先clean后package，在target目录下生成war包，用filezilla上传到tomcat的webapps目录下。</p></li><li><p>重启tomcat</p></li></ul><p>然后就可以访问你自己的网站了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门指南</title>
      <link href="/2020/11/19/Docker%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/11/19/Docker%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h1><h2 id="下载docker依赖环境"><a href="#下载docker依赖环境" class="headerlink" title="下载docker依赖环境"></a>下载docker依赖环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">想安装Docker，需要先将依赖的环境全部下载下来，就像Maven依赖JDK一样</span><br><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h2 id="指定docker镜像源头"><a href="#指定docker镜像源头" class="headerlink" title="指定docker镜像源头"></a>指定docker镜像源头</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认下载Docker会去国外服务器下载，速度较慢，可以设置为阿里云镜像源，速度更快</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"><span class="comment">#配置阿里云镜像加速器</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://46dcjg1g.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装成功后，需要手动启动，设置为开机启动，并测试一下 Docker</span><br><span class="line"><span class="comment">#启动docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#设置开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h1 id="docker中央仓库"><a href="#docker中央仓库" class="headerlink" title="docker中央仓库"></a>docker中央仓库</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</span><br><span class="line">https://hub.docker.com/</span><br><span class="line">2.国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。</span><br><span class="line">https://c.163yun.com/hub<span class="comment">#/home </span></span><br><span class="line">http://hub.daocloud.io/ （推荐使用）</span><br><span class="line">3.在公司内部会采用私服的方式拉取镜像（添加配置）</span><br><span class="line"><span class="comment">#需要创建 /etc/docker/daemon.json，并添加如下内容</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://registry.docker-cn.com&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;ip:port&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#重启两个服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="docker镜像操作"><a href="#docker镜像操作" class="headerlink" title="docker镜像操作"></a>docker镜像操作</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从中央仓库拉取镜像到本地</span><br><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line"><span class="comment">#举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8</span></span><br></pre></td></tr></table></figure><h2 id="查看本地全部镜像"><a href="#查看本地全部镜像" class="headerlink" title="查看本地全部镜像"></a>查看本地全部镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取</span><br><span class="line">docker rmi 镜像的标识</span><br></pre></td></tr></table></figure><h2 id="镜像的拉入拉出"><a href="#镜像的拉入拉出" class="headerlink" title="镜像的拉入拉出"></a>镜像的拉入拉出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改</span><br><span class="line"><span class="comment">#将本地的镜像导出</span></span><br><span class="line">docker save -o 导出的路径 镜像id</span><br><span class="line"><span class="comment">#加载本地的镜像文件</span></span><br><span class="line">docker load -i 镜像文件</span><br><span class="line"><span class="comment">#修改镜像文件</span></span><br><span class="line">docker tag 镜像id 新镜像名称：版本</span><br></pre></td></tr></table></figure><h1 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h1><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">运行容器需要定制具体镜像，如果镜像不存在，会直接下载</span><br><span class="line"><span class="comment">#简单操作</span></span><br><span class="line">docker run 镜像的标识|镜像的名称[:tag]</span><br><span class="line"><span class="comment">#常用的参数</span></span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment">#-d:代表后台运行容器</span></span><br><span class="line"><span class="comment">#-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span></span><br><span class="line"><span class="comment">#--name 容器名称:指定容器的名称</span></span><br></pre></td></tr></table></figure><h2 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看全部正在运行的容器信息</span><br><span class="line">docker ps [-qa]</span><br><span class="line"><span class="comment">#-a 查看全部的容器，包括没有运行</span></span><br><span class="line"><span class="comment">#-q 只查看容器的标识</span></span><br></pre></td></tr></table></figure><h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看容器日志，以查看容器运行的信息</span><br><span class="line">docker logs -f 容器id</span><br><span class="line"><span class="comment">#-f：可以滚动查看日志的最后几行</span></span><br></pre></td></tr></table></figure><h2 id="进入-退出容器内部"><a href="#进入-退出容器内部" class="headerlink" title="进入/退出容器内部"></a>进入/退出容器内部</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -t 容器id /bin/bash</span><br><span class="line"><span class="comment">#启动镜像并进入容器</span></span><br><span class="line">docker run -it centos /bin/bash</span><br><span class="line"><span class="comment">#从容器停止并退出到宿主机</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">#容器不停止并退出</span></span><br><span class="line">Ctrl+P+Q</span><br></pre></td></tr></table></figure><h2 id="复制内容到容器"><a href="#复制内容到容器" class="headerlink" title="复制内容到容器"></a>复制内容到容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 宿主机路径 容器id:容器路径</span><br></pre></td></tr></table></figure><h2 id="重启-amp-启动-amp-停止-amp-删除容器"><a href="#重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="重启&amp;启动&amp;停止&amp;删除容器"></a>重启&amp;启动&amp;停止&amp;删除容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">容器的启动，停止，删除等操作，后续会经常使用到</span><br><span class="line"><span class="comment">#重新启动容器</span></span><br><span class="line">docker restart 容器id</span><br><span class="line"><span class="comment">#启动停止运行的容器</span></span><br><span class="line">docker start 容器id</span><br><span class="line"> </span><br><span class="line"><span class="comment">#停止指定的容器(删除容器前，需要先停止容器)</span></span><br><span class="line">docker stop 容器id</span><br><span class="line"><span class="comment">#停止全部容器</span></span><br><span class="line">docker stop $(docker ps -qa)</span><br><span class="line"><span class="comment">#删除指定容器</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="comment">#删除全部容器</span></span><br><span class="line">docker rm $(docker ps -qa)</span><br></pre></td></tr></table></figure><h1 id="docker应用"><a href="#docker应用" class="headerlink" title="docker应用"></a>docker应用</h1><h2 id="docker安装tomcat"><a href="#docker安装tomcat" class="headerlink" title="docker安装tomcat"></a>docker安装tomcat</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行Tomcat容器，为部署ssm工程做准备</span><br><span class="line"> </span><br><span class="line">docker run -d -p 8080:8080 --name tomcat  daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line"><span class="comment">#或者已经下载了tomcat镜像</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat 镜像的标识</span><br></pre></td></tr></table></figure><h2 id="运行MySQL容器"><a href="#运行MySQL容器" class="headerlink" title="运行MySQL容器"></a>运行MySQL容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4</span><br></pre></td></tr></table></figure><h2 id="部署ssm工程"><a href="#部署ssm工程" class="headerlink" title="部署ssm工程"></a>部署ssm工程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修改SSM工程环境，设置为Linux中Docker容器的信息</span><br><span class="line">通过Maven的package重新打成war包</span><br><span class="line">将Windows下的war包复制到Linux中</span><br><span class="line">通过docker命令将宿主机的war包复制到容器内部</span><br><span class="line"> </span><br><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br><span class="line"> </span><br><span class="line">测试访问SSM工程</span><br></pre></td></tr></table></figure><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment">#显示docker的版本信息</span></span><br><span class="line">docker info    <span class="comment">#显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span> <span class="comment">#帮助命令</span></span><br><span class="line">docker images <span class="comment">#查看所有镜像</span></span><br><span class="line">-a,--all <span class="comment">#列出所有镜像</span></span><br><span class="line">-q,--quiet <span class="comment">#只显示id</span></span><br><span class="line">docker search XXX <span class="comment">#搜索docker镜像</span></span><br><span class="line">--filter=STARS=3000 <span class="comment">#通过搜藏来过滤</span></span><br><span class="line">docker pull XXX[:版本号] <span class="comment">#下载镜像(分层下载：docker的核心)</span></span><br><span class="line">docker rmi -f 镜像id <span class="comment">#删除指定镜像</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker images -aq&#125;</span> <span class="comment">#删除全部镜像</span></span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动镜像新建容器并启动</span></span><br><span class="line">docker pull centos</span><br><span class="line">docker run centos <span class="comment">#启动镜像新建容器</span></span><br><span class="line">--name=<span class="string">&quot;XXX&quot;</span> <span class="comment">#用来区分容器</span></span><br><span class="line">-d <span class="comment">#后台运行</span></span><br><span class="line">-it <span class="comment">#使用交互容器运行</span></span><br><span class="line">-p <span class="comment">#指定容器的端口</span></span><br><span class="line">-p 主机端口:容器端口（常用）</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P <span class="comment">#随机指定端口</span></span><br><span class="line">docker run -it centos /bin/bash <span class="comment">#启动镜像并进入容器</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#从容器停止并退出到宿主机</span></span><br><span class="line">Ctrl+P+Q <span class="comment">#容器不停止并退出</span></span><br><span class="line">docker ps</span><br><span class="line">-a <span class="comment">#列出当前正在运行的容器+历史运行过的容器</span></span><br><span class="line">-n=? <span class="comment">#显示最近创建的容器</span></span><br><span class="line">-q <span class="comment">#只显示容器的编号</span></span><br><span class="line">docker rm 容器id</span><br><span class="line">docker rm -f 容器id（不需要退出直接删除）</span><br><span class="line">docker rm -f <span class="variable">$&#123;docker ps -aq&#125;</span> <span class="comment">#删除所有容器</span></span><br><span class="line"><span class="comment">#启动和停止容器</span></span><br><span class="line">docker start 容器id <span class="comment">#启动容器</span></span><br><span class="line">docker restart 容器id <span class="comment">#重启容器</span></span><br><span class="line">docker stop 容器id <span class="comment">#停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id <span class="comment">#强制停止当前容器</span></span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器要想后台运行必须要有相应的前台应用，因为docker容器仅在它的1号进程运行时会保持运行，如果1号进程推出了，容器也就退出了。</span></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line">docker logs -f -t --tail 10 容器id</span><br><span class="line"><span class="comment">#查看容器中进程信息</span></span><br><span class="line">docker top 容器id</span><br><span class="line"><span class="comment">#查看容器元数据信息</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="comment">#进入当前正在运行的后台容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash（进入容器后开启一个新的终端，可以在里面交互）</span><br><span class="line">docker attach 容器id（进入的是容器正在运行的命令行，不能交互）</span><br><span class="line"><span class="comment"># 从容器拷贝文件到宿主机</span></span><br><span class="line">docker cp 容器id:容器内路径 目的宿主机路径</span><br><span class="line"><span class="comment">#拷贝是一个手动拷贝的过程，通过数据卷可以自动同步（类似于共享文件夹）</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201120092636.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件生命周期</title>
      <link href="/2020/11/14/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2020/11/14/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ul><li>概念：确定系统必须具有的功能和性能，系统要求的运行环境，并且预测系统发展的前景。</li></ul><h2 id="需求的获取"><a href="#需求的获取" class="headerlink" title="需求的获取"></a>需求的获取</h2><ul><li>概念：软件需求的来源，软件工程师收集这些软件需求的方法</li><li>包含<ul><li><strong>功能性需求</strong>：用户和其他系统完成的功能，提供的服务</li><li><strong>非功能性需求</strong>：必须遵循的标准，外部界面的细节，实现的约束条件，质量属性等等。</li></ul></li><li>来源：用户目标，领域知识，投资者，运行环境，组织环境</li><li>获取方式：采访，设定情景，原型，会议，观察商业过程和工作流</li><li>需求获取面临的挑战：<ul><li>客户说不清需求</li><li>需求易变性：在系统设计时，将软件的核心建筑放在稳定的需求上。</li><li>问题的复杂度和对问题空间理解的不完备性与不一致性</li></ul></li><li>需求诱导十原则：<ul><li>倾听</li><li>有准备的沟通</li><li>需要有人推动</li><li>最好当面沟通</li><li>记录所有决定</li><li>保持同理协作</li><li>聚焦并协调话题</li><li>采用图形表示</li><li>继续前进原则</li><li>谈判双赢原则</li></ul></li></ul><h2 id="需求确认"><a href="#需求确认" class="headerlink" title="需求确认"></a>需求确认</h2><ul><li><p>需求获取</p></li><li><p>需求提炼：对应用问题及环境的理解和分析，为问题涉及的信息，功能和系统行为建立<strong>分析模型</strong>，将用户需求精确化，完全化，最终形成下一步的需求规格说明书</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114202338.png"></p></li><li><p>需求描述（需求规格说明书）：对待开发系统的行为的完整描述，包含了功能性需求和非功能性需求，完成的标志是形成一份完整规范的需求规格说明书。</p></li><li><p>需求验证：对需求文档进行检查：有效性检查，一致性检查，完备性检查，现实性检查</p></li></ul><h2 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114202345.png"></p><h2 id="需求分析的任务"><a href="#需求分析的任务" class="headerlink" title="需求分析的任务"></a>需求分析的任务</h2><h3 id="建立分析模型：面向过程，面向对象"><a href="#建立分析模型：面向过程，面向对象" class="headerlink" title="建立分析模型：面向过程，面向对象"></a>建立分析模型：面向过程，面向对象</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114204041.png"></p><ul><li><p><strong>面向过程分析模型</strong>：用系统工程的思想和工程化的方法，根据用户至上的原则，自始自终按照结构化，模块化，自顶向下地对系统进行分析与设计。</p><ul><li>采用结构化分析方法（面向数据流进行需求分析的方法），用抽象模型的概念，按照软件内部数据传递，变换的关系，自顶向下逐层分解，知道找到满足功能要求的左右可实现的软件为止。</li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114204951.png"></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114204955.png"></li><li><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114211238.png"></li></ul></li><li><p><strong>面向对象分析模型</strong>：由5个层次（主题层，对象类层，结构层，属性层，服务层）和5个活动（标识对象类，标识结构，定义主题，定义属性，定义服务）组成。</p><ul><li><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114212136.png"></p></li><li><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114212139.png"></p></li><li><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114211243.png"></p></li></ul></li></ul><h3 id="编写需求说明：用《需求规格说明书》规范的额形式准确地表达用户的需求"><a href="#编写需求说明：用《需求规格说明书》规范的额形式准确地表达用户的需求" class="headerlink" title="编写需求说明：用《需求规格说明书》规范的额形式准确地表达用户的需求"></a>编写需求说明：用《需求规格说明书》规范的额形式准确地表达用户的需求</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114203028.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114203031.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114203034.png"></p><p>IEEE标准对需求文档提出了以下结构：</p><ul><li>引言（需求文档目的，文档约定，预期读者和阅读建议，产品范围，参考文献）</li><li>综合描述（产品前景，产品功能与优先级，用户特征，运行环境，设计与实现上的限制，假设与依赖性）</li><li>需求描述（功能需求，数据需求，性能需求，外部接口，设计约束，软件质量属性，其他需求）</li><li>附录（词汇表，分析模型，特定问题列表）</li><li>索引</li></ul><h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><ul><li>概要设计：描述软件顶层架构和组织，划分不同组件</li><li>详细设计：详细描述各组件以便能够编码实现</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114214608.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114214611.png"></p><ul><li><p>设计相关概念：</p><ul><li>抽象</li><li>体系结构</li><li>设计模式</li><li>模块化</li><li>信息隐藏</li><li>功能独立</li><li>精化</li><li>重构</li></ul></li><li><p><strong>数据设计</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215052.png"></p></li><li><p><strong>架构设计</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215505.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215409.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215410.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215411.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215412.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215413.png"></p></li><li><p><strong>接口设计</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215730.png"></p></li><li><p><strong>组件设计</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114215733.png"></p></li></ul><h2 id="面向过程架构设计"><a href="#面向过程架构设计" class="headerlink" title="面向过程架构设计"></a>面向过程架构设计</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114221423.png"></p><p>变换型软件结构图</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114221224.png"></p><p>事务型软件结构图</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114221225.png"></p><p>混合型软件结构图</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114221226.png"></p><h2 id="面向过程组件设计"><a href="#面向过程组件设计" class="headerlink" title="面向过程组件设计"></a>面向过程组件设计</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114222146.png"></p><h2 id="面向对象架构设计"><a href="#面向对象架构设计" class="headerlink" title="面向对象架构设计"></a>面向对象架构设计</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114225316.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114225429.png"></p><h2 id="面向对象组件设计（类设计和用例设计）"><a href="#面向对象组件设计（类设计和用例设计）" class="headerlink" title="面向对象组件设计（类设计和用例设计）"></a>面向对象组件设计（类设计和用例设计）</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114230312.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114230651.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114231017.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114231101.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程模型</title>
      <link href="/2020/11/14/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/11/14/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><ul><li><h2 id="三要素："><a href="#三要素：" class="headerlink" title="三要素："></a>三要素：</h2><ul><li><p>方法：软件工程方法为软件开发提供了“如何做”的技术。软件工程方法分为两类：结构化方法和面向对象方法。</p></li><li><p>工具：软件工具为软件工程方法提供了自动的或半自动的软件支撑环境。集成的软件工程工具再加上人的因素构成了软件工程环境。</p></li><li><p>过程：软件工程的过程则是将软件工程的方法和工具综合起来以达到合理、及时地进行计算机软件开发的目的。过程定义了方法使用的顺序、要求交付的文档资料、为保证质量和协调变化所需要的管理、及软件开发各个阶段完成的里程碑。</p></li></ul></li><li><h2 id="七原则"><a href="#七原则" class="headerlink" title="七原则"></a>七原则</h2><ul><li><strong>用分阶段的生命周期计划严格管理</strong></li><li><strong>坚持进行阶段评审</strong></li><li><strong>实行严格的产品控制</strong> </li><li><strong>用现代程序设计技术</strong> </li><li><strong>结果应能清楚地审查</strong></li><li><strong>开发小组的人员应该少而精</strong></li><li><strong>承认不断改进软件工程实践的必要性</strong></li></ul></li><li><h2 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h2><ul><li><h3 id="开发与维护过程"><a href="#开发与维护过程" class="headerlink" title="开发与维护过程"></a>开发与维护过程</h3><ul><li>软件需求</li><li>软件设计</li><li>软件构造</li><li>软件测试</li><li>软件维护</li></ul></li><li><h3 id="支持组织过程"><a href="#支持组织过程" class="headerlink" title="支持组织过程"></a>支持组织过程</h3><ul><li>软件配置管理</li><li>软件工程管理</li><li>软件过程</li><li>软件工具（编码，测试等）</li><li>软件质量</li></ul></li></ul></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114151251.png"></p><h1 id="软件过程（生命周期）"><a href="#软件过程（生命周期）" class="headerlink" title="软件过程（生命周期）"></a>软件过程（生命周期）</h1><h2 id="软件生命周期："><a href="#软件生命周期：" class="headerlink" title="软件生命周期："></a>软件生命周期：</h2><ul><li>问题定义：项目计划报告</li><li>可行性研究：可行性研究报告</li><li>需求分析：需求规格说明书</li><li>概要设计：概要设计说明书</li><li>详细设计：详细设计说明书</li><li>编码：源程序</li><li>测试：软件测试报告</li><li>维护：软件维护说明</li></ul><h2 id="软件过程模型-软件生存周期模型"><a href="#软件过程模型-软件生存周期模型" class="headerlink" title="软件过程模型/软件生存周期模型"></a>软件过程模型/软件生存周期模型</h2><h3 id="传统软件过程模型"><a href="#传统软件过程模型" class="headerlink" title="传统软件过程模型"></a>传统软件过程模型</h3><h4 id="1-瀑布模型：适用于系统需求明确且稳定，技术成熟，工程管理较严格的场合，如军工，航天，医疗。"><a href="#1-瀑布模型：适用于系统需求明确且稳定，技术成熟，工程管理较严格的场合，如军工，航天，医疗。" class="headerlink" title="1. 瀑布模型：适用于系统需求明确且稳定，技术成熟，工程管理较严格的场合，如军工，航天，医疗。"></a>1. 瀑布模型：适用于系统需求明确且稳定，技术成熟，工程管理较严格的场合，如军工，航天，医疗。</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114152356.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114152903.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114152908.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114152943.png"></p><h4 id="2-V模型"><a href="#2-V模型" class="headerlink" title="2. V模型"></a>2. V模型</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114152915.png"></p><h4 id="3-原型模型（当客户不清楚系统的具体输入输出；或开发者不确定算法的效率，软件与操作系统是否兼容以及客户与计算机交互的方式时，使用原型模型）"><a href="#3-原型模型（当客户不清楚系统的具体输入输出；或开发者不确定算法的效率，软件与操作系统是否兼容以及客户与计算机交互的方式时，使用原型模型）" class="headerlink" title="3. 原型模型（当客户不清楚系统的具体输入输出；或开发者不确定算法的效率，软件与操作系统是否兼容以及客户与计算机交互的方式时，使用原型模型）"></a>3. 原型模型（当客户不清楚系统的具体输入输出；或开发者不确定算法的效率，软件与操作系统是否兼容以及客户与计算机交互的方式时，使用原型模型）</h4><p>原型：一个部分开发的产品，是客户和开发人员能够对加护开发的系统的相关方面进行检查。</p><p>原型化的目的：</p><ul><li>明确并完善需求</li><li>研究技术选择方案</li></ul><p>原型结果：</p><ul><li>抛弃原型</li><li>把原型发展为最终产品</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114153457.png"></p><h4 id="4-增量模型（适用于软件开发过程中可能发生变化，具有较大风险，或者希望尽早进入市场的项目）"><a href="#4-增量模型（适用于软件开发过程中可能发生变化，具有较大风险，或者希望尽早进入市场的项目）" class="headerlink" title="4. 增量模型（适用于软件开发过程中可能发生变化，具有较大风险，或者希望尽早进入市场的项目）"></a>4. 增量模型（适用于软件开发过程中可能发生变化，具有较大风险，或者希望尽早进入市场的项目）</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114154131.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114154135.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114154139.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114154143.png"></p><h4 id="5-螺旋模型-适用于需求不明确或需求可能发生变化的大型复杂软件系统"><a href="#5-螺旋模型-适用于需求不明确或需求可能发生变化的大型复杂软件系统" class="headerlink" title="5. 螺旋模型(适用于需求不明确或需求可能发生变化的大型复杂软件系统)"></a>5. 螺旋模型(适用于需求不明确或需求可能发生变化的大型复杂软件系统)</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114155035.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114155039.png"></p><h4 id="6-喷泉模型"><a href="#6-喷泉模型" class="headerlink" title="6. 喷泉模型"></a>6. 喷泉模型</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114155043.png"></p><h3 id="现代软件过程模型"><a href="#现代软件过程模型" class="headerlink" title="现代软件过程模型"></a>现代软件过程模型</h3><h4 id="1-基于构件的开发模型（使用于系统之间有共性的情况）"><a href="#1-基于构件的开发模型（使用于系统之间有共性的情况）" class="headerlink" title="1. 基于构件的开发模型（使用于系统之间有共性的情况）"></a>1. 基于构件的开发模型（使用于系统之间有共性的情况）</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114155829.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114155832.png"></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114155836.png"></p><h4 id="2-统一过程模型"><a href="#2-统一过程模型" class="headerlink" title="2. 统一过程模型"></a>2. 统一过程模型</h4><ul><li><p>由Rational公司推出的完整且完美的软件工程方法</p></li><li><p>基于面向对象方法学</p></li><li><p>使用统一建模语言UML</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114160438.png"></p></li><li><p>实践视角（6条最佳实践）</p><ul><li>迭代式开发</li><li>管理需求</li><li>基于构件体系结构</li><li>可视化建模</li><li>验证软件质量</li><li>控制软甲变更</li></ul></li><li><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114160706.png"></p></li></ul><h4 id="3-敏捷开发-适合需求模糊且经常改变的场合，适合商业竞争环境下的项目-，重点。"><a href="#3-敏捷开发-适合需求模糊且经常改变的场合，适合商业竞争环境下的项目-，重点。" class="headerlink" title="3. 敏捷开发(适合需求模糊且经常改变的场合，适合商业竞争环境下的项目)，重点。"></a>3. 敏捷开发(适合需求模糊且经常改变的场合，适合商业竞争环境下的项目)，重点。</h4><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114165948.png"></p><ul><li><p>为了解决瀑布流开发模式因为前阶段修改而导致的耦合问题</p></li><li><p>把一个大项目拆分为多个互相联系且能独立运行的小项目，分别完成，主体软件要随时能交互给用户</p></li><li><p>人员架构：</p><ul><li>PO(Product Owner)：项目经理，确定产品方向愿景，交付优先级、时间</li><li>SM(Scrum Master)：小组队长</li><li>Team(DEV开发人员&amp;QA测试人员)：</li></ul></li><li><p>会议：</p><ul><li>敏捷计划会：一个Sprint开一次（一个sprint就是一个迭代），每一个Sprint的任务明确，需求分析，故事点划分</li><li>每日立会：<ul><li>从昨天到现在，我完成了什么</li><li>从现在到明天，我计划完成什么</li><li>有什么阻碍我的发展，抛出困难和风险</li></ul></li><li>敏捷评审会：获取客户反馈</li><li>敏捷回顾会：每个Sprint末尾开一次，总结经验和教训<ul><li>迭代速率，迭代燃气燃尽图</li><li>迭代计划故事和实际完成故事</li><li>计划发布日期和实际发布日期</li><li>客户满意度，团队满意度，生产环境Bug数，生产Bug解决时间，用户故事</li></ul></li></ul></li><li><p>总的项目需要拆分，包括代码库页拆分，便于管理。立会时领取故事点完成，自行验证（静态检查，复杂度，测试用例，功能测试），git push后触发CI(持续集成)流程。有团队骨干代码评审（code review），如果都通过了就入库了。</p></li><li><p>主分支的代码随时可交付。</p></li><li><p>每个开发人员的开发互不影响。</p></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114170108.png"></p><h3 id="选择软件过程模型"><a href="#选择软件过程模型" class="headerlink" title="选择软件过程模型"></a>选择软件过程模型</h3><ul><li>软件过程模型是不断发展的</li><li>各种软件过程模型各有优缺点和使用场合</li><li>不同类型软件往往需要不同软件过程模型</li><li>选用时不必拘泥于某种模型</li><li>可组合多种模型</li><li>可根据实际创造新的模型</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20201114170932.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="/2020/10/19/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
      <url>/2020/10/19/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>​    Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。 简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p><p>​    Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。</p><p>​    MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。MyBatis是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）MyBatis 消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。</p><h2 id="SSM整合总体思路"><a href="#SSM整合总体思路" class="headerlink" title="SSM整合总体思路"></a>SSM整合总体思路</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//Spring配置文件</span><br><span class="line"><span class="section">## spring-dao.xml</span></span><br><span class="line"><span class="bullet">*</span> <span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span>引入propeties配置文件</span><br><span class="line"><span class="bullet">*</span> datasource数据库连接池对象注入</span><br><span class="line"><span class="bullet">*</span> sqlSessionFactory对象注入</span><br><span class="line"><span class="bullet">*</span> 扫描dao配置对象注入</span><br><span class="line"><span class="section">## spring-mvc.xml</span></span><br><span class="line"><span class="bullet">*</span> 扫描web相关包中注解<span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jack.controller&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="bullet">*</span> <span class="xml"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span>静态资源放行</span><br><span class="line"><span class="bullet">*</span> <span class="xml"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span>json返回体时，直接return对象</span><br><span class="line"><span class="bullet">*</span> 视图解析器对象注入</span><br><span class="line"><span class="section">## spring-service.xml</span></span><br><span class="line"><span class="bullet">*</span> 扫描service相关包中注解<span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jack.service&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="bullet">*</span> 事务管理器对象注入</span><br><span class="line"><span class="section">## applicationContext.xml</span></span><br><span class="line"><span class="bullet">*</span> import三个spring配置文件</span><br><span class="line"><span class="section">## jdbc.properties</span></span><br><span class="line"><span class="bullet">*</span> 数据库相关数据：driver，url，username，password</span><br><span class="line"><span class="section">## log4j.properties</span></span><br><span class="line"><span class="bullet">*</span> 百度抄</span><br><span class="line"><span class="section">## mybatis-config.xml</span></span><br><span class="line"><span class="bullet">*</span> configuration中标签（setttings,typeAliases,mappers）</span><br><span class="line"><span class="section">## web.xml</span></span><br><span class="line"><span class="bullet">*</span> DispatcherServlet前段控制器</span><br><span class="line"><span class="bullet">*</span> spring的监听器配置(括一个全局的applicationContext地址初始化参数)</span><br><span class="line"><span class="bullet">*</span> 中文字符乱码字符过滤的filter</span><br><span class="line"><span class="bullet">*</span> session的配置(期时间)session-config</span><br><span class="line"><span class="bullet">*</span> 默认首页设置welcome-file-list</span><br></pre></td></tr></table></figure><p>SSM整合需要导入的maven依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Personnel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    导入ssm框架的pom依赖jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Junit测试框架--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--log4j日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--邮件服务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定时任务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz-jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--json转化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    maven的静态资源导出问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>personnel<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 指定web.xml的路径  --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">webXml</span>&gt;</span>web\WEB-INF\web.xml<span class="tag">&lt;/<span class="name">webXml</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 指定jsp、js、css的路劲 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>web<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SSM框架整合流程"><a href="#SSM框架整合流程" class="headerlink" title="SSM框架整合流程"></a>SSM框架整合流程</h2><p>建立项目基本框架</p><ul><li>com.jack.pojo</li><li>com.jack.dao</li><li>com.jack.service</li><li>com.jack.controller</li><li>database.properties</li><li>mybatis-config.xml</li><li>applicationContext.xml</li><li>spring<ul><li>spring-dao.xml</li><li>spring-mvc.xml</li><li>spring-service.xml</li></ul></li></ul><h3 id="数据库配置文件：database-properties"><a href="#数据库配置文件：database-properties" class="headerlink" title="数据库配置文件：database.properties"></a>数据库配置文件：database.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/pdb?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;failOverReadOnly=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis的核心配置文件：mybatis-config-xml"><a href="#Mybatis的核心配置文件：mybatis-config-xml" class="headerlink" title="Mybatis的核心配置文件：mybatis-config.xml"></a>Mybatis的核心配置文件：mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置：懒加载，日志实现，缓存开启关闭--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        STDOUT_LOGGING是mybatis标准的日志，如果用第三方日志log4j需要导入包--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log4j&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        开启驼峰命名映射规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        开启全局缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        开启mapper.xml文件的resultMap自动映射:注意等级PARTIAL&amp;FULL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.jack.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mappers&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;package name=&quot;com.jack.dao&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/mappers&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mapper接口对应的Mapper-xml文件"><a href="#Mapper接口对应的Mapper-xml文件" class="headerlink" title="Mapper接口对应的Mapper.xml文件"></a>Mapper接口对应的Mapper.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring整合Mybatis的配置文件：spring-dao-xml"><a href="#Spring整合Mybatis的配置文件：spring-dao-xml" class="headerlink" title="Spring整合Mybatis的配置文件：spring-dao.xml"></a>Spring整合Mybatis的配置文件：spring-dao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:log4j.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:mail.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描dao配置对象注入:用于替代mybatis文件的扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.jack.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring整合service层：spring-service-xml"><a href="#Spring整合service层：spring-service-xml" class="headerlink" title="Spring整合service层：spring-service.xml"></a>Spring整合service层：spring-service.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jack.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    发送邮件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--邮件配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置邮件接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mailSender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.mail.javamail.JavaMailSenderImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mail.smtp.host&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mail.smtp.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mail.smtp.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mail.smtp.defaultEncoding&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaMailProperties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;mail.smtp.auth&quot;</span>&gt;</span>$&#123;mail.smtp.auth&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;mail.smtp.timeout&quot;</span>&gt;</span>$&#123;mail.smtp.timeout&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 平台事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的aop增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jack.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet：springmvc的核心配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--全局的初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter:乱码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>pages/admin-login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring整合controller层：spring-mvc-xml"><a href="#spring整合controller层：spring-mvc-xml" class="headerlink" title="spring整合controller层：spring-mvc.xml"></a>spring整合controller层：spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:resources location=&quot;/css/&quot; mapping=&quot;/css/**&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:resources location=&quot;/img/&quot; mapping=&quot;/img/**&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:resources location=&quot;/plugins/&quot; mapping=&quot;/plugins/**&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:resources location=&quot;/pages/&quot; mapping=&quot;/pages/**&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jack.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring整合文件，applicationContext-xml"><a href="#Spring整合文件，applicationContext-xml" class="headerlink" title="Spring整合文件，applicationContext.xml"></a>Spring整合文件，applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring/spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring/spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring/spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分模块Maven工程整合SSM框架"><a href="#分模块Maven工程整合SSM框架" class="headerlink" title="分模块Maven工程整合SSM框架"></a>分模块Maven工程整合SSM框架</h2><h3 id="Maven工程的继承"><a href="#Maven工程的继承" class="headerlink" title="Maven工程的继承"></a>Maven工程的继承</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210323103749245.png" alt="image-20210323103749245"></p><ul><li>继承的目的是为了消除 maven坐标重复</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210323104104663.png" alt="image-20210323104104663"></p><h3 id="Maven工程的聚合"><a href="#Maven工程的聚合" class="headerlink" title="Maven工程的聚合"></a>Maven工程的聚合</h3><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210323104816210.png" alt="image-20210323104816210"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈日清1894海战（二）</title>
      <link href="/2020/06/24/%E6%B5%85%E8%B0%88%E6%97%A5%E6%B8%851894%E6%B5%B7%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/06/24/%E6%B5%85%E8%B0%88%E6%97%A5%E6%B8%851894%E6%B5%B7%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>上篇文章简单谈了下洋务运动的时代背景，北洋水师就是在19世纪中叶后的这样一个科技，政治大变革时代下诞生的。这次主要谈谈甲午战争中的大东沟海战，从一场海战放开来看，日本和清国之后的命运似乎就能说得通了。</li><li>先看战前。朝鲜内战，清朝以宗主国的身份入朝作战（主要是淮军）。此时，走上帝国主义道路的日本按照福泽谕吉的大陆政策，第一步正是朝鲜。在甲午战争正式爆发前的这个阶段，随着日本源源不断的向半岛派兵，日本逐渐掌握优势。清廷上的一群键盘侠就开始炮轰李鸿章，以前受洋人欺负，现在连日本也打不过，你李鸿章还想讲和。李鸿章心里清楚，此时的清军里就那么几个地方军能打仗，朝鲜战事上非淮军不可，用淮军和日本现代化军队打，无论是出于自保还是现实，避战都是正确的，在外交上依靠英法俄在华利益制衡日本相比之下更合适。奈何光绪也是年轻气盛，权力好不容易回来了（1889年，慈溪试探性地交还权力给了光绪），有大做一番的雄心壮志，加上一部分人的鼓动，不顾李鸿章反对，向日本宣战。国家统治层没有一套现代化的完备的战略决策制度，朝堂仪事+皇帝拍板定案的形式局限性很大。清廷统治层这种只图嘴上痛快就将一个国家推向战争的做法是极不负责的。</li><li>再看战时，甲午战争分为陆战和海战，这里谈的是海战中的大东沟海战。主要从军费，军舰（航速，射速，炮弹，老化），战术，官兵，情报几个角度简单谈谈：</li><li>先说军费：北洋水师成立的初衷就是一支防御性质的舰队，他的作用是守住京畿海口，配合陆军作战，这就限制了其规模上限。1888年建立初的北洋水师是亚洲最强舰队这一点不假，但是之后几乎未新添一舰，反观日本，虽然前期比不上北洋水师，但是直到1894开战，几乎一直在接收新式军舰。海军是一个需要长期投入才能起到效果的军种，更何况是在海军装备更新换代的关键时期（可以说甲午海战也是之后战列舰发展方向的参考案例）。再说清廷内部的问题，李鸿章和户部尚书翁同龢的私仇，海军衙门高层的人事变动，我觉得也是导致北洋水师后期装备停止更新的重要原因。</li><li>再说军舰：北洋水师的核心就是两艘德国制造的7000t铁甲舰，其他的都是2000t左右中规中矩的炮舰。由于年久未修的主观因素和装备革新的时代客观因素，开战前的航速已经明显下滑并落后于时代；火炮在开战前已经和日本形成代差；北洋水师炮弹配置上多为穿甲弹，少有开花弹，与之相比是日本的下濑火药。这些致命问题的根本原因就是军费没有跟上，五年陆军，十年空军，百年海军，这话不是没有道理，更何况是处在“铁甲舰到前无畏舰”的关键过渡时期。</li><li>战术上，有很多人吐槽北洋水师开战时摆出的雁形阵，暂且不论丁汝昌这个陆军将领选为海军提督对不对，就舰队阵形这个问题上，雁形阵时没有问题的。和北洋水师不同，日本联合舰队采用一字长蛇阵。这种场面在之前的丽萨海战中就出现过，当时奥匈帝国凭借人字形的冲击战术重创意大利海军。北洋水师的舰艇设计就是根据纵向接敌设计的，只有纵向对敌才能发挥最大火力，设想是10艘舰艇两两相伴，凭借定镇两舰打头阵冲进敌阵，然后再各自搏杀，寻找机会冲撞。日本这边的舰艇有几艘快速巡洋舰，组成了第一分队，航速远高于北洋舰队，快速绕道北洋侧翼集火超勇扬威，整场战争日本联合舰队没有给北洋水师留近身的机会，一直保持在一定距离利用速射炮快速倾泻弹药。可见，装备很大程度上决定了战术，不同的历史时期下的装备和战术结合产生的结果可能恰恰相反。</li><li>官兵素质上，据最新的历史考证发现，整个大东沟海战中，北洋水师的命中率是要高于日本的，甚至不输同时期的欧美海军。北洋海军雇佣洋人教官，模式也采用西方标准，虽然后期撤换掉了郎威理，但北洋水师多年的严格训练是很有成果的。从海战中的实际表现上来看，北洋海军的绝大部分官兵的表现确实都是值得肯定的。</li><li>间谍战是最容易被忽视的战争形式，据史料解密，甲午战前活跃在中国的日本间谍数量惊人，其伪装程度很高，通过各种手段获取了大量军事情报。</li><li>大东沟海战之后，虽然北洋舰队损失很大，但是家底还是有的，尚有一战之力，奈何陆军增援始终不到，等于是放弃了威海卫，最终难逃覆灭。</li><li>不管如何，1894年，大清还能倚靠李中堂的北洋水师在海上和日本真刀真枪地干一场，可谁又能想到，短短6年后，八国联军从中国的内海长驱直入直达紫禁城，讽刺的是，攻占京城时不少大清子民争着给洋人带路，诚然，“普天之下，莫非王土，和我有什么关系”，中国几千年的朝代更迭，底层百姓仍然只是过客。或许，大清只是败给了时代。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 历史 </tag>
            
            <tag> 战争 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈日清1894海战（一）</title>
      <link href="/2020/06/22/%E6%B5%85%E8%B0%88%E6%97%A5%E6%B8%851894%E6%B5%B7%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/06/22/%E6%B5%85%E8%B0%88%E6%97%A5%E6%B8%851894%E6%B5%B7%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>“威海卫陷落，北洋舰队全军覆没标志着洋务运动的失败”，这是历史课本记述的那场战争，语文课本和影视作品中关于邓世昌率致远全舰撞击吉野的描述同样深入国人心。提起甲午，大家会想到很多关键词，然而，120多年前，围绕这场战争，当时的日本和大清的都是一个怎样的状态。1888年北洋海军建立，其实力一举被列强排位前10，是什么原因导致短短6年后被清人口中的矮子日本胖揍，再六年，八国从中国内海长驱直入，直取京畿。</li><li>1864年，持续十多年的太平天国运动结束。太平军本来是有能力推翻清王朝的，为什么没有？我觉得一方面是太平天国内部再起义运动后期统治层之间的分裂和战略分兵错误。另一方面，慈溪放开部分军权，让地方练兵，曾国藩的湘军就是镇压太平天国的主力，李鸿章的淮军同样源于此。太平天国结束后，加上之前两次鸦片战争的失败，慈溪支持的洋务派压倒了守旧派，其实慈溪这时很很清楚，如果不做出点改变朝廷只有死路一条，这也是她一开始支持维新变法的原因，但是这里的矛盾就是你改革可以，但是不能威胁慈溪的绝对统治，不然慈溪绝对搞死你。</li><li>洋务运动从19世纪60年代开始，持续了大约30年。我们可以看看这个时间段，世界上其他国家在干嘛？1861—1865年，美国通过南北战争实现实质统一。1871年，俾斯麦带领德国走向统一并在普法战争中击败法国。法国虽然在普法战争中战败，但是由于国库殷实，之后迅速复兴。英国在第一次工业革命后成为世界第一强国，正在全世界扩张。日本从1868年开始明治维新。沙俄1856年在克里米亚战争中失败开始搞农奴制改革。可见洋务运动这30年清国周边相对太平，也给了这个机会。但是，要知道，从60年代后期开始，第二次工业革命开始，与第一次几乎英国独享不同，这次是英德美法遍地开花。在其他列前纷纷崛起的19世纪，倡导“中体西用”的洋务运动注定不会一帆风顺。</li><li>洋务运动是一场大工程，在慈溪的授权下，中央是以奕昕为代表的满族官员。地方是以林则徐，魏源，左宗棠，曾国藩，李鸿章，沈葆桢，张之洞等等为代表的地方汉族官员。其涉及面较广，我要谈的围绕大清国海防建设，注意，是海防，不是海权。当时的清国，能有诸如李鸿章这样的洋务派的思想就已经很不错了，他们要的是建立海军守住海疆继续封建，没有一个海权的认识。</li><li>“师夷长技以制夷”，洋务派随即开始筹备海军建设。最开始的想法就是买，但被英国人李泰国摆了一道。之后沈葆桢逐渐意识到得自己建船厂，海军基地，同时培养自己的海军将领。于是在法国人的帮助下建立了马尾船厂，海军基地和船政学堂，聘请英法教师教学。在这里培养了中国第一批近代海军人才，也可能第一批睁眼看世界的中国人。</li><li>这些人当中很多留学英法，是那个时代西方世界中唯一的中国面孔。他们有的成了外交官，有的做了船政讲师、船舶设计师，但大部分都是之后北洋舰队的主要将领。当时的他们并不知道，身处时代浪潮下，自己将会何去何从。</li><li>1869年，自主建造的蒸汽化炮舰万年清号下水，1888年，自造铁甲舰平远号下水编入北洋水师。短期来看，洋务运动在海军上的建设很有效果，和同时也在建设海军的日本比起来至少在效果上甚至要更好。但是，清帝国的体系承自千年，已经是集权制的顶峰，正因如此，在人类历史最大变革的19世纪，肯定没有幕府统治下的日本好掉头，更何况倒幕运动已经把明治天皇请回来进行几乎全盘的西化。所以，长期来看，日本对中国的优势从这时就开始了，日本的野心也开始显现。</li><li>1874年，日本以琉球事件为借口发动了对台湾的军事行动，这次事件以大清承认日本对琉球的主权和赔款而告终。这次事件刺激了清廷，随机决定创办北洋水师和南洋水师。1884年，中法战争爆发，法国人偷袭了马尾，南洋水师全军覆没。1894年，日本趁着朝鲜内乱，跨海发兵。在牙山和丰岛两次海陆失利后，9月17日，护送运兵船支援平壤战役的北洋海军编队和在海上寻找决战的日本联合舰队在大东沟外海相遇，黄海海战爆发。海战历时5小时，北洋方面被击沉5艘，退回威海卫，失去制海权。关于这场海战的评价有很多，有说编队雁形阵错误的，有说北洋官兵军纪差的，有说慈溪挪用海军军费的，有说劣质炮弹的，诸如此类。海战战术层面上，国家制度落后就必败这类话没有任何意义，要尽可能准确地了解这场战争失败的直接原因，还得实事求是，从实际出发多方面分析。（接下文）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 历史 </tag>
            
            <tag> 战争 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心:servlet细节</title>
      <link href="/2020/03/25/javaWeb%E6%A0%B8%E5%BF%83-servlet%E7%BB%86%E8%8A%82/"/>
      <url>/2020/03/25/javaWeb%E6%A0%B8%E5%BF%83-servlet%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h2><ul><li>概念：<strong>Hyper Text Transfer Protocol</strong></li><li>特点：<ol><li>基于TCP/IP的应用层协议</li><li>默认端口是80</li><li>基于请求响应模型，一次请求一次响应</li><li>无状态的；每次请求之间相互独立，不能交互数据</li></ol></li><li>历史版本：<ol><li>1.0版本：每次请求都会建立新的连接</li><li>1.1版本：每次连接建立后会等一会儿，如果有新的请求会复用</li></ol></li></ul><h3 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h3><ol><li><p><strong>请求行</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求方式 请求url 请求协议/版本</span><br><span class="line">GET /login.html HTTP/1.1</span><br></pre></td></tr></table></figure><p>HTTP协议有7中请求方式，常用的就是GET和POST</p><ul><li>GET：请求参数在请求行中；请求url长度有限制；相对不安全</li><li>POST：请求参数在请求体中；请求url长度没有限制；相对安全</li></ul></li><li><p><strong>请求头</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求头名称: 请求头值</span><br></pre></td></tr></table></figure><p>常见请求头：</p><ul><li><strong>User-Agent：</strong>浏览器告诉服务器浏览器的版本信息</li><li><strong>Accept：</strong>浏览器告诉服务器可以给我响应什么格式的信息</li><li><strong>Referer：</strong>浏览器告诉服务器我从哪里来（防盗链 &amp; 统计）</li><li><strong>Connection：</strong>这个请求连接此时的状态（1.0和1.1有区别）</li></ul></li><li><p><strong>请求空行</strong></p><p>用来分隔请求头和请求体</p></li><li><p><strong>请求体</strong></p><p>只有POST请求方式有请求体，</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求参数=请求参数值</span><br><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure></li></ol><h3 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h3><ol><li><p>响应行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">协议/版本 响应状态码 状态码描述</span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p><strong>响应状态码：服务器告诉客户端本次请求和响应的一个状态</strong></p><ol><li>1xx：服务端正在接收客户端信息，没有接收完全，等待一段时间后，发送1xx状态码</li><li>2xx：成功</li><li>3xx：302重定向，304访问本地缓存</li><li>4xx：404客户端错误（请求路径没有对应的资源）；405请求方式没有对应的doXXX方法</li><li>5xx：500服务器端错误（服务器内部出现异常，控制台和网页一般都会报错）</li></ol></li><li><p>响应头</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">响应头名: 响应头值</span><br></pre></td></tr></table></figure><p>常见的响应头：</p><ol><li>Content-type：服务器告诉浏览器本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据<ul><li>默认：in-line</li><li>attachment;filename=xxx：以附件形式打开响应体（文件下载）</li></ul></li></ol></li><li><p>响应空行</p><p>用来分隔响应头和响应体</p></li><li><p>响应体</p><p>网页文件 &amp; 其他打回浏览器的数据（图片，视频等）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello,world!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>HTTPS和HTTP的区别主要如下：</strong></p><ol><li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><ul><li>request &amp; response 原理图</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210314192721654.png" alt="image-20210314192721654"></p><ul><li><p>request对象继承体系结构</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletRequest  --接口</span><br><span class="line"><span class="code">      |</span></span><br><span class="line"><span class="code">HttpServletRequest  --接口</span></span><br><span class="line"><span class="code">      |</span></span><br><span class="line"><span class="code">org.apache.catalina.connector.RequestFacade 类（tomcat）</span></span><br></pre></td></tr></table></figure></li><li><p>request功能</p><ol><li><p>获取请求行数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求方式 请求url 请求协议/版本</span><br><span class="line">GET /bbs/login.html?username=jack HTTP/1.1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getMethod</span><span class="params">()</span></span>;<span class="comment">//请求方式GET</span></span><br><span class="line"><span class="function">String <span class="title">getContextPath</span><span class="params">()</span></span>;<span class="comment">//虚拟目录/bbs</span></span><br><span class="line"><span class="function">String <span class="title">getServletPath</span><span class="params">()</span></span>;<span class="comment">//srevlet资源路径 /login.html</span></span><br><span class="line"><span class="function">String <span class="title">getQueryString</span><span class="params">()</span></span>;<span class="comment">//获得请求参数 username=jack</span></span><br><span class="line"><span class="function">String <span class="title">getRequestURI</span><span class="params">()</span></span>;<span class="comment">//获取请求uri /bbs/login.html</span></span><br><span class="line"><span class="function">String <span class="title">getRequestURL</span><span class="params">()</span></span>;<span class="comment">//获取请求url http://localhost:8080/bbs/login.html</span></span><br><span class="line"><span class="function">String <span class="title">getProtocol</span><span class="params">()</span></span>;<span class="comment">//获取协议，版本 HTTP/1.1</span></span><br><span class="line"><span class="function">String <span class="title">getRemoteAddr</span><span class="params">()</span></span>;<span class="comment">//获取客户端ip地址</span></span><br></pre></td></tr></table></figure></li><li><p>获取请求头数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getHeader</span><span class="params">(String name)</span></span>;<span class="comment">//根据请求头名称获得请求头值</span></span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getHeaderName</span><span class="params">()</span></span>;<span class="comment">//获取所有请求头名称</span></span><br></pre></td></tr></table></figure></li><li><p>获取请求体数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BufferedReader <span class="title">getReader</span><span class="params">()</span></span>;<span class="comment">//获取字符输入流，只能操作字符数据</span></span><br><span class="line"><span class="function">ServletInputStream <span class="title">getInputStream</span><span class="params">()</span></span>;<span class="comment">//获取字节输入流，可以操作所有类型数据</span></span><br></pre></td></tr></table></figure></li><li><p>其他功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">//获取请求参数通用方式（get和post通用）</span></span><br><span class="line">     <span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span></span>;<span class="comment">//根据参数名获得参数值</span></span><br><span class="line">     String[] getParameterValues(String name);<span class="comment">//根据参数名称获得参数值的数组</span></span><br><span class="line">     <span class="function">String <span class="title">getParameterNames</span><span class="params">()</span></span>;<span class="comment">//获取所有请求的参数名称</span></span><br><span class="line">     Map&lt;String,String[]&gt; getParameterMap();<span class="comment">//获取所有参数的map集合，使用BeanUtils工具类的populate方法能把map直接转化为javabean对象</span></span><br><span class="line">     <span class="comment">//BeanUtils工具类操作的是属性，不是成员变量</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">//请求转发：服务器内部的资源跳转方式</span></span><br><span class="line">     <span class="function">RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String path)</span></span>;<span class="comment">//获得请求转发器对象</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(ServletRequest request, ServletResponse response)</span></span>;<span class="comment">//请求转发,dispatcher类的方法</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">//共享数据：request域代表一次请求的范围，一般用于请求转发的多个资源共享数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span></span>;</span><br><span class="line">     <span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//获取servletContext</span></span><br><span class="line">     <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;<span class="comment">//返回servletContext对象</span></span><br></pre></td></tr></table></figure><p><strong>请求转发的特点：</strong></p><ol><li>浏览器地址栏不发生变化</li><li>转发是在web服务器内部进行的，不能跨域访问</li><li>转发只有一次请求</li></ol></li></ol></li></ul><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置响应行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> sc)</span></span>;</span><br><span class="line"><span class="comment">//设置响应头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String name,String value)</span></span>;</span><br><span class="line"><span class="comment">//设置响应体</span></span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span></span>;<span class="comment">//字符输出流</span></span><br><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span></span>;<span class="comment">//字节输出流</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向1</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;/jack/responseDemo2&quot;</span>);</span><br><span class="line"><span class="comment">//重定向简单方式</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;jack/responseDemo2&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><strong>重定向的特点：</strong></p><ol><li>浏览器地址栏会发生变化</li><li>重定向可以访问其他站点的资源</li><li>重定向有两次请求</li></ol></li><li><p>什么时候用重定向,什么时候用请求转发？</p><ol><li>需要使用了request域的时候,必须<em>用请求转发</em>。</li><li>访问站外资源的<em>时候用重定向</em>。</li><li>其他随意</li></ol></li><li><p>相对路径和绝对路径区别？</p><ol><li>相对路径：不以/开头，以<code>./..</code>开头</li><li>绝对路径：以<code>http://localhost/虚拟路径/资源路径</code>或者简写为<code>/虚拟路径/资源路径</code>的形式</li></ol><ul><li>路径从客户端浏览器发出请求，需要加虚拟目录</li><li>从服务器发出，不需要加虚拟目录</li><li>动态获得虚拟目录：<code>request.getContextPath();</code></li></ul></li></ul><h2 id="web整个过程的中文编码问题解析"><a href="#web整个过程的中文编码问题解析" class="headerlink" title="web整个过程的中文编码问题解析"></a>web整个过程的中文编码问题解析</h2><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210315143354798.png" alt="image-20210315143354798"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post请求参数通过getParameter方式乱码，设置request的编码</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//写会数据到浏览器的汉字编码问题解决</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//简单形式设置ContentType</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><ul><li><strong>代表整个web应用</strong>，可以和程序的容器（tomcat）来通信</li><li>功能：<ol><li>获得MIME类型：</li><li>域对象：共享数据</li><li>获取文件的真实路径</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过request对象获取</span></span><br><span class="line">request.getServletContext();</span><br><span class="line"><span class="comment">//通过HttpServlet实现类中方法获取</span></span><br><span class="line"><span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得MIME类型：互联网通信中一种定义的文件数据类型（text/html,text/css,text/jpeg...）,所有文件后缀和mime的对应关系都存在tomcat服务器的web.xml中</span></span><br><span class="line"><span class="function">String <span class="title">getMimeType</span><span class="params">(String file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//域对象：共享所有用户所有请求的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件的真实路径</span></span><br><span class="line"><span class="function">String <span class="title">getRealPath</span><span class="params">(String path)</span></span>;</span><br><span class="line">context.getRealPath(<span class="string">&quot;/a.html&quot;</span>);<span class="comment">//web目录下</span></span><br><span class="line">context.getRealPath(<span class="string">&quot;/WEB-INF/b.html&quot;</span>);<span class="comment">//WEB-INF目录下</span></span><br><span class="line">context.getRealPath(<span class="string">&quot;/WEB-INF/classes/c.java&quot;</span>);<span class="comment">//src目录下</span></span><br></pre></td></tr></table></figure><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ul><li><strong>会话：</strong>浏览器第一次给服务器发送请求会话建立，直到一方断开连接会话结束。</li><li>一次会话包含到了多次请求&amp;响应</li><li><strong>功能：</strong>在一次会话范围内共享数据，弥补http协议无状态特点的不足。</li></ul><h3 id="Cookie：客户端会话技术"><a href="#Cookie：客户端会话技术" class="headerlink" title="Cookie：客户端会话技术"></a>Cookie：客户端会话技术</h3><ul><li><strong>作用：</strong>将数据保存在客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建cookie对象，绑定数据</span></span><br><span class="line"><span class="keyword">new</span> Cookie(String name,String value);</span><br><span class="line"><span class="comment">//发送cookie对象</span></span><br><span class="line">response.addCookie(Cookie cookie);</span><br><span class="line"><span class="comment">//获取cookie，拿到数据</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure><ul><li><strong>Cookie原理：</strong></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210315205705956.png" alt="image-20210315205705956"></p><ul><li><p><strong>Cookie的细节</strong></p><ol><li><p><strong>一次能否发送多个cookie？</strong></p><p>能，创建多个Cookie对象，然后调用response.addCookie函数即可</p></li><li><p><strong>cookie在浏览器中保存多长时间？</strong></p><ul><li>默认情况下，浏览器关闭就没了</li><li>持久化存储：setMaxAge(int seconds)：正数代表存储秒数且<strong>放进了硬盘</strong>，负数默认，零删除cookie</li></ul></li><li><p><strong>cookie能否存中文？</strong></p><p>tomcat8之后开始支持中文存储，tomcat8之前需要URL编码解码（URLEncoder.encode(String s,”utf-8”) &amp; URLDecoder.decode(String s,”utf-8”)）</p></li><li><p><strong>cookie获取范围多大？</strong></p><p>同一个服务器的多个web项目能否共享cookie？</p><ul><li>默认情况下cookie不能共享</li><li>通过setPath(String path)设置cookie获取范围，如果需要共享，可以设置为setPath(“/“)</li></ul><p>不同tomcat服务器间怎么共享cookie？</p><ul><li>setDomain(String path)：如果设置一级域名相同，那么多个服务器间就可以共享了，例如setDomain(“.baidu.com”)则tieba.baidu.com和news.baidu.com间就可以共享cookie了</li></ul></li><li><p><strong>Cookie特点和作用？</strong></p><p>特点：</p><ol><li>cookie存在客户端浏览器</li><li>浏览器对单个cookie的大小有限制 以及 对统一域名下的总cookie的数量也有限制</li></ol><p>作用：</p><ol><li>一般用于少量不太敏感的数据</li><li>在不登录的情况下，完成服务端对客户端身份的识别</li></ol></li></ol></li></ul><h3 id="Session：服务器端会话技术"><a href="#Session：服务器端会话技术" class="headerlink" title="Session：服务器端会话技术"></a>Session：服务器端会话技术</h3><ul><li><strong>作用：</strong>将数据保存在服务器端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得session</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"><span class="comment">//操作共享数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>原理：（Session的实现依赖于Cookie）</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210316082529471.png" alt="image-20210316082529471"></p><ul><li><p>细节：</p><ol><li><p>客户端关闭重启后，再次获取session是否是同一个？</p><ul><li><p>默认不是</p></li><li><p>```java<br>//手动设置session cookie可以延长session cookie存活时间，持久化<br>Cookie c = new Cookie(“JSESSIONID”,session.getId());<br>c.setMaxAge(60*60);<br>reponse.addCookie(c);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  2. 服务器关闭重启后，再次获取session是否是同一个？</span><br><span class="line"></span><br><span class="line">     * 肯定不一样，session都是重新创建的</span><br><span class="line">     * 但是需要确保session不丢失</span><br><span class="line">       1. session钝化：在服务器正常关闭后，将session对象序列化到硬盘上</span><br><span class="line">       2. session活化：在服务器重启后，将session从硬盘转化为内存中您的session对象</span><br><span class="line">       3. session钝化和sessoin活化：tomcat会自动帮我们做好，但是idea为每个项目创建的catalina_base地址不会活化。</span><br><span class="line"></span><br><span class="line">  3. session什么时候被销毁：</span><br><span class="line"></span><br><span class="line">     1. 服务器关闭</span><br><span class="line">     2. session对象调用invalidate()</span><br><span class="line">     3. session默认失效时间30min，可以再tomcat的web.xml和项目的web.xml的`&lt;session-config&gt;&lt;session-timeout&gt;&lt;/session-timeout&gt;&lt;/session-config&gt;`中修改默认失效时间</span><br><span class="line"></span><br><span class="line">* 特点：</span><br><span class="line"></span><br><span class="line">  1. session用于存储一次会话的多次请求的数据，存在服务器端</span><br><span class="line">  2. session可以存储任意类型，任意大小的数据</span><br><span class="line"></span><br><span class="line">* 和cookie区别：</span><br><span class="line"></span><br><span class="line">  1. session存在服务器端，cookie存在客户端</span><br><span class="line">  2. session没有数据大小限制，cookie有</span><br><span class="line">  3. session数据相对安全，cookie相对不安全</span><br><span class="line"></span><br><span class="line">## JSP</span><br><span class="line"></span><br><span class="line">* Java Server Pages：java服务器端页面。</span><br><span class="line">* jsp本质就是一个servlet，可以查看IDEA每次运行都会生成的work目录，里面会有代码每次运行是生成的文件，就有jsp文件对应的java和class文件</span><br><span class="line"></span><br><span class="line">![image-20210316075647096](https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210316075647096.png)</span><br><span class="line"></span><br><span class="line">### 脚本</span><br><span class="line"></span><br><span class="line">* `&lt;% 代码%&gt;`：定义的java代码在service方法中，service方法中定义什么，该脚本就定义什么</span><br><span class="line">* `&lt;%! 代码%&gt;`：定义的java代码在jsp转化为serlvet后的成员变量位置</span><br><span class="line">* `&lt;%= 代码%&gt;`：定义的java代码，会输出到页面上，输出语句定义什么，该脚本就定义什么。其实在serlvet中就是out.print()</span><br><span class="line"></span><br><span class="line">### 指令</span><br><span class="line"></span><br><span class="line">* 用于配置jsp页面 &amp; 导入资源文件</span><br><span class="line">* 格式：`&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2%&gt;`</span><br><span class="line"></span><br><span class="line">```jsp</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot;%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;%@ include file=&quot;test.jsp&quot;%&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>分类：</p><ol><li>page：配置jsp页面<ul><li>contentType：设置响应体的mime类型以及字符集</li><li>pageEncoding：当前jsp文件编码</li><li>language：目前只有java</li><li>improt：导入java的jar包</li><li>buffer：out对象输出到页面的缓冲区</li><li>errorPage：页面出错后自动跳转的页面</li><li>isErrorPage：标识当前页面是否是错误界面（当前jsp页面能使用exception对象）</li></ul></li><li>include：页面包含，导入页面的资源文件</li><li>taglib：导入标签库</li></ol></li><li><p><strong>JSP中include指令和include动作区别</strong></p><ul><li><code>＜%@ include file=” .jsp”%＞</code>引入静态文本(html,jsp),在JSP页面被转化成servlet之前和它融和到一起</li><li><code>＜jsp:include page=” .jsp” flush=”true” /＞</code>只是在运行时引入了要添加的jsp页面执行后所产生的应答</li></ul></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li><strong>html注释：</strong><code>&lt;!--html标签--&gt;</code>（浏览器看得到）</li><li><strong>jsp注释：</strong><code>&lt;%--Java代码/html标签--%&gt;</code>（浏览器看不到）</li><li>在jsp页面中建议都使用jsp注释</li></ol><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><ul><li><p>Expression Language：表达式语言</p></li><li><p>作用：替换jsp页面中java代码的编写</p></li><li><p>语法：<code>$&#123;表达式&#125;</code></p></li><li><p>注意：</p><ol><li><p>JSP中默认支持el表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用：</p><ol><li>运算：算数/比较/逻辑运算，empty运算符(判断字符串、集合、数组对象是否为null 或者 长度是否为0)</li><li>获取值：只能从域对象中获取值<code>$&#123;域名称.键名&#125;</code>：<ul><li>pageScope——&gt;pageContext</li><li>requestScope——&gt;request</li><li>sessionScope——&gt;session</li><li>applicationScope——&gt;application</li><li>如果只写键名，表示依次从最小的域中查找是否有该建对应的值，直到找到为止</li><li>如果域对象是对象，那么通过<code>$&#123;域名称.键名.属性名&#125;</code>(Getter &amp; Setter)获取</li><li>如果域对象是List集合，那么通过<code>$&#123;域名称.键名[n]&#125;</code>获取</li><li>如果域对象是Map集合，那么通过<code>$&#123;域名称.键名.key名称&#125;</code>或者<code>$&#123;域名称.键名[&quot;key名称&quot;]&#125;</code>获取</li><li><code>$&#123;empty list&#125;</code>,<code>$&#123;not empty list&#125;</code></li></ul></li></ol></li><li><p>EL表达式中有11个隐式对象</p><ul><li><strong>很重要：<code>$&#123;pageContext.request.contextPath&#125;</code>：动态获取虚拟目录</strong></li></ul></li></ul><h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><ul><li>JavaServer Pages Tag Library：JSP标准标签库</li><li>作用：简化和替换jsp页面上的java代码</li><li>使用步骤：<ol><li>导入jstl相关jar包</li><li>引入taglib</li><li>使用<code>&lt;c:XX&gt;内容&lt;/c:XX&gt;</code></li></ol></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;表达式&quot;</span>&gt;</span><br><span class="line">标签体内容</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</li><li>一般情况下，test属性值会结合el表达式一起使用，test后的表达式一般用的是el表达式接收域对象动态数据做判断</li></ul><h4 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==1&#125;&quot;</span>&gt;星期一&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==2&#125;&quot;</span>&gt;星期二&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==3&#125;&quot;</span>&gt;星期三&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==4&#125;&quot;</span>&gt;星期四&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==5&#125;&quot;</span>&gt;星期五&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==6&#125;&quot;</span>&gt;星期六&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;number==7&#125;&quot;</span>&gt;星期日&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;数字数据有误&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><ul><li>使用choose标签声明                     相当于switch声明</li><li>使用when标签做判断                     相当于case</li><li>使用otherwise标签做其他情况的声明        相当于default</li></ul><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;departmentPageBean.list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;keyword&quot;</span> varStatus=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">for</span>循环体</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><ul><li>begin：开始值</li><li>end：结束值</li><li>var：临时变量</li><li>step：步长</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> step=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">    $&#123;i&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>items：容器对象</li><li>var：容器中元素的临时变量</li><li>varStatus：循环状态对象，属性index和count<ul><li>index：从0开始（遍历容器的索引）</li><li>count：遍历次数</li></ul></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;departmentPageBean.list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;keyword&quot;</span> varStatus=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">    &lt;td&gt;$&#123;keyword.id&#125;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;$&#123;keyword.name&#125;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;$&#123;keyword.phone&#125;&lt;/td&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP中9大内置对象"><a href="#JSP中9大内置对象" class="headerlink" title="JSP中9大内置对象"></a>JSP中9大内置对象</h3><ul><li>jsp页面中不需要获取和创建，可以直接使用的对象</li></ul><table><thead><tr><th>内置对象</th><th>说明</th></tr></thead><tbody><tr><td>request(域)</td><td>对应HttpServletRequest/ServletRequest对象</td></tr><tr><td>response</td><td>对应HttpServletRespons/ServletResponse对</td></tr><tr><td>session(域)</td><td>对应HttpSession对象</td></tr><tr><td>application(域)</td><td>对应ServletContext对象</td></tr><tr><td>out</td><td>对应JspWriter对象，其内部关联一个PrintWriter对象</td></tr><tr><td>page</td><td>后对应this</td></tr><tr><td>config</td><td>对应ServletConfig对象</td></tr><tr><td>exception</td><td>对应Throwable对象，代表由其他JSP页面抛出的异常对象，只会出现于JSP错误页面(isErrorPage设置为true的JSP页面)</td></tr><tr><td>pageContext(域)</td><td>对应PageContext对象，它提供了JSP页面资源的封装，并可设置页面范围，可以用来获取其他8个内置对象</td></tr></tbody></table><ul><li> response.getWriter()和out对象区别：response.getWriter()输出内容永远都会在out输出内容之前</li></ul><h2 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h2><h3 id="jsp历史"><a href="#jsp历史" class="headerlink" title="jsp历史"></a>jsp历史</h3><ol><li>servlet：response输出标签</li><li>jsp：简化了servlet开发，大项目难以维护</li><li>java的web开发借鉴了MVC开发模式，程序设计更加合理（model1—&gt;model2）</li></ol><h3 id="MVC："><a href="#MVC：" class="headerlink" title="MVC："></a>MVC：</h3><ol><li>M：模型Model</li><li>V：视图View（jsp中禁止写java代码了,利用el和jstl做展示工作）</li><li>C：控制器Controller</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210316094511914.png" alt="image-20210316094511914"></p><h3 id="MVC优缺点："><a href="#MVC优缺点：" class="headerlink" title="MVC优缺点："></a>MVC优缺点：</h3><ul><li>优点：<ol><li>耦合低，利于分工、维护</li><li>代码重用性高（C和M层代码）</li></ol></li><li>缺点：<ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol></li></ul><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul><li>一种软件设计架构</li></ul><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><ol><li><strong>view表现层：</strong>  用于显示数据和接收用户输入的数据，为用户提供一种交互式操作的界面</li><li><strong>service业务逻辑层：</strong>实现业务的主要逻辑，是系统架构中体现核心价值的部分。</li><li><strong>Dao数据访问层：</strong>有时候也称为是持久层，其功能主要是负责数据库的访问。可以访问数据库、二进制文件、文本文件等。简单的说法就是实现对数据表的Select，Insert，Update，Delete的操作。如果要加入ORM的元素，那么就会包括对象和数据表之间的mapping，以及对象实体的持久化。</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210316104928444.png" alt="image-20210316104928444"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb核心:理解servlet</title>
      <link href="/2020/03/18/JavaWeb%E6%A0%B8%E5%BF%83-%E7%90%86%E8%A7%A3servlet/"/>
      <url>/2020/03/18/JavaWeb%E6%A0%B8%E5%BF%83-%E7%90%86%E8%A7%A3servlet/</url>
      
        <content type="html"><![CDATA[<p>Servlet定义</p><ul><li><p><strong>物理上是一个运行在服务器端的一个小程序（serve applet），可以理解为就是一个接口（规则），定义了服务器端的Java类被tomcat识别的规则</strong></p></li><li><p><strong>我们需要自定义一个类，来实现servlet接口，复写接口的的方法，tomcat就可以识别这个类，我们就称这个类是个servlet</strong></p></li></ul><p><strong>实际操作：</strong></p><ol><li>创建JavaEE项目</li><li>定义一个类，实现servlet接口</li><li>重写接口中的抽象方法</li><li>在web.xml中配置servlet</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200318195150.png"></p><h2 id="Servlet的执行原理"><a href="#Servlet的执行原理" class="headerlink" title="Servlet的执行原理"></a>Servlet的执行原理</h2><p>servlet中的java类和javase中的普通java类是不一样的，它的运行依赖tomcat这个web容器，自己没有main方法。实现的servlet方法不需要自己调用，服务器会自己按照需要调用</p><ol><li>当服务器接收到客户端浏览器的请求后，会解析请求的URL路径，获取访问的servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容</li><li>如果有，则会找到对应的<servlet-class>全类名</li><li>tomcat会将字节码文件内加载进内存，并且创建其对象</li><li>tomcat按照需要自己调用方法</li></ol><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210314153955729.png" alt="image-20210314153955729"></p><h2 id="Servlet中的生命周期"><a href="#Servlet中的生命周期" class="headerlink" title="Servlet中的生命周期"></a>Servlet中的生命周期</h2><h3 id="sevlet中的方法"><a href="#sevlet中的方法" class="headerlink" title="sevlet中的方法"></a>sevlet中的方法</h3><ul><li>init方法：servlet被创建时执行</li><li>service方法：每一次servlet被访问时执行</li><li>destroy方法：在服务器正常关闭时执行</li></ul><p>上面三个方法对应servlet的三个生命周期</p><ul><li>servletConfig方法：获得servletconfig对象，就是servlet的配置对象</li><li>getServletInfo方法：获得servlet的一些信息，版本，作者…</li></ul><h3 id="Servlet被创建"><a href="#Servlet被创建" class="headerlink" title="Servlet被创建"></a>Servlet被创建</h3><ul><li>默认情况下，第一次被访问时，servlet被创建，加载资源</li><li>非默认时，可以子啊web.xml中指定servlet的创建时机，配置<load-on-startup></load-on-startup>标签的值，<strong>正数</strong>表示在服务器<strong>启动时创建</strong>，<strong>负数</strong>表示<strong>第一次被访问时创建</strong></li><li>一个servlet类在内存中只有一个对象，是单例模式。多用户同时访问时，可能不安全，但是加锁会严重影响性能，所有尽量不要在servlet中定义<strong>成员变量线程公共资源</strong>，定义局部变量就没有安全问题了，因为局部变量在栈中，线程私有。</li></ul><h3 id="Servlet提供服务"><a href="#Servlet提供服务" class="headerlink" title="Servlet提供服务"></a>Servlet提供服务</h3><ul><li>每次访问都会执行service方法</li></ul><h3 id="Servlet被销毁"><a href="#Servlet被销毁" class="headerlink" title="Servlet被销毁"></a>Servlet被销毁</h3><ul><li>服务器关闭时，Servlet被销毁，释放资源。但是只有服务器正常关闭，才会执行destroy方法。</li></ul><h2 id="Servlet3-0"><a href="#Servlet3-0" class="headerlink" title="Servlet3.0"></a>Servlet3.0</h2><ul><li>选择JavaEE时，选择servlet版本3.0以上，可以不选择web.xml了</li><li>可以通过注解配置：<code>@WebServlet</code>，不需要web.xml配置文件中配置了</li></ul><h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><ul><li><p>Servlet接口，GenericServlet抽象类，HttpServlet抽象类</p></li><li><p>GenericServlet抽象类继承Servlet抽象类，已经空实现了除了service方法之外的所有抽象方法。所以，可以让自定义的servelt类继承GenricServlet类，减少工作量。</p></li><li><p>HttpServlet抽象类也是继承于Servlet接口，并且由doPost和doGet方法，我们可以让自定义的Servlet类继承HttpServlet类复写doGet和doPost方法，但是service方法不用复写了，HttpServlet抽象类已经帮你写好了。用来根据post和get的请求方式做出不同判断。</p></li></ul><h2 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h2><ul><li>urlpartten：Servlet的访问路径<ul><li>一个Servlet可以定义多个访问路径：@webServlet({“d4”,”d44”,”d444”})</li><li>路径定义规则：<ul><li>/XXX</li><li>/XXX/XX：多层路径，目录结构</li><li>*.do</li></ul></li></ul></li></ul><h2 id="Servlet和JSP？"><a href="#Servlet和JSP？" class="headerlink" title="Servlet和JSP？"></a>Servlet和JSP？</h2><ul><li>先上一张图：</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200319100722.jpg"></p><ul><li><p>要理解servlet和jsp的区别与联系，我们需要回顾javaWeb的发展历史：</p><ol><li>最开始的web，用户使用浏览器向web服务器发送的请求都是静态的资源（html,css,javascript）。为了能够根据不同用户的不同请求来动态的处理并且返回资源，servlet就出现了。</li><li>前面提到了servlet是在服务器端的java代码，通过java这个高级语言就能动态的处理数据和资源，然后把经过动态处理后的静态资源再打回浏览器客户端。但是有一个问题，servlet类中需要写大量的冗余的out.write代码写html，这就导致后端人员都想骂娘，然后，jsp就诞生了。</li><li>jsp是sun公司借鉴微软的asp后，推出的直接在原来的静态页面html中嵌入java代码的技术。但是，这样虽然可以避免冗余，但是前端人员必须要懂后端知识，并且在html中插入大量的java代码会是jsp文件代码看起来凌乱不堪，自己写完了都看不懂，更不要说多人协作了。所以再后来，基于MVC模式的JSP+Servlet+JavaBean就应运而生了（也就是上面图中所表达的）</li><li>所以，总结就是：<ul><li>一个java类必须是serevlet类才能被浏览器访问到，jsp本质上就是一个servlet，jsp简化servlet的繁琐写html代码的操作</li><li>servlet是在java代码中写html，jsp是在html中写java代码</li></ul></li></ol><p><strong>注：关于MVC的具体以及Web发展后期框架的出现以及前后端分离的知识现在还在学习中，以后会陆续写出来。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中tomcat的神奇走位</title>
      <link href="/2020/03/18/IDEA%E4%B8%ADtomcat%E7%9A%84%E7%A5%9E%E5%A5%87%E8%B5%B0%E4%BD%8D/"/>
      <url>/2020/03/18/IDEA%E4%B8%ADtomcat%E7%9A%84%E7%A5%9E%E5%A5%87%E8%B5%B0%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="tomcat服务器的三种部署方式："><a href="#tomcat服务器的三种部署方式：" class="headerlink" title="tomcat服务器的三种部署方式："></a>tomcat服务器的三种部署方式：</h2><ol><li><p>直接将项目放进webapps目录下即可</p><ul><li><p><code>/项目名</code>就是访问路径</p></li><li><p>可以简化部署：将项目里的全部文件打一个war包，然后把war包放进webapps里面会自动解压缩。删除war包会自动删除项目。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200319121227.png"></p></li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200319115144.png"></p></li><li><p><code>conf/server.xml</code>配置文件中，加上<code>&lt;Context docBase=项目地址 path=虚拟访问路径 /&gt;</code></p><ul><li>更加灵活些，范文路径是path，不一定是目录名</li><li>但是修改server.xml，不是很安全</li></ul></li><li><p>热部署：在/conf/Catalina/localhost下面创建任意名称的xml文件，里面加上<code>&lt;Context docBase=项目地址 /&gt;</code>，范文路径就是xml文件的名称</p></li></ol><h2 id="IDEA中的tomcat"><a href="#IDEA中的tomcat" class="headerlink" title="IDEA中的tomcat"></a>IDEA中的tomcat</h2><ul><li><p>与eclipse或则myeclipse那样直接部署就在在tomcat的安装文件夹里生成部署文件不同，IDEA会为每一个tomcat部署的Web项目单独建立一份相关文件，里面包含配置文件，日志和临时目录（如下图），在自己的家目录下：<code>C:\Users\你的用户名\.IntelliJIdea2019.3\system\tomcat\</code></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200319120803.png"></p></li><li><p><strong>重点：</strong>这里的文件对应着tomcat安装根目录下的对应文件，conf目录下是配置文件，idea默认就是热部署，就是在这里面对应的位置生成xml文件。work目录里面是临时文件，包含服务器端jsp被转化为servlet的java代码文件和class字节码文件。</p></li><li><p>tomcat服务器真正访问的是<strong>out目录</strong>(tomcat部署的web项目)，而out目录下的部署的项目对应着<strong>web工作空间目录</strong>下的所有资源，idea的out目录和web目录都在自己创建的项目地址下。</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200319123804.png"></p></li><li><p>WEB-INF目录下有个classes目录，里面的java字节码文件是从src目录导过来的。</p></li><li><p>WEB-INF目录是个安全目录，其下的资源不能直接被浏览器访问</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> IDEA </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10桌面美化</title>
      <link href="/2020/03/11/Win10%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
      <url>/2020/03/11/Win10%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>先放上一张我的桌面：</strong></p></li><li><p><strong>前言：Windows操作系统经过几十年的发展，到目前已经相当成熟，在个人桌面操作系统中也是处于霸主地位，但是对于我而言，如果根据自我审美和操作习惯对Win10进行美化，无疑也是会提高舒适度和办公学习效率的。</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311214846.png"></p></li></ul><h1 id="everything-Wox"><a href="#everything-Wox" class="headerlink" title="everything+Wox"></a>everything+Wox</h1><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311214948.png" style="zoom: 50%;" /><ul><li>这东西能让你的桌面干干净净，再也不用在桌面码满快捷方式，还能一定程度上摆脱鼠标的束缚，查找软件，文档，甚至网页都是可以的，还有很多功能我没有探索到的。</li><li>其实关于全局搜索软件的尝试，我最开始是用的listary，很好用，就是有个缺点，能改样式的高级版收费。所以我就换了Wox，注意：要让Wox能全局搜索，需要配合everything，两个软件都设置成开机自启，美滋滋。</li></ul><h1 id="RocketDock"><a href="#RocketDock" class="headerlink" title="RocketDock"></a>RocketDock</h1><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215014.png"></p><ul><li><p>win10的任务栏和Mac、Linux的Dock栏的喜爱见仁见智，不过我觉得Mac的dock栏的设计确实更加具有美感，效率性很不差。经过我的一番搜索，其实有很多：ObjectDock，BitDock等等，一些桌面第三方都支持这一功能，我为什么选择RocketDock呢？一个字，小。RocketDock对内存的占用几乎可以忽略不计，开机自启后完全不会拖慢Windows系统的运行。</p></li><li><p><a href="https://punklabs.com/">官网下载</a>，安装后可以在设置界面进行自定义设置，选项很多，这里不一一介绍了，有一点需要注意的是，我在选择了他的“将窗口最小化到Dock栏”这一项时，有部分软件并不能最小化到Dock栏，还是在任务栏最小化，经过我的分析，发现在Program Files和Program Files (x86)目录下的软件的反应不同，我感觉可能是因为该软件停更了几年，对64位的支持不好？也有可能是我的个别情况。</p></li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215039.png" style="zoom:67%;" /><ul><li><p>要把图标加到dock栏由两种方法：</p><ol><li>直接把快捷方式或者exe文件拖入dock栏</li><li>右击dock栏，新建项目——&gt;文件，然后右击新生成的文件图标，可以选择文件位置和图标</li></ol></li><li><p>关于图标的自定义，这里推荐一个网站：<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></p></li><li><p>如果要有如下stacks docklet的效果，需要下载一个插件，但是官网关闭了，如果百度不到的可以联系我。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215113.png" style="zoom: 67%;" /></li></ul><h1 id="Win10任务栏调整"><a href="#Win10任务栏调整" class="headerlink" title="Win10任务栏调整"></a>Win10任务栏调整</h1><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215143.png"></p><ul><li><p>Windows的任务栏是win的精华，并不能被dock完全取代，我是把它放在顶部。<strong>右击任务栏</strong>——&gt;<strong>任务栏设置</strong>，里面有很多自定义选项，根据需要调整</p></li><li><p>我不习惯Win10的原始开始菜单，借助了**”腾讯电脑管家”<strong>的工具箱里面的</strong>“经典开始菜单”**工具，可以换成经典模式</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215207.png"></p></li></ul><p><strong>合理利用Windows的键盘快捷键可以极大的提高效率，同时也会让你的系统更加的规范</strong></p><p><strong>ok，这篇博文就先介绍这几个最基本的工具，如果有什么不清楚的或者讨论的请留言，或者联系我的QQ（在菜单关于里面）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux备份与恢复</title>
      <link href="/2020/03/11/linux%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>/2020/03/11/linux%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="备份概述"><a href="#备份概述" class="headerlink" title="备份概述"></a>备份概述</h1><ul><li><p><strong>Linux中需要备份的数据</strong>：/root/目录，/home/目录，/var/spool/mail/目录，/etc/目录，其他目录</p></li><li><p>安装的服务的数据也需要备份：</p><p>apache需要备份的数据：配置文件，网页主目录，日志文件</p><p>mysql需要备份的数据：源码包安装的：<code>/usr/local/mysql/data/</code>或者RPM包安装的：<code>/var/lib/mysql</code></p></li><li><p>备份策略：</p><ul><li>完全备份：效果最高，但需要更大的硬盘空间</li><li>增量备份：每次备份只备份新的数据，占用空间少，但是恢复起来麻烦</li><li>差异备份：每次备份都只备份完全备份中不存在的，折中方法</li></ul></li></ul><h1 id="备份命令"><a href="#备份命令" class="headerlink" title="备份命令"></a>备份命令</h1><ul><li><p>完全备份完全可以用tar打包压缩来做，但是如果是差异备份就会非常麻烦，这时就需要用到Linux为数据备份量是打造的备份和恢复命令dump命令和restore命令</p></li><li><p><code>dump [选项] 备份之后的文件名 原文件名</code></p><p>-级别：0到9个备份级别</p><p>-f：指定备份之后的文件名</p><p>-u：把备份时间记录在/etc/dumpdates文件中</p><p>-v：显示备份过程</p><p>-j：把备份文件压缩为.bz2格式</p><p>-W：查看详情</p><p>注意：dump命令只有在备份分区的时候才能增量备份，备份普通目录只能完全备份</p></li><li><p>restore [模式选项] [选项]</p><p>四个模式：</p><ul><li><p>-C：比较备份数据和实际数据的变化</p></li><li><p>-i：交互模式</p></li><li><p>-t：查看模式</p></li><li><p>-r：还原模式</p></li></ul><p>一个选项：</p><ul><li>-f：指定备份文件的文件名</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux启动管理</title>
      <link href="/2020/03/11/linux%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/11/linux%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-6的启动管理"><a href="#CentOS-6的启动管理" class="headerlink" title="CentOS 6的启动管理"></a>CentOS 6的启动管理</h1><ul><li><p>运行级别：7个级别</p><p><code>runlevel</code>：查看运行级别</p><p><code>init 运行级别</code>：改变当前运行级别</p><p><code>vim /etc/inittab</code>：永久修改系统默认运行级别，写上<code>id:3:initdefault</code></p><p>不要把0和6设为默认级别</p></li><li><p><strong>CentOS6系统启动过程：</strong>（针对MBR模式）</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/1_ZBbT17hrI_UR9M-eGeItug.png" style="zoom: 80%;" /></li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215505.png" style="zoom:67%;" /><p><strong><a href="https://www.bilibili.com/video/av18156598/?p=103">配合视频食用</a></strong></p><h1 id="启动引导程序grub"><a href="#启动引导程序grub" class="headerlink" title="启动引导程序grub"></a>启动引导程序grub</h1><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215538.png" style="zoom: 50%;" /><ul><li><p>Grub配置文件：<code>/boot/grub/grub.conf</code></p><p><strong>格式：</strong></p><p>default=0                          默认启动第一个系统</p><p>timeout=5                         等待时间，默认是5秒</p><p>splashimage=(hd0,0)/grub/splash.xpm.gz                    指定grub启动时的背景图像文件的保存位置</p><p>hiddenmenu                     隐藏菜单</p><p>title CentOS(2.6.32-279.el6.i686)                        标题</p><p>root (hd0,0)                                                             指启动程序的保存分区</p><p>kernel /vmlinuz-2.6.32-279.el6.i686 ro               定义了内核加载时的选项</p><p>initrd /initramfs-2.6.32-279.el6.i686.img           initramfs内存文件系统镜像文件的所在位置</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客优化之图床迁移&amp;google收录</title>
      <link href="/2020/03/11/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8B%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB-google%E6%94%B6%E5%BD%95/"/>
      <url>/2020/03/11/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8B%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB-google%E6%94%B6%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>前言：</p><ul><li>搭建完hexo后，当然就是写博客，markdown的语法插入图片很简单，但是把大量图片放在博客文件里面，未免太臃肿，会大大拖慢博客的打开时间（更别说我的博客是托管在github上的了）。<strong>图床</strong>就是一个好的解决方案，顾名思义，图床就是一个存储图片个“床”，一个<strong>云端的图片库</strong>，它把博客和图片分离开来，更好管理的同时也不会拖慢博客的速度。</li><li>我写博客虽然都是给自己看的，但是搜索引擎搜不到自己的文章总感觉缺了点什么:laughing:,让谷歌收录自己的博文，再加上自己博文的质量，就能在google搜索引擎上根据关键词搜索到自己的文章了。（百度的收录我没有弄，不过大同小异）</li></ul><h1 id="图床迁移："><a href="#图床迁移：" class="headerlink" title="图床迁移："></a>图床迁移：</h1><p><strong>我之前的图床用的是<a href="https://imgchr.com/">路过图床</a>，这是个免费的图床，还不错，免费额度完全够用，但是感觉图片打开速度有点慢。所以就百度了一下，发现了一种同样免费且快捷的方式：gitee(码云)+PicGo。迁移过后，实测效果明显，下面就来总结一下</strong></p><ul><li><p>现在码云建立一个仓库，按照下面格式来。没有账号的自己注册。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/z.png" style="zoom: 67%;" /></li><li><p>在gitee的<strong>个人设置</strong>里选择   <strong>私人令牌</strong>——&gt;<strong>生成新令牌</strong>，最后会生成一串密文，保存它，后面和PicGo绑定要用。</p></li><li><p>下载PicGo软件<a href="https://github.com/Molunerfinn/PicGo/releases">下载链接</a>，Windows系统选择exe安装程序下载，macos选择dmg程序安装程序下载。</p></li><li><p>进入PicGo界面，插件搜索gitee-uploader，安装，然后重启。</p></li><li><p>进入图床设置，选择gitee，然后填入以下信息</p><ul><li>repo：gitee中你建立的仓库地址，例如<code>yangfanjack/image</code></li><li>branch：填<code>master</code></li><li>token：刚才的密文</li><li>path：一般填<code>img</code></li><li>customPath：不填</li><li>customUrl：不填</li></ul></li><li><p>然后点击<strong>设为默认图床</strong>——&gt;<strong>确认</strong>，即可，enjoy it!</p></li></ul><h1 id="Google收录："><a href="#Google收录：" class="headerlink" title="Google收录："></a>Google收录：</h1><p>前提：看到这里的我相信都有办法进google吧</p><ul><li><p>进入<a href="https://www.google.com/webmasters/#?modal_active=none">Google Search Console</a>，既然有新的，就选择左边的网域，按照他的格式例如<code>ordinaryman.club</code>填入你的域名，点击继续</p></li><li><p>会DNS验证，去你的域名购买商添加一条txt record，如果之前更改过DNS服务器地址，就去DNS代理商添加record，我是cloudflare代理的，所以以此为例：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215859.png"></p><p>点击**+Add record<strong>，然后</strong>type<strong>选择TXT，</strong>Name<strong>填@，</strong>Content**就填Google给你的txt内容，点击save，完成。</p></li><li><p>返回Google Search Console界面，点击验证，一般会过一段时间通过，不过我是马上就通过了:neutral_face:。</p></li><li><p>然后进入你的本地博客根目录，安装站点地图插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>安装完后进入根目录的配置文件_config.yml</p><ul><li>在URL下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://XXXXXX  //写入你的域名</span><br></pre></td></tr></table></figure><ul><li>在最后加上：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br></pre></td></tr></table></figure><p>保存后，hexo三件套：<code>hexo clean</code>       <code>hexo g</code>      <code>hexo d</code>，访问网页：<code>你的域名/sitemap.xml</code>，出现以下页面说明配置成功</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200311215929.png"></p></li><li><p>进入Google Search Console的你的域名管理页面，点击站点地图，添加你的站点地图的网址：<code>你的域名/sitemap.xml</code>，等待一天时间，就可以生效啦。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux日志管理</title>
      <link href="/2020/03/10/linux%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/10/linux%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="日志管理简介"><a href="#日志管理简介" class="headerlink" title="日志管理简介"></a>日志管理简介</h1><ul><li><p><strong>百度百科简介</strong>：系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。系统日志包括系统日志、应用程序日志和安全日志。</p></li><li><p><strong>服务器出现问题先查看日志</strong>，才能找准原因</p></li><li><p>CentOS7中原来的日志服务syslogd被rsyslogd取代，两者兼容</p></li><li><p>确认服务是否启动和自启动：</p><ul><li><code>ps aux | grep rsyslogd</code></li><li><code>chkconfig --list | grep rsylog</code></li></ul></li><li><p><strong>常见的日志的作用：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/b.png" style="zoom: 67%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FruAf.png" style="zoom: 67%;" /></li><li><p>RPM包安装的服务日志也会在/var/log/目录下</p></li><li><p>源码包安装的服务日志在源码包指定目录（一般是/usr/local）中，这些日志不是有rsyslogd服务来管理的，而是由各个服务使用自己的日志管理文档来记录自身日志</p></li></ul><h1 id="rsyslogd日志服务"><a href="#rsyslogd日志服务" class="headerlink" title="rsyslogd日志服务"></a>rsyslogd日志服务</h1><h2 id="日志文件格式"><a href="#日志文件格式" class="headerlink" title="日志文件格式"></a>日志文件格式</h2><ul><li>事件产生的时间</li><li>产生事件的服务器的主机名</li><li>产生事件的服务名或程序名</li><li>事件的具体信息</li></ul><h2 id="etc-rsyslog-conf配置文件"><a href="#etc-rsyslog-conf配置文件" class="headerlink" title="/etc/rsyslog.conf配置文件"></a>/etc/rsyslog.conf配置文件</h2><p>​        <strong>格式：</strong></p><ul><li><p>authpriv.*                                        /var/log/secure</p><p>服务名称[连接符号]日志等级         日志记录位置</p></li><li><p>服务名称，连接符，日志等级，日志记录位置都有多个，内容很多，自行百度。</p></li></ul><h1 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h1><p><strong>如果日志都记录在一个文件中，那么可能会占据大量存储空间，纯文本文档打开会非常慢，所以日志需要处理：切割（把大日志按天切割成小的）+轮换（删除旧的，保存新的）</strong></p><ul><li><p>如果配置文件中由“dateext”参数，那么日志会用日期作为后缀，只需要保存指定的日志个数，删除多余的日志文件即可</p></li><li><p>如果没有“dateext”参数，那么日志文件就需要改名了，当第一次使用日志轮替时，当前的“secure”日志会自动改名为“secure.1”，然后新建“secure”日志。第二次时，1变2，0变1，又新建0，以此类推</p></li><li><p>配置文件：<code>/etc/logrotate.conf</code></p><p>包含参数：daily，weekly，monthly，rotate，compress，create mode owner group等</p><p>分别表示：轮替周期时每天，每周，每月，保存日志文件的个数，旧日志是否压缩，建立新日志同时指定权限</p></li><li><p>只要是RPM包安装的服务，它默认已经支持轮替，但是源码包安装的服务需要<code>vim /etc/logrotate.conf</code>，然后手动加入轮替</p><p>FOR EXAMPLE:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/apache2/logs/access_log&#123;</span><br><span class="line">    daily    <span class="comment">//每天备份</span></span><br><span class="line">    create   <span class="comment">//备份的时候创建新的日志</span></span><br><span class="line">    rotate <span class="number">30</span>   <span class="comment">//保留30天</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>logrotate -v /etc/logrotate.conf</code>：显示日志轮替过程</p></li><li><p><code>logrotate -f /etc/logrotate.conf</code>：强制轮替，不管日志轮替的条件是否已经满足</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统管理</title>
      <link href="/2020/03/10/linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/10/linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>进程管理的作用：（下面优先级由高到低）</strong></p><ol><li>判断服务器的健康状态</li><li>查看系统中的所有进程</li><li>杀死进程</li></ol><h2 id="进程查看"><a href="#进程查看" class="headerlink" title="进程查看"></a>进程查看</h2><ul><li><p><code>ps aux</code>：查看系统中所有进程，查看BSD操作系统格式</p></li><li><p><code>ps -le</code>：查看系统中所有进程，Linux格式</p></li><li><p>输出格式的作用：</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FKzwt.png" style="zoom: 50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FKjOA.png" style="zoom:50%;" /></li><li><p><code>top</code>（每3秒更新一次）</p><p>-d 秒数：默认每3秒更新一次，可指定</p><p>？或h：显示交互模式的帮助</p><p>P：以CPU使用率排序</p><p>M：以内存使用率排序</p><p>N：以PID排序</p><p>q：退出top</p><p><strong>top命令的显示：</strong></p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FMv3F.png"></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8Fl8d1.png" style="zoom:50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FllL9.png" style="zoom:50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FlGIx.png" style="zoom:50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8Fl3ZR.png" style="zoom:50%;" /><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8FlMM4.png" style="zoom:50%;" /></li><li><p><code>pstree</code>：查看进程树</p></li></ul><h2 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h2><ul><li><p><code>kill</code></p><p>-l：查看kill支持的信号</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8F1h9K.png" style="zoom:50%;" /><p>-1 PID：重启进程</p><p>-9 PID：终止进程</p></li><li><p><code>killall 进程名</code>：按照进程名杀死，选项和kill通用</p><p>-i：有询问</p><p>-I：忽略进程名的大小写</p></li><li><p><code>pkill 进程名</code>：按照进程名杀死，选项和kill通用</p><p>也可以加t选项跟终端号：<code>pkill -t 终端号</code>：按照终端号踢出用户，用 <code>w</code> 命令查询系统中登录的用户，然后用终端号来踢</p></li></ul><h1 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h1><ul><li>把进程放入后台<ul><li>命令后面加&amp;：后台继续运行</li><li>在命令执行过程中，按下ctrl+z快捷键：放入后台即暂停</li></ul></li><li>查看后台的工作：<code>jobs -l</code>：加l会显示工作号</li><li><code>bg %工作号</code>：恢复后台暂停的工作恢复到后台运行，但是不能恢复和前台有交互的命令比如<code>top命令</code>和<code>vim命令</code></li><li><code>fg %工作号</code>：恢复后台暂停的工作恢复到前台运行</li><li><strong>注意：工作号≠PID</strong></li></ul><h1 id="系统资源查看"><a href="#系统资源查看" class="headerlink" title="系统资源查看"></a>系统资源查看</h1><ul><li><p><code>vmstat 刷新延时(s) 刷新次数</code>：<strong>监视系统资源</strong>使用情况，和top内容差不多，但更简洁</p></li><li><p><code>dmesg</code>：<strong>开机时内核检测</strong>，一般结合grep使用</p></li><li><p>free：查看<strong>内存使用</strong>情况</p><p>-b：以字节为单位显示</p><p>-k：以KB为单位显示（默认就是）</p><p>-m：以MB为单位显示</p><p>-g：以GB为单位显示</p></li><li><p>查看<strong>CPU</strong>信息：</p><ul><li><code>cat /proc/cupinfo</code>:每次开机都会更新</li><li><code>dmesg | grep CPU</code></li><li><code>uptime</code>：实际就是top命令第一行</li></ul></li><li><p><code>uname</code>：查看<strong>系统与内核相关信息</strong></p><p>-a：查看系统所有相关信息</p><p>-r：查看内核版本</p><p>-s：查看内核名称</p></li><li><p>判断当前系统的<strong>位数</strong>：file /bin/ls（通过系统外部命令的位数来推测）</p></li><li><p><code>lsb_release -a</code>：查询Linux系统的<strong>发行版本</strong></p></li><li><p><code>lsof -p PID</code>：列出进程调用的文件</p></li></ul><h1 id="系统定时任务"><a href="#系统定时任务" class="headerlink" title="系统定时任务"></a>系统定时任务</h1><p><strong>前提</strong>：必须启动crond服务：<code>service crond restart</code>并且<code>chkconfig crond on</code>，Linux系统都是默认启动和自启动的</p><ul><li><p>crontab：设置系统定时任务</p><p>-e：编辑crontab定时任务</p><p>-l：查询crontab任务</p><p>-r：删除当前用户所有的crontab任务</p><p>打开文件编辑的格式是：<code>* * * * * command</code></p><ul><li>第一个*：分钟（0-59）</li><li>第二个*：小时（0-23）</li><li>第三个*：天（1-31）</li><li>第四个*：月（1-12）</li><li>第五个*：星期（0-7，0和7都代表星期日）</li></ul><p>特殊符号：<img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/a.png" style="zoom:50%;" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的服务管理</title>
      <link href="/2020/03/10/linux%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/10/linux%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="服务简介与分类"><a href="#服务简介与分类" class="headerlink" title="服务简介与分类"></a>服务简介与分类</h1><ul><li><h2 id="Linux服务分类"><a href="#Linux服务分类" class="headerlink" title="Linux服务分类"></a>Linux服务分类</h2><ul><li>RPM包默认安装的服务<ul><li>独立的服务</li><li>基于xinetd（超级守护进程）服务</li></ul></li><li>源码包安装的服务（第三方源码包）</li></ul></li><li><h2 id="服务的启动与自启动"><a href="#服务的启动与自启动" class="headerlink" title="服务的启动与自启动"></a>服务的启动与自启动</h2><ul><li><p>查询已安装的服务</p><ul><li><p><strong>RPM包安装的服务</strong>：<code>chkconfig --list</code>：查看RPM包安装的服务按照运行级别的自启动状态。如果查询当前启动的服务，用<code>ps aux</code>或者<code>netstat</code>或者<code>service --status-all</code></p></li><li><p><strong>源码包安装的服务</strong>：没有命令，只能去服务安装位置查看，一般在<code>/usr/local/</code>下</p></li><li><p>其实源码包和RPM包安装的服务在Linux中的区别就是安装位置不同</p></li></ul></li></ul></li></ul><h1 id="RPM包安装服务的管理"><a href="#RPM包安装服务的管理" class="headerlink" title="RPM包安装服务的管理"></a>RPM包安装服务的管理</h1><p>​        <strong>RPM包安装的服务默认保存位置：</strong>(特殊文件有自己的默认保存位置)</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8iN6pt.png" style="zoom:50%;" /><ul><li><h2 id="独立服务的管理"><a href="#独立服务的管理" class="headerlink" title="独立服务的管理"></a>独立服务的管理</h2><ul><li>启动方式：<code>/etc/init.d/独立服务名</code>和<code>service 独立服务名</code></li><li>自启动方式：<ul><li><code>chkconfig --level 运行级别 独立服务名</code>：打开自启动</li><li><code>chkconfig 独立服务名 off</code>：关闭自启动</li><li>修改<code>/etc/rc.d/rc.local</code>文件,加入需要自启动的服务名</li><li>使用<code>ntsysv</code>命令管理自启动，图形界面很直观</li></ul></li></ul></li><li><h2 id="基于xinetd-超级守护进程-服务的管理"><a href="#基于xinetd-超级守护进程-服务的管理" class="headerlink" title="基于xinetd(超级守护进程)服务的管理"></a>基于xinetd(超级守护进程)服务的管理</h2><ul><li>默认情况下Linux是没有xinted的，需要手动安装<code>yum -y install xinetd</code></li><li>然后用<code>chkconfig --list</code>查看，基于xinetd的服务不占用内存，但是需要的响应时间更长</li><li>基于xinetd的服务的启动，修改<code>/etc/xinetd.d/</code>下对应的服务的配置文件,然后<code>service xinetd restart</code></li><li>基于xinetd的服务的自启动：<ul><li><code>chkconfig 服务名 on</code>和<code>chkconfig 服务名 off</code></li><li>图形界面工具：ntsysv</li></ul></li><li>基于xinetd的启动和自启动是通用的，两者区分不是很严格，这种设置不利于管理，所以现在基于xinetd的服务越来越少了</li></ul></li></ul><h1 id="源码包安装服务的管理"><a href="#源码包安装服务的管理" class="headerlink" title="源码包安装服务的管理"></a>源码包安装服务的管理</h1><p>​        <strong>RPM包安装的服务默认保存位置：</strong>/usr/local/</p><ul><li>源码包安装服务的启动和关闭(用绝对路径的启动脚本启动)：<code>/usr/local/apache2/bin/apachectl start|stop</code></li><li>一般每一个源码包都有安装说明INSTALL，应该查看里面的启动方法</li><li>源码包安装服务的自启动：<ul><li><code>vim /etc/rc.d/rc.local</code>加入<code>/usr/local/apache2/bin/apachectl start</code></li></ul></li><li>把源码包服务的启动脚本软连接到<code>/etc/init.d/</code>目录下和<code>chkconfig --add 服务名</code>，就可以实现<code>service</code>，<code>chkconfig</code>和<code>ntsysv</code>命令管理源码包安装服务，<strong>但是并不推荐</strong>，容易混乱。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell编程</title>
      <link href="/2020/03/06/shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/03/06/shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h1><ul><li><p><strong>正则表达式</strong>和<strong>通配符</strong>区别：</p><p>通配符：在系统中搜索匹配文件名，是完全匹配。支持命令ls，find，cp，他们不认识正则表达式</p><p>正则表达式：用来在文件中匹配符合条件的字符串，是包含匹配。支持命令：grep，awk，sed<!--more--></p></li><li><p><code>*</code>：前一个字符匹配0次或者任意多次</p></li><li><p><code>.</code>：匹配任意一个字符（换行符除外）</p></li><li><p><code>^</code>：匹配以后面字符作为行首的行</p></li><li><p><code>$</code>：匹配以后面字符作为行尾的行</p></li><li><p><code>^$</code>：匹配空白行</p></li><li><p><code>[]</code>：匹配中括号中的指定的任意一个字符</p></li><li><p><code>[^]</code>：匹配除中括号中的字符外的任意一个字符</p></li><li><p><code>\</code>：转义符</p></li><li><p><code>\&#123;n\&#125;</code>：表示其前面的字符恰好出现n次</p></li><li><p><code>\&#123;n,\&#125;</code>：表示其前面的字符出现不少于n次</p></li><li><p><code>\&#123;n,m\&#125;</code>：表示其前面的字符至少出现n次，最多出现m次</p></li></ul><h1 id="字符截取命令"><a href="#字符截取命令" class="headerlink" title="字符截取命令"></a>字符截取命令</h1><ul><li><h2 id="grep命令：提取符合条件的行"><a href="#grep命令：提取符合条件的行" class="headerlink" title="grep命令：提取符合条件的行"></a><strong><code>grep</code>命令</strong>：提取符合条件的行</h2><p>-c：只输出匹配行的计数</p><p>-i：不区分大小写</p><p>-v：显示不包含匹配文本的所有行</p></li><li><h2 id="cut命令：提取符合条件的列"><a href="#cut命令：提取符合条件的列" class="headerlink" title="cut命令：提取符合条件的列"></a><strong><code>cut</code>命令</strong>：提取符合条件的列</h2><p>-f 列号：提取第几列</p><p>-d 分隔符：按照指定分隔符分割列，默认是制表符tab</p><p><code>cut /etc/passwd | grep /bin/bash | grep -v root | cut -d &quot;:&quot; -f 1</code>：用来提取出普通用户名</p><p><code>df -h | grep &quot;sda5&quot; | cut -f 5</code>：用来提取硬盘的使用率</p></li><li><h2 id="printf命令：按找类型输出格式输出内容"><a href="#printf命令：按找类型输出格式输出内容" class="headerlink" title="printf命令：按找类型输出格式输出内容"></a><strong><code>printf</code>命令</strong>：按找类型输出格式输出内容</h2><p><code>%ns</code>：输出字符串</p><p><code>%ni</code>：输出整数</p><p><code>%m.nf</code>：输出浮点数</p><p>\n，\r，\t：换行，回车，tab键</p><p><code>printf &#39;%s %s %s&#39; 1 2 3 4 5 6</code>：最后输出结果按照%s %s %s格式分为两组</p><p>printf命令不能用管道符，只能<code>printf %s $(cat XXX.txt)</code></p><p>print命令：和printf语法一样，只是会默认换行，print不是系统命令，只能在awk中执行</p></li><li><h2 id="awk命令：截取列"><a href="#awk命令：截取列" class="headerlink" title="awk命令：截取列"></a><strong><code>awk</code>命令</strong>：截取列</h2><p>很强大的命令，可以说是一门编程语言</p><p><strong>格式</strong>：<code>awk ’条件1&#123;动作1&#125; 条件2&#123;动作2&#125; 条件3&#123;动作3&#125;‘ 文件名</code></p><ul><li>awk ‘{printf $2 “\t” $6 “\n”}’ XXX.txt</li><li><code>df -h | awk &#39;&#123;printf $1 &quot;\t&quot; $5 &quot;\t&quot; $6&#125;&#39;</code>：可以处理空格，弥补了cut的不足，但是awk很多命令很复杂</li><li><code>df -h | grep sda5 | awk ’&#123;print $5&#125;‘ | cut -d &quot;% -f 1&quot;</code></li></ul><p><strong>BEGIN</strong>：在所有命令执行之前先执行BEGIN后面的语句块,awk默认是先读入一行再执行后面的语句</p><p><strong>END</strong>：在所有语句处理完后执行</p><p><strong>FS</strong>：指定分隔符，<code>awk ’&#123;FS=&quot;:&quot;&#125;‘</code></p><p><strong>awk还支持条件判断</strong>：<code>awk ’$6&gt;=87 &#123;printf $2 &quot;\n&quot;&#125;‘</code>：</p></li><li><h2 id="sed命令：数据的流编辑器"><a href="#sed命令：数据的流编辑器" class="headerlink" title="sed命令：数据的流编辑器"></a><strong><code>sed</code>命令</strong>：数据的流编辑器</h2><p>vim只能修改文件，sed还可以直接修改<strong>管道符</strong>传过来的流</p><p><strong>格式</strong>：sed [选项] ‘[动作]’ 文件名</p><p>选项：</p><ul><li><p>-n：sed默认把所有数据都输出到屏幕，加上-n表示<strong>只把经过sed修改过后的行输出到屏幕</strong></p></li><li><p>-e：允许对输入数据用<strong>多条sed命令</strong>编辑</p></li><li><p>-i：用sed的修改结果<strong>直接修改读取数据的文件</strong>，而不是由屏幕输出</p></li></ul><p>动作：</p><ul><li>a：行后追加（多行时，行尾要加\）sed ‘2a hello’ XXX.txt</li><li>c：替换（多行时，行尾要加\）sed ‘4c no the line’ XXX.txt</li><li>i：行前插入（多行时，行尾要加\）sed ‘2i hello \ world’ XXX.txt</li><li>d：删除：sed ‘2,4d’ XXX.txt</li><li>p：打印：sed ‘2p’ XXX.txt</li><li>s：字串替换：sed ‘4s old/new/g’ XXX.txt</li></ul></li></ul><h1 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h1><ul><li><h2 id="sort：排序"><a href="#sort：排序" class="headerlink" title="sort：排序"></a>sort：排序</h2><ul><li>-r：反向排序</li><li>-t -k：指定排序标准：-t “:” -k 3,4：以:为分隔符，按找第3到第4列来排序</li><li>-n：按照数值大小来排</li></ul></li><li><h2 id="wc：统计字符"><a href="#wc：统计字符" class="headerlink" title="wc：统计字符"></a>wc：统计字符</h2><ul><li>-l：行数</li><li>-c：单词数</li><li>-w：字符数</li></ul></li></ul><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><ul><li><h2 id="按照文件类型判断："><a href="#按照文件类型判断：" class="headerlink" title="按照文件类型判断："></a><strong>按照文件类型判断：</strong></h2><ul><li><p>-e：判断文件是否存在</p></li><li><p>-b：判断文件是否存在，并且是否是<strong>块设备</strong>文件</p></li><li><p>-c：判断文件是否存在，并且是否是<strong>字符设备</strong>文件</p></li><li><p>-d：判断文件是否存在，并且是否是<strong>目录</strong>文件</p></li><li><p>-f：判断文件是否存在，并且是否是<strong>普通</strong>文件</p></li><li><p>-L：判断文件是否存在，并且是否是<strong>链接</strong>文件</p></li><li><p>-p：判断文件是否存在，并且是否是<strong>管道</strong>文件</p></li><li><p>-S：判断文件是否存在，并且是否是<strong>套接字</strong>文件</p></li><li><p>-s：判断文件是否存在，并且是否是<strong>非空</strong></p></li><li><p><strong>两种判断格式：</strong></p><ul><li><p>test -e XXX.txt</p></li><li><p>[ -e XXX.txt ]：注意首尾各有一个空格</p></li><li><p>FOR EXAMPLE：<code>[-d /root] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</code>：如果是目录yes，否则no</p></li></ul></li></ul></li><li><h2 id="按照文件权限进行判断"><a href="#按照文件权限进行判断" class="headerlink" title="按照文件权限进行判断"></a>按照文件权限进行判断</h2><ul><li>-r：判断文件是否存在，并且是否该文件有<strong>读</strong>权限，u，g，o中任意一个有都为真</li><li>-w：判断文件是否存在，并且是否该文件有<strong>写</strong>权限，u，g，o中任意一个有都为真</li><li>-x：判断文件是否存在，并且是否该文件有<strong>执行</strong>权限，u，g，o中任意一个有都为真</li><li>-u：判断文件是否存在，并且是否该文件有<strong>SUID</strong>权限，u，g，o中任意一个有都为真</li><li>-g：判断文件是否存在，并且是否该文件有<strong>SGID</strong>权限，u，g，o中任意一个有都为真</li><li>-k：判断文件是否存在，并且是否该文件有<strong>SBIT</strong>权限，u，g，o中任意一个有都为真</li></ul></li><li><h2 id="两个文件之间进行比较"><a href="#两个文件之间进行比较" class="headerlink" title="两个文件之间进行比较"></a>两个文件之间进行比较</h2><ul><li>文件1 -nt 文件2：判断文件1的<strong>修改时间</strong>是否比文件2<strong>新</strong></li><li>文件1 -ot 文件2：判断文件1的<strong>修改时间</strong>是否比文件2<strong>旧</strong></li><li>文件1 -ef 文件2：判断文件1的<strong>inode号</strong>是否和文件2<strong>一致</strong>，可以用来判断两个文件是不是互为硬链接</li></ul></li><li><h2 id="两个整数之间比较"><a href="#两个整数之间比较" class="headerlink" title="两个整数之间比较"></a>两个整数之间比较</h2><ul><li>整数1 -eq 整数2：相等</li><li>整数1 -ne 整数2：不等</li><li>整数1 -gt 整数2：大于</li><li>整数1 -lt 整数2：小于</li><li>整数1 -ge 整数2：大于等于</li><li>整数1 -le 整数2：小于等于</li></ul></li><li><h2 id="字符串的判断"><a href="#字符串的判断" class="headerlink" title="字符串的判断"></a>字符串的判断</h2><ul><li>-z：判断是否为空</li><li>-n：判断是否为非空</li><li>字串1 == 字串2：判断是否相等</li><li>字串1 !=字串2：判断是否不等</li></ul></li><li><h2 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h2><ul><li>判断1 -a 判断2：逻辑与</li><li>判断1 -o 判断2：逻辑或</li><li>!判断：逻辑非</li></ul></li></ul><h1 id="流程判断"><a href="#流程判断" class="headerlink" title="流程判断"></a>流程判断</h1><ul><li><h2 id="if语句："><a href="#if语句：" class="headerlink" title="if语句："></a>if语句：</h2><ul><li><p>和<code>[-d /root] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</code>作用一样，但更直观</p></li><li><p><strong>单分支if</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8iVmfs.png" style="zoom:50%;" /></li><li><p>FOR EXAMPLE:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">rate=$(df -h | grep /dev/sda5 | awk &#x27;&#123;print $5&#125;&#x27; | cut -d &quot;%&quot; -f 1)</span><br><span class="line">if [ $rate -ge 80 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Warning /dev/sda5 is coming full !!!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p><strong>多分支判断：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8iKP6s.png" style="zoom:50%;" /></li></ul></li><li><h2 id="case语句："><a href="#case语句：" class="headerlink" title="case语句："></a>case语句：</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8iMa5T.png" style="zoom:50%;" /></li><li><h2 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h2><ul><li><p><strong>第一种语法：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8i1GKH.png" style="zoom: 50%;" /><p>FOR EXAMPLE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in 1 2 3 4 5 6</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p><strong>第二种语法：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8i1BRS.png" style="zoom:50%;" /><p>FOR EXAMPLE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">s=0</span><br><span class="line">for ((i=1;i&lt;=100;i=i+1))</span><br><span class="line">do</span><br><span class="line">s=$(($s+$i))</span><br><span class="line">done</span><br><span class="line">echo &quot;The sum of 1+2+...+100 is $s&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="while循环和until编程："><a href="#while循环和until编程：" class="headerlink" title="while循环和until编程："></a>while循环和until编程：</h2><ul><li><p><strong>while循环：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8i89pT.png" style="zoom:50%;" /><p>FOR EXAMPLE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">i=1</span><br><span class="line">s=0</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">s=$(( $s+$i ))</span><br><span class="line">i=$(( $i+1 ))</span><br><span class="line">done</span><br><span class="line">echo &quot;The sum is: $s&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>until循环：</strong></p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8i8zbd.png" style="zoom:50%;" /><p>FOR EXAMPLE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">i=1</span><br><span class="line">s=0</span><br><span class="line">until [ $i -gt 100 ]</span><br><span class="line">do</span><br><span class="line">s=$(( $s+$i ))</span><br><span class="line">i=$(( $i+1 ))</span><br><span class="line">done</span><br><span class="line">echo &quot;The sum is: $s&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell基础</title>
      <link href="/2020/03/06/shell%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/06/shell%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ul><li>shell就是Linux中的命令解释器，说白了，就是一个命令行的交互界面。与Linux不同Windows中就是图形的交互界面。shell还是一个强大的编程语言，因为它可以直接调用Linux的系统命令。</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3OpI41.png" style="zoom:50%;" /><ul><li>Shell的种类：<ul><li>Bourne Shell语法类：sh，ksh，Bash，psh，zsh</li><li>C Shell语法类（只要同于BSD的Linux版本中）：csh，tcsh</li><li>目前的主流shell时Bash Shell</li></ul></li><li>在文件/etc/shells中，可以查看Linux中默认支持的Shell类型，在命令行下输入shell的名字就可以切换shell类型</li></ul><h1 id="Shell脚本的执行方式"><a href="#Shell脚本的执行方式" class="headerlink" title="Shell脚本的执行方式"></a>Shell脚本的执行方式</h1><ul><li><p>echo命令：输出指定内容</p><ul><li>echo -e：支持反斜线的字符转换 </li></ul></li><li><p>First Script：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/Bash</span></span><br><span class="line">echo -e &quot;Mr Yang is the most handsome man in the world.&quot;</span><br></pre></td></tr></table></figure></li><li><p>执行方法：</p><ul><li>第一种：先chmod 755  hello.sh         然后./hello.sh</li><li>第二种：bash hello.sh</li></ul></li><li><p>注意：如果一个shell脚本在Windows中编辑完成，在Linux中发现运行出错，这是因为Windows和Linux格式不同，你可以用<code>cat -A</code>来验证，换行符不用。解决方法就是用命令<code>dos2unix</code>将Windows格式转化为Linux格式</p></li></ul><h1 id="Bash的基本功能"><a href="#Bash的基本功能" class="headerlink" title="Bash的基本功能"></a>Bash的基本功能</h1><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><ul><li>history n：显示最近的n条命令</li><li>history -d n：删除第n条命令</li><li>history -c：清空历史命令</li><li>history -w：把缓存中的历史命令写入每个用户的缓存文件~/.bash_history</li><li>可以使用上，下箭头的方式调用历史命令，也可以使用<code>!n</code>，<code>!!</code>，<code>!字串</code>直接执行指定的命令</li></ul><h2 id="TAB键"><a href="#TAB键" class="headerlink" title="TAB键"></a>TAB键</h2><ul><li>在Linux的bash中，Tab键可以用来不全命令和文件名</li></ul><h2 id="命令别名-amp-常用快捷键"><a href="#命令别名-amp-常用快捷键" class="headerlink" title="命令别名&amp;常用快捷键"></a>命令别名&amp;常用快捷键</h2><ul><li><p>命令别名就是给命令定义一个别名，For Example：<code>alias vi=&#39;vim&#39;</code></p></li><li><p>直接用alias可以查看当前的所有别名，实际就是查看~/.bashrc文件的内容</p></li><li><p><strong>命令执行的顺序：</strong></p><ol><li>绝对路径或相对路径的命令</li><li>别名</li><li>Bash的内部命令（内部命令就时用whereis找不到的Linux自带命令）</li><li>按找$PATH环境变量定义的目录查找顺序找到的第一的命令（外部命令）</li></ol></li><li><p>让别名永久生效：写入~/.bashrc配置文件</p></li><li><p>unalias：删除别名</p></li><li><p>常用快捷键：Ctrl+下列的字母</p><p>c强制终止当前命令</p><p>l清屏</p><p>u剪切光标之前的内容</p><p>k剪切光标后的内容</p><p>y粘贴</p><p>r搜索历史</p><p>d退出当前终端，相当于logout]</p><p>z暂停进程，放入后台</p><p>s暂停屏幕输出</p><p>q恢复屏幕输出</p></li></ul><h2 id="输入-amp-输出重定向"><a href="#输入-amp-输出重定向" class="headerlink" title="输入&amp;输出重定向"></a>输入&amp;输出重定向</h2><ul><li><p>标准输入输出设备</p><p>键盘：/dev/stdin：标准输入：0文件描述符</p><p>显示器：/dev/sdtout：标准输出：1文件描述符</p><p>显示器：/dev/sdterr：标准错误输出：2文件描述符</p></li><li><p><strong>输出重定向：</strong></p><p>改变输出方向，把命令的正确或者输出结果输出到指定的文件中</p></li><li><p>正确输出和错误输出同时保存进一个文件中：</p><p>以覆盖的方式：命令 &gt; 文件 2&gt;&amp;1     或者      命令 &amp;&gt;文件</p><p>以追加的方式：命令 &gt;&gt; 文件 2&gt;&amp;1     或者      命令 &amp;&gt;&gt;文件</p><p>把正确的输出保存进文件1，错误的输出保存进文件2：命令 &gt;&gt;文件1 2&gt;&gt;文件2</p></li><li><p><strong>输入重定向：</strong>wc，后面既可以直接加文件名，也可以将输入重定向作为输入，不过后者在结果中不会显示文件名，因为它指挥识别输入的文件内容流</p><p>wc -c：统计字节数</p><p>wc -w：统计单词数</p><p>wc -l：统计行数</p></li></ul><h2 id="多命令顺序执行-amp-管道符"><a href="#多命令顺序执行-amp-管道符" class="headerlink" title="多命令顺序执行&amp;管道符"></a>多命令顺序执行&amp;管道符</h2><ul><li><p>多命令顺序执行</p><ul><li>分号：两个命令都会执行</li><li>&amp;&amp;：命令1正确执行，命令2才会执行</li><li>||：命令1错误执行，命令2才会执行</li></ul></li><li><p>dd命令：磁盘复制命令，和cp命令不同，dd可以复制特殊文件，分区甚至整个硬盘。主要的作用就是磁盘复制</p><p>dd if=输入文件 of=输出文件 bs=多少字节数作为一个块 count=块的个数</p><p><code>date;dd if=/dev/zero of=/root/testfile bs=1k count=100000;date</code>用来显示磁盘复制的时间</p></li><li><p><code>命令 &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</code>：用来判断命令是否正确执行</p></li><li><p>管道符：命令1的<strong>正确输出</strong>作为命令2的操作对象</p></li><li><p>grep命令：在文件中搜索符合条件的字符串</p><p>grep -i：忽略大小写</p><p>grep -n：输出行号</p><p>grep -v：反向查找</p><p>grep –color=auto：搜索出的关键字用颜色显示</p><p>netstat -an | grep ESTABLISHED</p></li></ul><h2 id="通配符-amp-其他特殊符号"><a href="#通配符-amp-其他特殊符号" class="headerlink" title="通配符&amp;其他特殊符号"></a>通配符&amp;其他特殊符号</h2><ul><li><p>?：匹配一个任意字符</p></li><li><p>*：匹配任何内容（0个或任意多个字符）</p></li><li><p>[]：匹配中括号中的任意一个</p></li><li><p>[-]：匹配中括号中范围内任意一个</p></li><li><p>[^]：逻辑非，表示匹配任意一个不是中括号内的一个字符<code>[^0-9]</code>表示任意一个不是数字的字符</p></li><li><p><strong>通配符是用来匹配文件名的，</strong>通配符通常会用来删除指定范围的文件</p></li><li><p><strong>单引号</strong>中的所有符号都是符号，<strong>双引号</strong>中的符号可能会有特殊意义</p><p><code>echo &quot;$SHELL&quot;</code>和<code>echo &#39;$SHELL&#39;</code></p></li><li><p><strong>反引号</strong>和<code>$()</code>中的内容时系统命令</p><p><code>echo &quot;$(ls)&quot;</code>和<code>echo &#39;$(ls)&#39;</code></p></li><li><p><code>#</code>开头时注释</p></li><li><p><code>$</code>用来调用变量</p></li><li><p><code>\</code>用来将特殊符号变成普通符号</p></li></ul><h1 id="Bash的变量"><a href="#Bash的变量" class="headerlink" title="Bash的变量"></a>Bash的变量</h1><h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><ul><li><p>变量名不能用数字开头</p></li><li><p>bash中，变量的默认类型都是字符串型，如果要进行数值运算，需要指定变量类型为数值型</p></li><li><p>变量用单号连接，两侧不能空格，变量名若有空格，需要引号</p></li><li><p>变量值中可以用转义符\让特殊字符失去特殊含义</p></li><li><p>变量值可以进行叠加</p></li><li><p>环境变量名建议大写</p></li><li><p>变量分类：</p><ul><li>用户自定义变量</li><li>环境变量</li><li>位置参数变量</li><li>预定义变量</li></ul></li><li><p><strong>用户自定义变量（本地变量）</strong></p><p>name=”jack”    可以叠加：<code>newname=&quot;$name&quot;yang</code> 或者 <code>newname=$&#123;name&#125;yang</code></p></li><li><p>set：查看系统中所有的变量</p></li><li><p>unset 变量名：删除变量</p></li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li><p>本地变量只在当前的shell中生效</p></li><li><p>环境变量会在当前和这个shell的所有子shell中生效，如果把环境变量写入相关的文件，那么这个环境变量会在所有的shell中生效</p></li><li><p>用<code>pstree</code>可以查看shell的父子关系</p></li><li><p><code>export 变量名</code>：申明普通变量为环境变量</p></li><li><p><code>env</code>：专门查看环境变量</p></li><li><p>系统环境变量：</p><ul><li>PATH：查找系统命令的变量，tab键补全和外部命令的查找都是根据$PATH来的，可以用变量叠加的方式把自己的命令加到$PATH中，<code>PATH=&quot;$PATH&quot;:/root/test.sh</code></li><li>PS1：定义系统提示符的变量，<code>echo $PS1</code>    然后用，<code>PS1=’格式‘</code>来自定义命令提示符</li></ul></li></ul><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><h2 id="位置参数变量-1"><a href="#位置参数变量-1" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><ul><li>$n：$0表示命令本身，之后就是命令行参数</li><li>$*：所有参数，把所有参数当作一个整体</li><li>$@：所有参数，把参数区别对待</li><li>$#：所有参数的个数</li></ul><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><ul><li><p>$?：返回上一次执行结果正确与否</p></li><li><p>$$：当前进程的PID</p></li><li><p>$!：后台运行的最后一个进程的PID</p></li><li><p>接受键盘输入：read [选项] [变量名]</p><p>-p “提示信息”：</p><p>-t 秒数：限定时间</p><p>-n 字符数：限定字符数</p><p>-s：隐藏输入的信息，适用于输入密码时</p></li></ul><h1 id="Bash的运算"><a href="#Bash的运算" class="headerlink" title="Bash的运算"></a>Bash的运算</h1><h2 id="数值运算与运算符"><a href="#数值运算与运算符" class="headerlink" title="数值运算与运算符"></a>数值运算与运算符</h2><ul><li><p>Linux中变量默认类型时字符串</p></li><li><p><code>declare [+/-][选项] 变量名</code></p><p>-：给变量设定类型属性，例子：-i：将变量声明为整数类型；-x：将变量声明为环境变量</p><p>+：取消变量的类型属性</p><p>-p：显示指定变量的被声明的类型</p></li><li><p><strong>For Example:（四种计算格式，最常用的是第三种）</strong></p><p><code>declare -i cc=$aa+$bb</code></p><p><code>cc=$(expr $aa + $bb)</code></p><p><code>cc=$(($aa+$bb))</code></p><p><code>cc=$[$aa+$bb]</code></p></li></ul><h2 id="变量测试与内容替换"><a href="#变量测试与内容替换" class="headerlink" title="变量测试与内容替换"></a>变量测试与内容替换</h2><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8CXvrt.png" style="zoom: 80%;" /><h1 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h1><h2 id="环境变量配置文件简介"><a href="#环境变量配置文件简介" class="headerlink" title="环境变量配置文件简介"></a>环境变量配置文件简介</h2><ul><li><p><code>source 配置文件</code>或者<code>. 配置文件</code>：让修改后的配置文件直接生效</p></li><li><p>环境变量配置文件中主要就是定义对系统的操作环境生效的系统默认环境变量，比如PATH，HISTSIZE，PS1，HOSTNAME等</p></li><li><p>主要的5个配置文件</p><p><code>/etc/profile</code>：针对所有用户</p><p><code>/etc/profile.d/*.sh</code>：针对所有用户</p><p><code>~/.bash_profile</code>：针对单个用户</p><p><code>~/.bashrc</code>：针对单个用户</p><p><code>/etc/bashrc</code>：针对所有用户</p></li></ul><h2 id="环境变量配置文件作用"><a href="#环境变量配置文件作用" class="headerlink" title="环境变量配置文件作用"></a>环境变量配置文件作用</h2><ul><li><strong>环境变量配置文件调用的顺序：</strong></li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/8PpCge.png" style="zoom: 67%;" /><ul><li><p><code>/etc/profile</code>：针对所有用户</p><p>USER变量<br>LOGNAME变量<br>MAIL变量<br>PATH变量<br>HOSTNAME变量<br>HISTNAME变量<br>HISTSIZE变量<br>umask<br>调用/etc/profile.d/*.sh文件</p></li><li><p><code>/etc/profile.d/*.sh</code>：针对所有用户</p><p>执行profile.d目录下所有sh文件</p></li><li><p><code>~/.bash_profile</code>：针对单个用户</p><p>追加PATH：在PATH变量后面加上了<code>:$HOME/bin</code>这个目录</p><p>调用~/.bashrc</p></li><li><p><code>~/.bashrc</code>：针对单个用户</p><p>定义别名</p></li><li><p><code>/etc/bashrc</code>：针对所有用户</p><p>定义别名和PS1</p><p>会重复调用PATH，umask啥的，但是只针对no login shell的情况，就是直接敲sh进入一个shell的情况</p></li></ul><h2 id="其他配置文件和登录信息"><a href="#其他配置文件和登录信息" class="headerlink" title="其他配置文件和登录信息"></a>其他配置文件和登录信息</h2><ul><li><p>注销时的配置文件：~/.bash_logout</p></li><li><p>历史命令的保存文件：~/.bash_history</p></li><li><p>登录信息：</p><p>本地终端欢迎信息：/etc/issue</p><p>远程终端欢迎信息：/etc/issue.net</p><ul><li>转义符在该文件中不能使用，只能纯文本登录</li><li>是否生效由ssh的配置文件<code>/etc/ssh/sshd/config</code>决定，要加入<code>Banner /etc/issue.net</code>，重启ssh服务生效：<code>service sshd restart</code></li></ul></li><li><p>登陆后的欢迎信息：/etc/motd（本地和远程都适用）</p><p>推荐特效字符定制网站<a href="http://network-science.de/ascii/">ASCII Generator</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的文件系统管理</title>
      <link href="/2020/03/06/linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/06/linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="分区和系统文件"><a href="#分区和系统文件" class="headerlink" title="分区和系统文件"></a>分区和系统文件</h1><ul><li>对于硬盘分区形式是<strong>MBR</strong>的，主分区+扩展分区&lt;=4个。如果是IDE硬盘，Linux最多支持59个逻辑分区；如果是SCSI硬盘，Linux最多支持11个逻辑分区</li><li>对于<strong>GPT</strong>分区形式而言，没有上述限制</li><li>Windows文件系统为FAT16、FAT32、FAT64和NTFS。而Linux的文件系统可分为ext2、ext3、ext4、swap和vfat。</li><li>格式化的目的就是写入文件系统</li></ul><h1 id="文件系统常用命令"><a href="#文件系统常用命令" class="headerlink" title="文件系统常用命令"></a>文件系统常用命令</h1><h2 id="df命令，du命令，fsck命令，dumpe2fs命令"><a href="#df命令，du命令，fsck命令，dumpe2fs命令" class="headerlink" title="df命令，du命令，fsck命令，dumpe2fs命令"></a>df命令，du命令，fsck命令，dumpe2fs命令</h2><ul><li><code>df -a -h</code>：显示所有分区&amp;人性化显示。(一般用来统计系统空间大小)</li><li><code>du -a -h -s</code>：弥补ls命令的不足，可以统计文件夹包括里面的内容的大小而不是单单文件夹的大小。(一般用来统计文件大小)</li><li><strong>df和du的区别：</strong>du只是面向文件的，只会计算文件或目录占用的空间；df是从文件系统角度考虑的，不光要考虑文件占用的空间，还要统计被命令或程序占用的空间（最常见的就是文件已经删除但是程序并没有释放空间）</li><li><code>fsck -a -y 分区设备文件名</code>：文件系统修复命令，不需要自己手动执行</li><li><code>dumpe2fs 分区设备文件名</code>：显示ext2、ext3、ext4文件系统的超级块和块组信息</li></ul><h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><ul><li>将设备文件名和绑定到盘符(挂载点)上，Windows是自动，Linux默认是手动分配</li><li><code>mount -l</code>：查询异已挂载的设备，加-l会显示卷标名</li><li><code>mount -a</code>：依据配置文件<code>/etc/fstab</code>中的内容，自动挂载</li><li><code>mount [-t 文件系统]  [-L 卷标名] [-o 特殊选项] 设备文件名 挂载点</code> </li></ul><h2 id="挂载光盘和U盘"><a href="#挂载光盘和U盘" class="headerlink" title="挂载光盘和U盘"></a>挂载光盘和U盘</h2><ul><li><p>Linux中的分区时开机自动挂载，但是光盘和U盘时手动挂载，系统准备了/mnt/和/media/来挂载</p></li><li><p><strong>挂载光盘步骤：</strong>（sr0和cdrom都可以作为设备文件名）</p><p><code>mkdir /mnt/cdrom/</code>：建立挂载点</p><p><code>mount -t iso9660 /dev/cdrom /mnt/cdrom/</code>或者<code>mount /dev/sr0 /mnt/cdrom</code>：挂载</p><p><code>cd /mnt/cdrom/</code>：去挂载点访问</p><p><code>umount 设备文件名或挂载点</code>：在拿走光盘之前需要先卸载光盘</p></li><li><p><strong>挂载U盘步骤：</strong>（U盘的设备文件名是自动识别的，用<code>fdisk -l</code>查看）</p><p><code>mkdir /mnt/usb/</code>：建立挂载点</p><p><code>mount -t vfat /dev/sdb1 /mnt/usb/</code>：挂载</p><p><code>cd /mnt/usb/</code>：去挂载点访问</p><p><code>umount 设备文件名或挂载点</code>：在拔U盘之前需要先卸载光盘</p><p><strong>注意：挂载U盘只能用本机或者虚拟机，不能用远程工具</strong></p><p>​            <strong>Linux默认是不支持NTFS文件系统的外设的，U盘只能FAT格式的</strong></p></li></ul><h2 id="Linux如何支持NTFS文件系统"><a href="#Linux如何支持NTFS文件系统" class="headerlink" title="Linux如何支持NTFS文件系统"></a>Linux如何支持NTFS文件系统</h2><ul><li><p>Linux系统的内核中已经把市面上常见的驱动包括了，所以安装系统后一般不需要安装驱动，Linux会自动匹配识别，如果Linux默认没有把一个文件系统的驱动加载进来，我们就需要手动去安装驱动。</p></li><li><p>几种让Linux支持NTFS文件系统的方法：</p><ul><li>内核重新编译</li><li>第三方的插件：<a href="http://www.tuxera.com/community/ntfs-3g-download/">ntfd-3g</a></li></ul></li><li><p>内核编译太麻烦，太高端，一般选择“ntfd-3g插件”来实现</p></li><li><p>安装步骤：</p><p><code>tar -zxvf ntfs-3g_ntfsprogs-2013.1.13.tgz</code>：解压</p><p><code>cd ntfs-3g_ntfsprogs-2013.1.13</code>：进入解压目录`</p><p><code>./configure：</code>编译前准备</p><p><code>make</code>：编译</p><p><code>make install</code>：编译安装</p><p><code>mount -t ntfs-3g 设备文件名 挂载点</code>：挂载NTFS分区的硬盘</p></li></ul><h1 id="fdisk分区"><a href="#fdisk分区" class="headerlink" title="fdisk分区"></a>fdisk分区</h1><h2 id="fdisk命令分区过程"><a href="#fdisk命令分区过程" class="headerlink" title="fdisk命令分区过程"></a>fdisk命令分区过程</h2><ul><li><p>虚拟机添加新硬盘，并用<code>fdisk -l</code>查询新硬盘是否被识别</p></li><li><p>若已识别新硬盘/dev/sdb/，就开始为新硬盘分区，<code>fdisk /dev/sdb/</code>进入fdisk交互模式</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3LHags.png" style="zoom: 80%;" /></li><li><p>partprobe：分完区后必须执行这个命令，重新读取分区表信息</p></li><li><p>然后格式化分区：<code>mkfs -t ext4 /dev/sdb1</code>   <code>mkfs -t ext4 /dev/sdb5 </code></p></li><li><p>最后创建挂载点并挂载：<code>mkdir /disk1</code>     <code>mount /dev/sdb1 /disk1/</code>   <code>mkdir /disk5     </code> <code>mount /dev/sdb1 /disk5/</code>   </p></li><li><p>fdisk -l：查看，两个分区挂载完毕</p></li></ul><h2 id="分区自动挂载和-etc-fstab文件修复"><a href="#分区自动挂载和-etc-fstab文件修复" class="headerlink" title="分区自动挂载和/etc/fstab文件修复"></a>分区自动挂载和/etc/fstab文件修复</h2><ul><li><p>上面的mount命令挂载只能临时生效，每次重启都要手动挂载硬盘，要想永久生效，就要修改/etc/fstab配置文件的内容。</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3LXel4.png" style="zoom:80%;" /></li><li><p>添加了挂载信息后，执行mount -a，依据配置文件<code>/etc/fstab</code>中的内容，自动挂载</p></li><li><p>万一<code>/etc/fstab</code>文件写错了，会导致系统崩溃</p></li><li><p><strong>/etc/fstab文件修复</strong>：出错后按提示进入root操作界面，发现<code>/etc/fstab</code>文件是只读，执行<code>mount -o remount,rw /</code>，就可以修改<code>/etc/fstab</code>文件了，就可以修复了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux权限管理</title>
      <link href="/2020/03/06/linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/06/linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="ACL权限"><a href="#ACL权限" class="headerlink" title="ACL权限"></a>ACL权限</h1><h2 id="ACL权限的简介和开启方式"><a href="#ACL权限的简介和开启方式" class="headerlink" title="ACL权限的简介和开启方式"></a>ACL权限的简介和开启方式</h2><ul><li>任何一个文件在一个时刻只能有一个所有者和所属组</li><li>ACL权限用来解决文件的权限身份不够用的情况</li></ul><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3ba2E4.png" style="zoom:80%;" /><ul><li>ACL权限需要分区支持：dumpe2fs -h /dev/sda5/查看是否支持acl选项，如果不支持。可以临时开启：mount -o remount,acl/ 或者永久开启：vim /etc/fstab然后重启系统</li><li>ACL权限类似于windows的权限设置方法，就是不考虑user，group和others的权限设置，单独添加一个用户或者一个用户组对一个文件或者目录的权限</li></ul><h2 id="查看与设定ACL权限"><a href="#查看与设定ACL权限" class="headerlink" title="查看与设定ACL权限"></a>查看与设定ACL权限</h2><ul><li><p><code>getfacl 文件名</code>：查看ACL的权限</p></li><li><p><code>setfacl 选项 文件名</code></p><p><code>setfacl -m u/g/m:用户名/组名/不写:权限 文件名</code>：设定文件的ACL权限</p></li></ul><h2 id="最大有效权限与删除ACL权限"><a href="#最大有效权限与删除ACL权限" class="headerlink" title="最大有效权限与删除ACL权限"></a>最大有效权限与删除ACL权限</h2><ul><li>最大有效权限mask：可以通过<code>getfacl 文件名</code>来查看ACL的权限，里面有mask，可以通过控制mask的值来修改默认最大有效权限。</li><li>需要注意的是mask权限不会影响当前文件所有者，只会影响ACL权限和所属组的权限</li><li><code>setfacl -x u/g:用户名/组名 文件名</code>：删除文件指定的ACL权限</li><li><code>setfacl -b 文件名</code>：删除文件所有ACL权限</li></ul><h2 id="默认ACL和递归ACL权限（只能针对目录）"><a href="#默认ACL和递归ACL权限（只能针对目录）" class="headerlink" title="默认ACL和递归ACL权限（只能针对目录）"></a>默认ACL和递归ACL权限（只能针对目录）</h2><ul><li><p><code>setfacl -m d:u/g:用户名/组名:权限 文件名</code>：设定父目录的默认ACL权限，父目录里所有的新建文件都会继承父目录的ACL权限</p></li><li><p><code>setfacl -k</code>：删除父目录的默认ACL权限</p></li><li><p><code>setfacl -m -R ...</code>：递归设定文件夹的ACL权限</p></li></ul><h1 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h1><h2 id="SetUID：在所有者的x位置上变成了s"><a href="#SetUID：在所有者的x位置上变成了s" class="headerlink" title="SetUID：在所有者的x位置上变成了s"></a>SetUID：在所有者的x位置上变成了s</h2><ul><li><p><strong>四个条件缺一不可：</strong></p><p>只有<strong>二进制文件</strong>（例如命令和脚本文件）才能设定SUID权限</p><p>命令执行者必须对该程序<strong>有x权限</strong></p><p>命令执行者会在执行的时候获得该程序文件的<strong>属主身份</strong></p><p>SUID权限只在该程序执行<strong>过程中生效</strong>，也就是身份改变旨在程序执行过程中有效</p></li><li><p>passwd命令拥有SetUID权限，所以普通用户能修改自己密码</p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3b5zz6.png" style="zoom:80%;" /></li><li><p>我们通常会看到<strong>4777，2777，1777</strong>的权限标识，依次是加了<strong>SUID，SGID，SBIT</strong>权限</p></li><li><p>可以用<code>chmod</code>来赋予和删除SUID</p></li><li><p><strong>SetUID是非常危险的，一个命令只要有了s权限，例如passwd命令，普通用户就可以通过执行这个命令获得passwd的属主身份，也就是进入root权限。</strong></p></li></ul><h2 id="SetGID：在所属组的x位置上变成了s"><a href="#SetGID：在所属组的x位置上变成了s" class="headerlink" title="SetGID：在所属组的x位置上变成了s"></a>SetGID：在所属组的x位置上变成了s</h2><ul><li><p><strong>针对二进制文件，三个条件缺一不可：</strong></p><p>命令执行者必须对该程序<strong>有x权限</strong></p><p>命令执行者会在执行的时候获得该程序文件的<strong>所属组身份</strong></p><p>SUID权限只在该程序执行<strong>过程中生效</strong>，也就是所属组身份改变旨在程序执行过程中有效</p><p>注：例如/usr/bin/locate命令</p></li><li><p><strong>针对目录，三个条件缺一不可：</strong></p><p>普通用户必须对此目录<strong>拥有r和x权限</strong>，才能进入该目录</p><p>普通用户在此目录中的<strong>有效组会变成此目录的所著组</strong></p><p>若普通用户对此目录拥有<strong>w权限</strong>时，<strong>新建的文件的默认组不是文件自己的初始组，而是这个目录自己的所属组</strong></p></li><li><p>可以用<code>chmod</code>来赋予和删除SGID</p></li></ul><h2 id="Sticky-BIT-黏着位-：在其他人的x位置上变成了t"><a href="#Sticky-BIT-黏着位-：在其他人的x位置上变成了t" class="headerlink" title="Sticky BIT(黏着位)：在其他人的x位置上变成了t"></a>Sticky BIT(黏着位)：在其他人的x位置上变成了t</h2><ul><li><p><strong>四个条件缺一不可：</strong></p><p>只有目录才能设定SBIT权限</p><p><strong>普通用户</strong>必须对该目录<strong>有x和w权限</strong></p><p>有了SBIT，<strong>普通用户</strong>即使有目录的w权限，也不能删除其他用户建立的文件</p></li></ul><h2 id="需要注意的安全性："><a href="#需要注意的安全性：" class="headerlink" title="需要注意的安全性："></a>需要注意的安全性：</h2><ul><li><strong>需要定期对系统中含有SUID或者SGID权限的文件进行检查，如果有异常多出来的含有该权限的文件，如果多出来了，是一个极大的安全隐患，需要手工清除。</strong></li></ul><h1 id="文件系统属性chattr权限"><a href="#文件系统属性chattr权限" class="headerlink" title="文件系统属性chattr权限"></a>文件系统属性chattr权限</h1><ul><li><p><strong>chattr：</strong>change file attributes on a linux file system</p></li><li><p><code>chattr [+-=] [选项] 文件或目录名</code>：增加，减去，等于chattr权限</p><p>i选项：</p><p>​    1.对文件：不允许任何用户（包括root用户）对文件进行任何修改，只能读</p><p>​    2.对目录：任何用户（包括root用户）只能在目录下修改文件内容，但是不能删除和创建文件</p><p>a选项：</p><p>​    1.对文件：任何用户（包括root用户）只能对文件增加数据，但是不能删除和修改现有数据</p><p>​    2.对目录：任何用户（包括root用户）只能在目录中建立和修改文件里的内容，但是不能删除文件</p></li><li><p>查看文件系统属性：lsattr</p><p>lsattr 选项 文件名</p><p>​    -a选项：显示所有文件和目录</p><p>​    -d选项：若文件时目录，仅列出目录自己的属性</p></li></ul><h1 id="系统命令sudo权限"><a href="#系统命令sudo权限" class="headerlink" title="系统命令sudo权限"></a>系统命令sudo权限</h1><ul><li><p>之前学的是对文件的操作权限，sudo是对系统命令的权限。sudo权限是root把本来只能超级用户执行的命令赋予普通用户的执行</p></li><li><p>root权限先执行命令visudo命令修改/etc/sudoers文件</p><p>在这一行<code>root   ALL=(ALL)    ALL</code>下面添加例如：</p><p>​               <code> jack   ALL=/sbin/shutdown -r now</code>：授权jack能重启服务器的权限</p></li><li><p>然后相应用户或者用户组用<code>sudo -l</code>查看自己能用那些sudo命令，然后<code>sudo 命令</code>执行</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中的用户管理</title>
      <link href="/2020/03/05/linux%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/05/linux%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h1><ul><li><p>越是安全性要求高的服务器越需要对用户权限等级制度和服务器操作规范有很高的要求，linux中主要通过用户配置文件来查看和修改用户信息</p></li><li><p>主要有四个配置文件：/etc/passwd，/etc/shadow，/etc/group，/etc/gshadow</p></li></ul><h2 id="etc-passwd：用户信息文件"><a href="#etc-passwd：用户信息文件" class="headerlink" title="/etc/passwd：用户信息文件"></a>/etc/passwd：用户信息文件</h2><ul><li><strong>格式：</strong>用户名称<strong>；</strong>密码标志<strong>；</strong>UID（0超级用户，1—499系统用户:不能登录，不能删除，500—65535普通用户）<strong>；</strong>GID（这里是初始组ID不是附加组ID）<strong>；</strong>用户说明:备注<strong>；</strong>家目录<strong>；</strong>Shell（命令解释器类型，默认是bash）</li></ul><h2 id="etc-shadow：影子文件"><a href="#etc-shadow：影子文件" class="headerlink" title="/etc/shadow：影子文件"></a>/etc/shadow：影子文件</h2><ul><li><p>是passwd的影子</p></li><li><p><strong>格式：</strong>用户名称<strong>；</strong>加密密码（SHA512加密，可以暴力破解，!!和*表示没有密码，不能登录）<strong>；</strong>密码最后一此修改时间（时间戳表示）<strong>；</strong>两次密码修改间隔（天）<strong>；</strong>密码时效天数（-1永不失效）<strong>；</strong>密码修改到期前的警告天数<strong>；</strong>密码到期后的宽限天数<strong>；</strong>账号失效时间（时间戳表示）<strong>；</strong>包留位</p></li><li><p><strong>时间戳换算</strong>：</p><p>时间戳—&gt;日期：<code>date -d &quot;1970-01-01 16066 days&quot;</code></p><p>日期—&gt;时间戳：<code>echo$(($(date --date=&quot;2014/01/06&quot; +%s)/86400+1))</code></p></li></ul><h2 id="etc-group-amp-etc-gshadow：组信息文件-amp-组密码文件"><a href="#etc-group-amp-etc-gshadow：组信息文件-amp-组密码文件" class="headerlink" title="/etc/group&amp;/etc/gshadow：组信息文件&amp;组密码文件"></a>/etc/group&amp;/etc/gshadow：组信息文件&amp;组密码文件</h2><ul><li><strong>/etc/group格式：</strong>组名，组密码标志，GID，组中附加用户 </li><li><strong>/etc/gshadow格式：</strong>组名，组密码(默认没有，也不推荐使用)，组管理员用户名，组中附加用户</li><li>Linux中查看用户的初始组的方法：查询<code>etc/passwd</code>和<code>/etc/group</code>，两两对照查看</li></ul><h1 id="用户管理相关文件"><a href="#用户管理相关文件" class="headerlink" title="用户管理相关文件"></a>用户管理相关文件</h1><ul><li><p>用户的家目录：（会自动生成）</p><p><code>/home/用户名/</code>：权限700</p><p><code>/root/</code>：权限550</p></li><li><p>用户的邮箱：</p><p><code>/var/spool/mail/用户名/</code></p></li><li><p>用户模板目录：就是母板，新建用户会默认创建在用户家目录下</p><p><code>/etc/skel/</code></p></li></ul><h1 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h1><h2 id="useradd：创建用户"><a href="#useradd：创建用户" class="headerlink" title="useradd：创建用户"></a>useradd：创建用户</h2><ul><li>useradd 用户名        passwd 用户名</li><li>新建一个用户实际上就是在上述六个地方生成了默认信息，所以手工修改上述六个地方就可以手工添加用户</li><li><code>useradd -u UID</code>：指定自定义UID</li><li><code>useradd -d 家目录</code>：指定自定义家目录</li><li><code>useradd -c 用户说明</code>：指定自定义用户说明</li><li><code>useradd -g 组名</code>：指定自定义初始组组名</li><li><code>useradd -G 组名1,组名2</code>：指定自定义附加组组名</li><li><code>useradd -s shell</code>：指定自定义shell</li><li>用户<strong>默认值配置</strong>文件：<code>/etc/default/useradd</code> &amp; <code>/etc/login.defs</code> </li></ul><h2 id="passwd：修改用户密码"><a href="#passwd：修改用户密码" class="headerlink" title="passwd：修改用户密码"></a>passwd：修改用户密码</h2><p>超级用户可以改任意用户密码</p><p>普通用户只能给自己设密码</p><ul><li><p><code>whoami</code>：查看当前用户</p></li><li><p><code>passwd -S 用户名</code> ：查看密码状态，就是shadow里面的信息</p></li><li><p><code>passwd -l 用户名</code> ：锁定用户，实际是在shadow中的密码前面加了!</p></li><li><p><code>passwd -u 用户名</code> ：解锁用户</p></li><li><p><code>passwd --stdin 用户名</code> ：使用字符串作为用户密码，例如：<code>echo &quot;123&quot; | passwd --stdin 用户名</code></p></li></ul><h2 id="usermod：修改用户信息"><a href="#usermod：修改用户信息" class="headerlink" title="usermod：修改用户信息"></a>usermod：修改用户信息</h2><ul><li><code>usermod -u UID</code>：修改UID</li><li><code>usermod -c 用户说明</code>：修改用户说明</li><li><code>usermod -G 组名1,组名2</code>：修改附加组</li><li><code>usermod -g 组名</code>：修改初始组<strong>（不推荐）</strong></li><li><code>usermod -L</code>：锁定用户</li><li><code>usermod -U</code>：解锁用户</li></ul><h2 id="chage：修改用户密码状态"><a href="#chage：修改用户密码状态" class="headerlink" title="chage：修改用户密码状态"></a>chage：修改用户密码状态</h2><ul><li><p><code>chage -l</code>：查询密码详细状态</p></li><li><p><code>chage -d 日期</code>：修改密码最后一次更改日期</p></li><li><p><code>chage -m 天数</code>：修改两次密码修改间隔</p></li><li><p><code>chage -M 天数</code>：修改密码有效期</p></li><li><p><code>chage -W 天数</code>：修改密码过期前警告天数</p></li><li><p><code>chage -I 天数</code>：修改宽限天数</p></li><li><p><code>chage -E 日期</code>：修改账号失效时间</p><p>注意：实际是对shadow文件里面的信息进行修改，<code>chage -d 0 用户名</code>使用最多，把用户的修改密码时间归零，强制用户第一次登陆系统必须修改密码</p></li></ul><h2 id="userdel：删除用户"><a href="#userdel：删除用户" class="headerlink" title="userdel：删除用户"></a>userdel：删除用户</h2><ul><li><p><code>userdel -r 用户名</code>：删除用户的同时删掉家目录</p></li><li><p>不推荐手工创建用户，但是可以手工删除用户：</p><blockquote><p><code>etc/passwd</code></p><p><code>etc/shadow</code></p><p><code>etc/group</code></p><p><code>etc/gshadow</code></p><p><code>var/spool/mail/用户名</code></p><p><code>/home/用户名/</code></p></blockquote><p>手工把上面6个位置和要删除的用户的信息删除就可以了</p></li></ul><h2 id="id：查询用户uid，gid和附加组"><a href="#id：查询用户uid，gid和附加组" class="headerlink" title="id：查询用户uid，gid和附加组"></a>id：查询用户uid，gid和附加组</h2><h2 id="su：用户切换"><a href="#su：用户切换" class="headerlink" title="su：用户切换"></a>su：用户切换</h2><ul><li><code>su - 用户名</code> ：连带用户的环境变量一起切换，中间减号绝对不能省去，省去就不会切换环境变量</li><li><code>su -root -c 命令名</code>：不切换root，只是执行root权限才能执行的命令</li></ul><h1 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h1><h2 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h2><ul><li><code>groupadd 组名</code></li></ul><h2 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h2><ul><li><code>groupmod -g 新组id 旧组id</code></li><li><code>groupmod -n 新组名 旧组名</code></li></ul><h2 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h2><ul><li><code>groupdel 组名</code>：要想删除一个组，这个组中不允许有初始用户存在</li></ul><h2 id="gpasswd：把用户添入组或者从组中删除"><a href="#gpasswd：把用户添入组或者从组中删除" class="headerlink" title="gpasswd：把用户添入组或者从组中删除"></a>gpasswd：把用户添入组或者从组中删除</h2><ul><li><p><code>gpasswd -a 用户名</code>：把用户加入组</p></li><li><p><code>gpasswd -d 用户名</code>：把用户从组中删除</p><p>注：也可以直接在<code>/etc/group</code>文件里添加附加组(不推荐改初始组)</p></li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>Linux中用户和用户组的关系是：</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/3bN9rF.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux软件包管理</title>
      <link href="/2020/03/05/linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/05/linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="软件包管理简介"><a href="#软件包管理简介" class="headerlink" title="软件包管理简介"></a>软件包管理简介</h1><p>​    <strong>软件包分类：</strong></p><ul><li>源码包：包括脚本安装包</li><li>二进制包：RPM包，系统默认包（ubuntu中是deb包）</li><li><strong>源码包的优点</strong><ul><li>开源</li><li>可以自由选择所需的功能</li><li>软件是便宜安装，所以更加是个自己的系统，更加稳定也效率更高</li><li>卸载方便（直接把目录删除）</li></ul></li><li><strong>源码包的缺点</strong><ul><li>安装步骤多</li><li>编译并安装时间过长</li><li>因为是编译安装，安装过程中一旦报错新手很难解决</li></ul></li><li><strong>RPM包优点</strong><ul><li>包管理系统简单，只需要几个命令就可以实现软件包的安装，升级，查询和卸载</li><li>安装速度比源码包快很多</li></ul></li><li><strong>RPM包缺点</strong><ul><li>不能看见原代码</li><li>功能选择不如源码包灵活</li><li>依赖性</li></ul></li></ul><h1 id="RPM包管理—rpm命令管理"><a href="#RPM包管理—rpm命令管理" class="headerlink" title="RPM包管理—rpm命令管理"></a>RPM包管理—rpm命令管理</h1><ul><li><p>RPM包名和包全名</p></li><li><p>RPM包的依赖性：树形依赖，环形依赖，模块依赖(以.iso.数组结束的就是模块依赖，也叫库文件依赖<a href="www.rpmfind.net">模块依赖查询网站</a>)</p></li><li><p>安装和升级使用包全名，卸载和查询使用包名（在/var/lib/rpm/中的数据库总搜索）</p></li><li><p>RPM安装：<code>rpm -ivh 包全名</code></p></li><li><p>RPM升级：<code>rpm -Uvh 包全名</code></p></li><li><p>RPM卸载：<code>rpm -e 包名</code>,也要考虑依赖性，当有包被依赖时，此时这个包不能删掉</p></li><li><p>RPM查询包：<code>rpm -q 包名</code>   <code>rpm -qa</code>：所有安装的包</p></li><li><p>RPM查询包详细信息：<code>rpm -qi 包名</code></p></li><li><p>RPM查询未安装包的详细信息：<code>rpm -qip 包全名</code></p></li><li><p>RPM查询文件安装位置：<code>rpm -ql 包名</code></p></li><li><p>RPM查询未安装包的文件安装的默认位置：<code>rpm -qlp 包名</code></p></li><li><p>RPM查询系统文件属于哪个rpm包：<code>rpm -qf 系统文件名</code></p></li><li><p>RPM查询软件包的依赖性：<code>rpm -qR 包名</code></p></li><li><p>RPM查询未安装软件包的依赖性：<code>rpm -qRp 包全名</code></p></li><li><p>RPM包校验：<code>rpm -V 包名</code></p></li><li><p>RPM包中文件提取（用来修复系统）：</p><ul><li><p>第一步：rpm2cpio 包全名</p></li><li><p>第二布：cpio -idv . 包中的文件绝对路径</p></li></ul></li></ul><h1 id="RPM包管理—yum在线管理"><a href="#RPM包管理—yum在线管理" class="headerlink" title="RPM包管理—yum在线管理"></a>RPM包管理—yum在线管理</h1><ul><li><p>既可以用在线yum源文件服务器，也可以用本地光盘作为yum源文件服务器。</p></li><li><p>会自动解决依赖性问题</p></li><li><p>更换yum源：保存在<code>/etc/yum.repos.d/</code>目录下</p></li><li><p><code>yum list</code>：</p></li><li><p><code>yum search</code> 包名：搜索</p></li><li><p><code>yum -y install</code> 包名：安装</p></li><li><p><code>yum -y update包名</code>：<code>yum -y update</code>直接升级全部，慎用</p></li><li><p><code>yum -y remove包名</code>：卸载，会卸载所有依赖的包</p><p>注：linux服务器应该采用最小化安装的原则，用什么装什么，装完了最好不要用yum卸载，也不要随便升级。</p></li><li><p>yum的软件组管理：</p><p><code>yum grouplist</code>：</p><p><code>yum groupinstall 软件包组名</code>：</p><p><code>yum groupremove软件包组名</code>：</p></li><li><p>用光盘做yum源：修改<code>/etc/yum.repos.d/</code>下的media配置文件，该源为关盘挂载点，注意：配置文件的格式要求很严格，注释应该顶头写。</p></li></ul><h1 id="源码包管理"><a href="#源码包管理" class="headerlink" title="源码包管理"></a>源码包管理</h1><ul><li><p>区别：</p><p>安装前的区别：概念上的区别，见上述</p><p>安装后的区别：安装位置的区别</p></li><li><p>RPM包（一个软件）的默认安装位置：</p><p><code>/etc/</code>：配置文件</p><p><code>/usr/bin/</code>：可执行的命令</p><p><code>/usr/lib/</code>：程序所使用的函数库</p><p><code>/usr/share/doc/</code>：基本的软件使用手册</p><p><code>/usr/share/man/</code>：版主文档</p><p><code>/var/www/html/</code>：服务器类软件的默认网页位置</p></li><li><p>源码包的安装位置：</p><p>需要手动指定安装目录：一般推荐<code>/usr/local/软件名/</code></p></li><li><p>RPM包和源码包安装软件带来的影响：<strong>启动服务的方式不同</strong></p><p>RPM包在<code>/etc/rc.d/init.d/</code>下有执行文件，采用两种方式启动：For Example:</p><ul><li><code>/etc/rc.d/init.d/httpd start</code></li><li><code>service httpd start</code></li></ul><p>但是源码包的服务启动方式不能用系统服务管理命令例如service来管理。只能在<code>/usr/local/软件名/bin/执行软件吗 start</code> 目录下启动服务</p></li><li><p>Apache源码包的具体安装步骤：</p><ol><li><p>安装C语言编译器：gcc</p></li><li><p>下载apache的源码包：<a href="http://mirror.bit.edu.cn/apache/httpd/">path</a></p></li><li><p>确认源码保存位置<code>/usr/local/src/</code></p></li><li><p>确认软件安装位置：<code>/usr/local/</code></p></li><li><p>确认安装过程报错</p><p>安装过程停止并出现error，warning，no等提示语言</p></li><li><p>解压缩下载的源码包：<code>tar -zxvf 源码包名</code></p></li><li><p>进入解压缩目录：INSTALL和README时安装说明和使用说明</p></li><li><p>执行<code>./configure --prefix=默认安装目录</code>：编译前准备</p><ul><li>定义需要的功能选项</li><li>检测系统环境是否符合安装要求</li><li>把定义好的的功能选项和检测系统环境的信息都写入makefile文件，用于后续的编译</li></ul></li><li><p>执行<code>make</code>：编译</p></li><li><p>如果前两步报错，执行<code>make clean</code>，清空过程中生成的临时文件。</p></li><li><p>执行<code>make install</code>：安装</p></li><li><p>删除源码包安装的软件：直接<code>rm -rf /usr/local/软件名/</code></p></li></ol></li></ul><h1 id="脚本安装包与软件包管理"><a href="#脚本安装包与软件包管理" class="headerlink" title="脚本安装包与软件包管理"></a>脚本安装包与软件包管理</h1><ul><li>脚本安装包不是独立的软件包类型，常见安装的是源码包</li><li>人为包安装过程写成额自动安装的脚本，只要执行脚本，定义简单的参数，就可以完成安装</li><li>非常类似于windows下软件的安装方式</li><li><strong>Webmin</strong>是一个基于Web的Linux系统管理界面，可以通过图形化的方式设置用户账号、Apache、DNS、文件共享等服务。<a href="http://sourceforge.net/projects/webadmin/files/webmin/">下载软件</a>，下载后解压缩，并进入解压缩目录，执行.sh安装脚本,最后登录ip地址的自己配置的端口号进入该网站即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的文本编辑器:Vim</title>
      <link href="/2020/03/05/%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8-Vim/"/>
      <url>/2020/03/05/%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8-Vim/</url>
      
        <content type="html"><![CDATA[<ul><li>Vim是linux中的一款使用最广的文本编辑器，全屏幕编辑器。</li><li>可以建立，编辑，显示文本文件。</li><li>它没有菜单只有命令.</li></ul><h2 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h2><ul><li><p>命令模式</p></li><li><p>插入模式：后：a/A，前：i/I，行：o/O进入</p></li><li><p>退出模式</p></li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">:set ic————搜索时不区分大小写</span><br><span class="line">:set nu————显示行号</span><br><span class="line">:set nonu————关闭行号</span><br><span class="line">:gg————快速定位到第一行</span><br><span class="line">:G————快速定位到最后一行</span><br><span class="line">:nG————快速定位到第n行</span><br><span class="line">:n————快速定位到第n行</span><br><span class="line">$————快速定位到行尾</span><br><span class="line">0————快速定位到行首</span><br><span class="line">x————删除光标后字符</span><br><span class="line">X————删除光标前字符</span><br><span class="line">4x————删除光标后n个字符</span><br><span class="line">dd————删除一行</span><br><span class="line">4dd————删除当前行和下面的n-1行</span><br><span class="line">dG————删除当前行到文件末尾</span><br><span class="line">D————删除光标到行尾</span><br><span class="line">:1,8d————删除第1行到第8行</span><br><span class="line">yy————复制当前行</span><br><span class="line">nyy————复制当前行和下面的n-1行</span><br><span class="line">p————粘贴到光标下一行</span><br><span class="line">P————粘贴到光标上一行</span><br><span class="line">r————替换当前字符</span><br><span class="line">R————从当前位置一直往后替换（进入替换模式，esc退出模式）</span><br><span class="line">u————恢复</span><br><span class="line">ctrl+r————撤销恢复</span><br><span class="line">:/string————搜索命令，按n找下一个</span><br><span class="line">:%s/old/new/g————全文替换old为new</span><br><span class="line">:n1,n2s/old/new/g————n1到n2行替换old为new</span><br><span class="line">:w————保存（相当于Windows的ctrl+r）</span><br><span class="line">:w filename————另存为</span><br><span class="line">:wq————保存并退出</span><br><span class="line">ZZ————保存并退出</span><br><span class="line">:q!————不保存退出</span><br><span class="line">:wq!————强制保存退出，针对只读文件可以强行保存(只有文件所有者和root才可以)</span><br></pre></td></tr></table></figure><ul><li><p>查看命令的执行结果：</p><p><code>:!命令</code></p></li><li><p>导入内容到文件中：</p><p><code>:r 导入文件地址：导入文件内容</code></p><p><code>:r !命令：导入命令执行结果</code></p></li><li><p>查看命令的地址：</p><p><code>:!which 命令名</code></p></li><li><p>定义快捷键：</p><p><code>:map 快捷键 触发命令</code></p></li><li><p>关键词自动替换</p><p><code>:ab mymail XXXXXXX@gmail.com</code>：输入mymail是自动替换为你的邮箱地址</p></li></ul><p>所有配置都是临时的，要永久需要写入配置文件里，存放在用户的家目录下，<code>.vimrc</code>，如果没有的话就自己新建一个也ok</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2020/03/04/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/04/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>Linux作为一个网络操作系统，命令行才是王道，而不是图形。</strong></li><li><strong>Linux系统管理的命令是它正常运行的核心，与之前的DOS命令类似。</strong></li><li><strong>linux命令在系统中有两种类型：内置Shell命令和Linux命令</strong></li></ul><h1 id="linux各目录的作用"><a href="#linux各目录的作用" class="headerlink" title="linux各目录的作用"></a>linux各目录的作用</h1><ul><li><p><code>/bin/</code>：存放系统命令</p></li><li><p><code>/sbin/</code>：存放系统目录，只有超级用户能用</p></li><li><p><code>/usr/bin/</code>：存放系统命令，单用户模式不能执行</p></li><li><p><code>/usr/sbin/</code> ：存放系统命令，只有超级用户能用，单用户模式不能执行</p></li><li><p><code>/boot/</code> ：系统启动目录，内核和启动引导程序</p></li><li><p><code>/dev/</code> ：硬件设备文件目录</p></li><li><p><code>/etc/</code> ：linux默认的配置文件保存目录</p></li><li><p><code>/home/</code>：普通用户家目录</p></li><li><p><code>/root/</code>：超级用户家目录</p></li><li><p><code>/lib/</code>：系统调用的函数库</p></li><li><p><code>/lost+found/</code>：当系统意外崩溃时，每个分区都含有的存放的文件碎片用来修复</p></li><li><p><code>/media/</code>：挂载目录，挂载媒体设备</p></li><li><p><code>/mnt/</code>：挂载目录，挂载U盘，移动硬盘，和其他操作系统的分区</p></li><li><p><code>/misc/</code>：挂载目录，挂载NFS服务的共享目录</p></li><li><p><code>/opt/</code>：第三方安装的软件的保存目录，也可以放到/usr/local/下</p></li><li><p><code>/proc/</code>：存放在内存里面，存放系统的内核，进程，外部设备</p></li><li><p><code>/sys/</code>：存放在内存里面，存放系统的内核相关的东西</p></li><li><p><code>/srv/</code>：服务数据目录</p></li><li><p><code>/tmp/</code> ：临时目录，可以清空</p></li><li><p><code>/usr/</code>：系统资源目录</p></li><li><p><code>/var/</code>：动态资源保存目录，日志，邮件，数据库</p></li></ul><h1 id="服务器注意事项"><a href="#服务器注意事项" class="headerlink" title="服务器注意事项"></a>服务器注意事项</h1><ol><li>远程服务器不允许关机，只能重启</li><li>重启时应该关闭服务</li><li>不要在服务器访问高峰运行高负载命令</li><li>远程配置防火墙时不要把自己踢出服务器</li><li>指定合理的密码规范和定期更新</li><li>合理分配权限</li><li>定期备份重要数据和日志</li></ol><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li><code>ls -l</code>：查看文件所有属性</li><li><code>ls -d</code>：查看目录本身</li><li><code>ls -i</code>：查看文件的inode号</li><li><code>ls -h</code>：人性化显示</li><li><code>ls -s</code>：显示文件占用的块的数量</li><li><code>ls -a</code>：查看隐藏文件</li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul><li><code>mkdir -p</code>：递归创建目录</li></ul><h3 id="cd-amp-pwd"><a href="#cd-amp-pwd" class="headerlink" title="cd&amp;pwd"></a>cd&amp;pwd</h3><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul><li><p><code>cp -r</code>：复制目录</p></li><li><p><code>cp -p</code>：原文件和新文件属性完全一致</p><p>注：复制的同时可以改名</p></li></ul><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>​        注：移动的同时可以改名</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li><code>rm -r</code>：文件夹递归删除</li><li><code>rm -f</code>：强制删除，不询问</li></ul><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><h3 id="cat-amp-tac"><a href="#cat-amp-tac" class="headerlink" title="cat&amp;tac"></a>cat&amp;tac</h3><ul><li><code>cat -n</code>：显示行号，tac没有-n选项</li></ul><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>​        空格翻页，回车换行，q退出</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>​        空格翻页，回车换行，q退出，还可以pageup回翻页，上箭头网上翻一行，还可以搜索：/关        键词，再按n搜索下一个匹配的</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul><li><code>head -n</code>：指定看前几行，默认前10行</li></ul><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul><li><p><code>tail -n</code>：指定看后几行，默认后10行</p></li><li><p><code>tail -f</code>：动态看文件动态变化</p></li></ul><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><ul><li><p><code>ln -s</code>：生成软链接</p></li><li><p><code>ln</code>：生成硬链接，和cp -p的区别是硬链接文件和原文件可以同步更新，硬链接通过inode号来区分。和软连接的区别：1.硬链接不能跨分区   2.硬链接不能针对目录</p></li></ul><h2 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><ul><li><p><code>chmod [u/g/o/a] [+/-/=] [r/w/x]</code></p></li><li><p><code>chmod 三位数XXX</code>：r—4，w—2，x—1：举例：rwxr-xr-x：755</p></li><li><p><code>chmod -R</code>：递归修改目录及目录下的权限</p><p>注释：深入理解文件的wrx和目录的wrx的意义</p></li></ul><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><ul><li><code>chown [用户名]</code>：只有管理员root能执行</li></ul><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><ul><li><p><code>chgrp [组名]</code>：只有管理员root能执行</p><p><strong>注：每个文件都只有一个user和一个group，某些others拥有拥有共同的权限，这些others在一个组里，也就是group所属组。所属者user可以不在所属组group里面，并且一个用户可以在不同的组里。</strong> 相关的命令是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd YYY          //创建组</span><br><span class="line">useradd <span class="literal">-g</span> YYY XXX    //创建用户并将YYY设置为其主要组</span><br><span class="line">usermod <span class="literal">-g</span> ZZZ XXX    //修改用户XXX的主要组为ZZZ</span><br></pre></td></tr></table></figure></li></ul><h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><ul><li><p><code>umask -S</code>：人性化显示默认权限</p></li><li><p><code>umask</code>：显示掩码（非人性化）</p><p>注：Linux中，默认创建的文件是没有可执行权限的，所以文件是666，目录是777</p></li><li><p><code>umask 三位数</code>：修改掩码，使默认权限变化</p></li></ul><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h3 id="find：精准搜索"><a href="#find：精准搜索" class="headerlink" title="find：精准搜索"></a>find：精准搜索</h3><ul><li><p><code>find -name</code>：根据文件名搜索</p></li><li><p><code>find -iname</code>：根据文件名搜索，不区分大小写</p><p>注：通配符：*，？，[]，</p></li><li><p><code>find -size [+/-]</code>：+：大于，-：小于，只有数据块（0.5KB）个数：等于</p></li><li><p><code>find -user</code>：根据所有者查找</p></li><li><p><code>find -group</code>：根据所属组查找</p></li><li><p><code>find -amin [-/+]分钟数</code>：查找指定时间内或者超过该时间被修改过<strong>访问时间</strong>的文件</p></li><li><p><code>find -cmin [-/+]分钟数</code>：查找指定时间内或者超过该时间被修改过<strong>文件属性</strong>的文件</p></li><li><p><code>find -mmin [-/+]分钟数</code>：查找指定时间内或者超过该时间被修改过<strong>文件内容</strong>的文件</p></li><li><p>还可以在两个查找条件之间加上<code>-a</code> 或者<code>-o</code> ，一个是同时满足，一个是满足任意一个即可。或者<code>-exec/-ok 命令 &#123;&#125;\; </code> 对搜索结果执行操作</p></li><li><p><code>find -type</code>：根据文件类型查找</p></li><li><p><code>find -inum</code>：根据inode号查找</p></li></ul><h3 id="locate：模糊查找"><a href="#locate：模糊查找" class="headerlink" title="locate：模糊查找"></a>locate：模糊查找</h3><ul><li>系统里所有的文件都会定期收录到/var/lib/mlocate.db这个文件库里，locate就是在这个里去找，但是新的文件没别收录进去，所以就找不到，需要手动更新文件资料库<code>updatedb</code> （但是tmp目录下不收录进去）</li><li>locate -i：不区分大小写</li></ul><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><ul><li>which 命令名：查找命令的地址和别名alias</li></ul><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><ul><li>whereis 命令名：查找命令地址和其帮助文档的位置</li></ul><h3 id="grep：在文件里面查找"><a href="#grep：在文件里面查找" class="headerlink" title="grep：在文件里面查找"></a>grep：在文件里面查找</h3><ul><li>grep -i：不区分大小写，查找指定字串所在的行</li><li>grep -v：排除指定字串所在的行</li></ul><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man和info"><a href="#man和info" class="headerlink" title="man和info"></a>man和info</h3><ul><li>man 命令名/配置文件名：查看命令和配置文件的帮助信息，浏览和more操作一样</li><li>帮助类型里1是命令的帮助，5是配置文件的帮助</li><li>For Example：man 1 passwd，man 5 passwd</li></ul><h3 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h3><ul><li>更加简单的命令查询</li></ul><h3 id="apropos"><a href="#apropos" class="headerlink" title="apropos"></a>apropos</h3><ul><li>更加简单的配置文件查询</li></ul><h3 id="–help"><a href="#–help" class="headerlink" title="–help"></a>–help</h3><ul><li>命令 –help：得到信息更加简单</li></ul><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><ul><li>shell的<strong>内置命令</strong>的帮助</li></ul><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h3 id="useradd和passwd"><a href="#useradd和passwd" class="headerlink" title="useradd和passwd"></a>useradd和passwd</h3><ul><li>新建用户和修改密码</li></ul><h3 id="who和w"><a href="#who和w" class="headerlink" title="who和w"></a>who和w</h3><ul><li>查看当前登录用户名：tty是本地登录，pts表示远程登录</li></ul><h2 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h2><p>​    几种压缩格式</p><blockquote><p>.gz</p><p>.zip</p><p>.bz2</p></blockquote><h3 id="gzip和gunzip-gzip-d"><a href="#gzip和gunzip-gzip-d" class="headerlink" title="gzip和gunzip/gzip -d"></a>gzip和gunzip/gzip -d</h3><ul><li>只能压缩文件，不能压缩目录，并且不保留原文件</li></ul><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li><p>tar -c：打包</p></li><li><p>tar -x：解包</p></li><li><p>tar -v：显示详细信息</p></li><li><p>tar -f：指定文件名</p></li><li><p>tar -z：打包的同时压缩，或者解包的时候解压缩,适用于压缩解压gz</p></li><li><p>tar -j：同-z，适用于压缩解压bz2</p><p>For Example：<code>tar -cvf XXX.tar YYY</code>   <code>gzip XXX.tar</code> ，最后生成<code>XXX.tar.gz</code> 。或者直接<code>tar -zcvf</code>打包压缩一部合成，反向是<code>tar -zxvf</code> </p></li></ul><h3 id="zip和unzip：压缩比不高"><a href="#zip和unzip：压缩比不高" class="headerlink" title="zip和unzip：压缩比不高"></a>zip和unzip：压缩比不高</h3><ul><li><p>压缩后能保留原文件</p></li><li><p>zip -r：压缩目录</p></li></ul><h3 id="bzip2和bunzip2：gzip的升级版本，压缩比较好"><a href="#bzip2和bunzip2：gzip的升级版本，压缩比较好" class="headerlink" title="bzip2和bunzip2：gzip的升级版本，压缩比较好"></a>bzip2和bunzip2：gzip的升级版本，压缩比较好</h3><ul><li>bzip2 -k：压缩的同时保留原文件</li><li>bunzip -k：解压的同时保留原文件</li></ul><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><ul><li>write 用户名：给<strong>在线用户</strong>发信息，以ctrl+D保存结束</li></ul><h3 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h3><ul><li>wall 信息内容：给<strong>当前在线的所有用户</strong>发送信息</li></ul><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><ul><li>网络踩点，Linux会一直ping下去</li><li>ping -c 次数：定义ping的次数</li></ul><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><ul><li>查看当前系统网卡信息和设置网卡信息（临时的）</li></ul><h3 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h3><ul><li>查看和发送邮件：不一定要在线</li><li>mail 用户名：发动</li><li>mail：查看的子命令：help(帮助)，数字(查看指定邮件)，h(列表)，d 数字(删)</li></ul><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><ul><li>日志查询命令，统计系统的所有登录信息</li></ul><h3 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h3><ul><li>查看用户最后登录的信息</li><li>lastlog -u uid：查看指定用户上次登录的信息</li></ul><h3 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h3><ul><li>traceroute ip地址：跟踪节点的路径</li></ul><h3 id="netstat：显示网络相关信息"><a href="#netstat：显示网络相关信息" class="headerlink" title="netstat：显示网络相关信息"></a>netstat：显示网络相关信息</h3><ul><li><p>netstat -t：TCP协议</p></li><li><p>netstat -u：UDP协议</p></li><li><p>netstat -l：监听</p></li><li><p>netstat -r：路由</p></li><li><p>netstat -n：显示ip地址和端口号</p><p>最常用的三种组合命令：</p></li><li><p>netstat -tlun：查看本机监听的端口</p></li><li><p>netstat -an：查看本机所有的网络连接</p></li><li><p>netstat -rn：查看本机路由表</p></li></ul><h3 id="setup：redhat系linux独有"><a href="#setup：redhat系linux独有" class="headerlink" title="setup：redhat系linux独有"></a>setup：redhat系linux独有</h3><ul><li>配置网络的工具：永久生效</li><li>配置完需要重启网络服务：<code>service network restart</code> </li></ul><h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><ul><li>mount [-t 文件系统] 设别文件名 挂载点</li><li>For Example：<code>mount -t iso9660 /dev/sr0 /mnt/cdrom</code> </li></ul><h3 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h3><ul><li>umount 设备文件名：卸载</li></ul><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><ul><li>shutdown -h 时间（now）：关机</li><li>shutdown -r 时间：重启</li><li>shutdown -c：取消前一个关机命令</li></ul><h3 id="其他关机命令：halt-poweroff-init-0"><a href="#其他关机命令：halt-poweroff-init-0" class="headerlink" title="其他关机命令：halt,poweroff,init 0"></a>其他关机命令：halt,poweroff,init 0</h3><h3 id="其他重启命令：reboot-init-6"><a href="#其他重启命令：reboot-init-6" class="headerlink" title="其他重启命令：reboot,init 6"></a>其他重启命令：reboot,init 6</h3><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ul><li>系统<strong>运行级别</strong>：0：关机，1：单用户，2：不含NFS服务的多用户，3：完全多用户，4：未分配，5：图形界面，6：重启</li><li>/etc/inittab配置文件里面有运行级别的信息，方便查询，也可以改运行级别</li><li>init 数字：设置系统运行级别，临时更改</li><li>runlevel：查看当前运行级别</li></ul><h3 id="runlevel-查询系统运行级别"><a href="#runlevel-查询系统运行级别" class="headerlink" title="runlevel:查询系统运行级别"></a>runlevel:查询系统运行级别</h3><h3 id="logout和exit"><a href="#logout和exit" class="headerlink" title="logout和exit"></a>logout和exit</h3><ul><li>都是退出登录：logout退出是把因为你注销了登陆机而把你踢出的退出，exit是你直接退出连接的机器。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统简介和安装</title>
      <link href="/2020/03/04/linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/04/linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="UNIX和Linux发展史"><a href="#UNIX和Linux发展史" class="headerlink" title="UNIX和Linux发展史"></a>UNIX和Linux发展史</h2><p>​        1965年，贝尔实验室：MULTICS计划</p><p>​        69年，贝尔实验室的肯汤普森：为了游戏开发UNICS/UNIX系统</p><p>​        62年，美国军方：ARPA：阿帕网，NCP协议——》TCP/IP协议</p><p>​        71年，可汤普森和丹尼斯里奇发明C语言，重写UNIX</p><p>​        UNIX主要发行版本：AIX(IBM)、HP-UX(HP)、Solaris(Sun)、Linux(Intel,AMD……)、BSD</p><p>​        1991年，芬兰大学生Linus Torvalds开发linux内核。大学教授开发minix，但是不接受外来代码，所以李纳斯独自开发，由社区共同维护。</p><p>​        Linux内核版本号：主版本.次版本.末版本     <a href="www.kernel.org">linux内核官网</a></p><p>​        Linux发行版本：两大派系redhat和debian</p><h2 id="开源软件简介"><a href="#开源软件简介" class="headerlink" title="开源软件简介"></a>开源软件简介</h2><p>​        商业软件和开源软件（开源≠免费）</p><p>​        开源软件：apache、NGINX、MySQL、php、mongoDB、python、Ruby、Perl、Go、Rust、Swift、Java</p><p>​        开源软件的特点：使用自由（绝大多数免费）、研究自由（源代码）、散步和改良的自由</p><p>​        支撑互联网的开源技术（LAMP）：Linux，Apache，MySQL，PHP</p><h2 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h2><ol><li><p>基于Linux的企业服务器</p><p><a href="www.netcraft.com">踩点网站</a>：发数据包根据相应嗅探服务器</p><p><a href="www.top500.org">世界前500服务器</a></p></li><li><p>嵌入式应用</p><p>手机，平板：Android底层是Linux</p><p>智能家电，航空系统，银行系统……</p></li><li><p>在电影娱乐业</p><p>特效，图形处理渲染</p></li></ol><h2 id="Linux学习方法"><a href="#Linux学习方法" class="headerlink" title="Linux学习方法"></a>Linux学习方法</h2><p>​        Linux只考虑应用性和稳定性</p><p>​        善于观察提示信息，查找文档，自己解决问题</p><p>​        学习英文：Command not found和No Such file or directory</p><p>​        忘掉Windows的操作习惯</p><p>​        计划，专注，坚持，练习</p><h1 id="Linux系统安装"><a href="#Linux系统安装" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h1><h2 id="VMware虚拟机安装"><a href="#VMware虚拟机安装" class="headerlink" title="VMware虚拟机安装"></a>VMware虚拟机安装</h2><p>​        <a href="www.vmware.com">VMware官网</a>下载，不推荐安装双系统</p><p>​        特点：</p><ol><li><p>不需要分区就能在物理机上使用两种以上的操作系统</p></li><li><p>物理机和虚拟机能实现网络通信</p></li><li><p>可以设定并随时修改虚拟机操作系统的硬件环境</p><p>要求：</p></li><li><p>CPU：主频1GHz以上</p></li><li><p>内存：1GB以上</p></li><li><p>硬盘：8GB以上</p><p>镜像下载：</p><p><a href="https://www.centos.org/download/mirrors/">官网下载</a>:几个版本：DVD版本，Everything版本，minimal版本，LiveGnome版本，KdeLive版本，livecd版本，NetInstall版本</p></li></ol><h2 id="系统分区"><a href="#系统分区" class="headerlink" title="系统分区"></a>系统分区</h2><p>​        <strong>主分区</strong>：最多只能有4个</p><p>​        <strong>扩展分区</strong>：最多只能有一个；主分区加扩展分区最多有4个；不能写入数据，只能包含逻辑分区</p><p>​        <strong>逻辑分区</strong>：可以和主分区一样正确的写入数据和格式化</p><p>​        <strong>注意：</strong>这套视频录制时间较为久远，当时的硬盘分区形式是MBR的，所以上述的分区限制也只                    是针对MBR分区形式，对于GPT分区形式而言，则没有上述限制了。</p><p>​        电脑根据主板的不同（BOIS或者UEFI），会决定硬盘选择MBR分区方案还是GPT分区方案：</p><ol><li><p><strong>BIOS + MBR</strong></p></li><li><p><strong>UEFI + GPT</strong></p><p>两者区别：</p><ol><li><p>也就是说，电脑使用传统BIOS主板，建议使用MBR分区方案；电脑使用UEFI主板，建议使用GPT分区方案</p></li><li><p>MBR分区表最多只能识别2TB左右的空间，大于2TB的容量将无法识别从而导致硬盘空间浪费；GPT分区表则能够识别2TB以上的硬盘空间。</p></li><li><p>MBR分区表最多只能支持4个主分区或三个主分区+1个扩展分区(逻辑分区不限制)；GPT分区表在Windows系统下可以支持128个主分区。</p></li><li><p>在MBR中，分区表的大小是固定的；在GPT分区表头中可自定义分区数量的最大值，也就是说GPT分区表的大小不是固定的。</p></li></ol><p><strong>硬盘分区的作用：</strong> 把一块大硬盘分成几块</p><p><strong>格式化的作用：</strong> 写入文件系统（1.把硬盘分成一个个等大小的数据块   同时2.建立一个inode列表）</p><p>Linux中的<strong>所有硬件都是文件</strong>：</p><p>硬盘文件名：</p><ol><li>IDE硬盘：/dev/hd[a-d]</li><li>SCSI/SATA/USB硬盘：/dev/sd[a-p]</li><li>光驱：/dev/cdrom或/dev/sr0</li><li>鼠标：/dev/mouse</li></ol><p>分区文件名：</p><ol><li>/dev/hda[数字]:</li><li>/dev/sda[数字]</li></ol><p><strong>挂载：</strong> 给分区分配挂载点</p><ol><li>/根分区</li><li>swap交换分区（内存两倍，最大不超多2GB）</li><li>/boot启动分区（200MB足够）</li></ol><p>总结：</p><ol><li>分区：把大硬盘分为小的分区</li><li>格式化：写入文件系统，同时会清空数据</li><li>分区设备文件名：给每个分区定义设备文件名</li><li>挂在：给每个分区分配挂载点，这个挂在点必须是空目录</li></ol></li></ol><h2 id="Linux系统安装-1"><a href="#Linux系统安装-1" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h2><p>​        把镜像加进去，点击启动，然后用图形界面配置分区和其他的自定义选项，确定定义root用户的密码和普通用户的账号和密码。然后等待安装完成即可。</p><h2 id="远程登陆管理工具"><a href="#远程登陆管理工具" class="headerlink" title="远程登陆管理工具"></a>远程登陆管理工具</h2><p>​        三种网络连接方式：</p><ol><li><p>桥接模式：虚拟机使用物理网卡</p></li><li><p>NAT模式：虚拟机使用vmnet8虚拟网卡</p></li><li><p>Host-only模式：虚拟机使用vmnet1虚拟网卡，并且只能和本机通信</p><p>临时配置ip：<code>ifconfig ens33 192.168.XXX.XXX</code> </p><p>永久配置ip：<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code> 修改，<a href="https://blog.csdn.net/weixin_44687427/article/details/88225478">见教程</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows包管理器scoop</title>
      <link href="/2020/03/03/Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8scoop/"/>
      <url>/2020/03/03/Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8scoop/</url>
      
        <content type="html"><![CDATA[<p><strong>对于熟悉linux的同学，apt和yum等等这些包管理器肯定很熟悉，Windows下也有一个类似的好用的包管理器scoop，用scoop安装一些环境配置软件就会省去手动配置环境变量的步骤，并且里面的软件还很齐全，wonderful!</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p><strong>管理员身份打开终端，设置用户变量</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="string">&#x27;D:\software\scoop&#x27;</span>,<span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>启用</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\software\scoop&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>install scoop</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>配置全局变量</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP_GLOBAL&#x27;</span>,<span class="string">&#x27;D:\software&#x27;</span>,<span class="string">&#x27;Machine&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>启用</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP_GLOBAL</span>=<span class="string">&#x27;D:\software&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scoop help：查看scoop的使用方式和命令</span><br><span class="line">scoop status：检查scoop是否最新</span><br><span class="line">scoop update：更新scoop库</span><br><span class="line">scoop search XXX：搜索软件</span><br><span class="line">scoop install XXX：安装软件</span><br><span class="line">scoop insrall <span class="literal">-g</span> XXX：全局安装软件</span><br><span class="line">scoop uninstall XXX：卸载软件</span><br><span class="line">scoop uninstall <span class="literal">-g</span> XXX：全局卸载软件 </span><br><span class="line">scoop list：列出安装的软甲</span><br><span class="line">scoop bucket list：列出安装的仓库</span><br><span class="line">scoop bucket add XXX：添加仓库</span><br></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ol><li><p>7zip</p></li><li><p>git</p></li><li><p>aria2</p></li><li><p>vim</p></li><li><p>gcc</p></li><li><p>nodejs</p></li><li><p>oraclejdk</p></li><li><p>tomcat</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2020/03/03/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/03/03/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>注：推荐观看bilibili的up主codesheep的hexo视频教程，本博客是参考该视频</strong></p><h2 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1. 部署环境"></a>1. 部署环境</h2><ul><li><p><strong>安装nodejs:</strong><a href="http://nodejs.cn/">官网下载</a>,下载完包括nodejs本身和npm包管理器</p></li><li><p>管理员身份<strong>打开终端</strong>(推荐git bash)</p><p>   <code>node -v</code>和<code>npm -v</code>验证是否安装成功</p></li><li><p>安装cnpm</p><p>   用npm安装cnpm的taobao源，防止丢包，提高安装成功率，用<code>cnpm -v</code>验证</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>   同样也可以直接修改npm的仓库源</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment">#查看npm仓库</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></li><li><p>这里其实推荐使用nvm这个nodejs版本管理工具来安装nodejs</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm --version</span><br><span class="line">nvm ls-remote</span><br><span class="line">nvm install v12.18.0</span><br><span class="line">nvm ls</span><br></pre></td></tr></table></figure></li><li><p>用 <code>cnpm install -g hexo-cli</code> 全局安装hexo博客框架，用<code>hexo -v</code>验证</p></li></ul><h2 id="2-初始化博客"><a href="#2-初始化博客" class="headerlink" title="2. 初始化博客"></a>2. 初始化博客</h2><ul><li><p>建立一个空的文件夹，作为blog博客目录</p></li><li><p>在blog目录下，<code>hexo init</code> 自动克隆博客框架到本地</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/349QHS.png"></p></li><li><p>hexo s<code> 在本地</code>localhost:4000`端口可以预览本地的博客</p></li></ul><h2 id="3-写博客"><a href="#3-写博客" class="headerlink" title="3. 写博客"></a>3. 写博客</h2><ul><li><code>hexo n &quot;blog name&quot;</code> 生成新博文到source文件夹下，就可以愉快的写博客了</li><li><code>hexo clean</code> 清理目录之后，<code>hexo g</code> 更新生成</li></ul><h2 id="4-部署博客到GitHub-免费，推荐"><a href="#4-部署博客到GitHub-免费，推荐" class="headerlink" title="4. 部署博客到GitHub(免费，推荐)"></a>4. 部署博客到GitHub(免费，推荐)</h2><ul><li><p>为了远程访问，需要将博客部署到远程仓库，方式有多种，这里推荐github，因为免费</p></li><li><p>github中新建仓库，仓库名设置为    <code>你的github用户名.github.io</code> </p></li><li><p>在本地blog根目录安装git部署插件：<code>cnpm install --save hexo-deployer-git</code></p></li><li><p>设置<code>_config.yml</code>文件，在文件最底部添加自己的Github仓库地址</p><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/34FTdf.png"></p></li><li><pre><code>hexo clean hexo ghexo d     按照提示输入github密码完成远程部署</code></pre></li><li><p>通过<code>你的github用户名.github.io</code> 远程访问自己的博客，完美打开</p></li></ul><h2 id="5-后续自定义美化博客"><a href="#5-后续自定义美化博客" class="headerlink" title="5. 后续自定义美化博客"></a>5. 后续自定义美化博客</h2><ul><li><p><strong>主题选择</strong></p><p>可以访问<a href="https://hexo.io/themes/">hexo官方网站</a>，选择自己喜欢的主题</p></li><li><p>克隆主题到本地themes目录下：</p><p><code>git clone https://github.com/XXXX/XXX.git themes/XXX </code> </p></li><li><p>在<code>_config.yml</code> 中修改主题为XXX</p></li><li><p>最后在主题文件夹里面的配置文件里面实现自定义功能和美化</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile基础语法</title>
      <link href="/2020/03/03/makefile%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/03/makefile%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="C-C-文件到可执行文件的过程"><a href="#C-C-文件到可执行文件的过程" class="headerlink" title="C/C++文件到可执行文件的过程"></a>C/C++文件到可执行文件的过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -E xx.c -o xx.i  预处理</span><br><span class="line">gcc -s xx.i -o xx.s  编译</span><br><span class="line">gcc -c xx.s -o xx.o  汇编</span><br><span class="line">gcc xx.o -o xx       链接</span><br></pre></td></tr></table></figure><p>​    对于单个文件的编译，可以浓缩为一条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc xx.c -o xx</span><br></pre></td></tr></table></figure><p>​        但是在实际开发中，我们的一个项目有多个文件，并且有多层文件夹的嵌套。makefile文件就是为了解决这个问题而出现的</p><h2 id="makefile文件的基础语法"><a href="#makefile文件的基础语法" class="headerlink" title="makefile文件的基础语法"></a>makefile文件的基础语法</h2><h3 id="1-第一层次：easiest"><a href="#1-第一层次：easiest" class="headerlink" title="1. 第一层次：easiest"></a>1. 第一层次：easiest</h3><p>​        <strong>基本格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标文件： 依赖文件</span><br><span class="line">(一个tab)gcc/g++指令</span><br></pre></td></tr></table></figure><p>​        <strong>伪目标：</strong>    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.PHONY:</span><br><span class="line">clear（名字自定义）:</span><br><span class="line">    rm -rf xx.o xx.s xx.i xx.exe</span><br><span class="line">(运行的时候：make clear)</span><br></pre></td></tr></table></figure><p>​        <strong>For Example:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#circle.c circle.h cube.c cube.h main.c main.h</span></span><br><span class="line"></span><br><span class="line"><span class="section">test: circle.o cube.o main.o</span></span><br><span class="line">    gcc circle.o cube.o main.o -o test</span><br><span class="line"></span><br><span class="line">circle.o :circle.c</span><br><span class="line">    gcc circle.c -o circle.o</span><br><span class="line"></span><br><span class="line">cube.o :cube.c</span><br><span class="line">    gcc cube.c -o cube.o</span><br><span class="line"></span><br><span class="line">main.o :main.c</span><br><span class="line">    gcc main.c -o main.o</span><br><span class="line"></span><br><span class="line">.PHONY</span><br><span class="line"><span class="section">clearall:</span></span><br><span class="line">    rm -rf circle.o cube.o main.o test</span><br><span class="line"><span class="section">clear:</span></span><br><span class="line">    rm -rf circle.o cube.o main.o</span><br></pre></td></tr></table></figure><h3 id="2-第二层次：（变量）（用美元符-TAR-表示）"><a href="#2-第二层次：（变量）（用美元符-TAR-表示）" class="headerlink" title="2. 第二层次：（变量）（用美元符$(TAR)表示）"></a>2. 第二层次：（变量）（用美元符$(TAR)表示）</h3><blockquote><p><strong>Makefile中变量有四种赋值方式:</strong></p><ol><li>简单赋值**( := )** 编程语言中常规理解的赋值方式，只对当前语句的变量有效</li><li>递归赋值**( = )**赋值语句可能影响多个变量，所有目标变量相关的其他变量都受影响</li><li>条件赋值**( ?= )**如果变量未定义，则使用符号中的值定义变量。如果该变量已经赋值，则该赋值语句无效。</li><li>追加赋值**( += ）**原变量用空格隔开的方式追加一个新值</li></ol></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TAR=test</span><br><span class="line">OBJ=circle.o bube.o main.o</span><br><span class="line">CC:=gcc</span><br><span class="line"></span><br><span class="line">使用的时候：<span class="variable">$(TAR)</span>  <span class="variable">$(OBJ)</span>   <span class="variable">$(CC)</span></span><br></pre></td></tr></table></figure><h3 id="3-第三层次：（通配符）"><a href="#3-第三层次：（通配符）" class="headerlink" title="3. 第三层次：（通配符）"></a>3. 第三层次：（通配符）</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%：应用在这个Makefile文件中的</span><br><span class="line">*：应用在系统中的</span><br><span class="line"><span class="variable">$@</span>：表示目标文件</span><br><span class="line"><span class="variable">$^</span>：表示所有的依赖文件    </span><br><span class="line"><span class="variable">$&lt;</span>：表示第一个依赖文件</span><br><span class="line"><span class="variable">$?</span>：表示比目标还要新的依赖文件列表</span><br></pre></td></tr></table></figure><p>​        %和*的区别:<a href="https://www.cnblogs.com/warren-wong/p/3979270.html">引用一篇博文</a></p><h3 id="4-第四层次：（函数）"><a href="#4-第四层次：（函数）" class="headerlink" title="4. 第四层次：（函数）"></a>4. 第四层次：（函数）</h3><p>​        暂时没有涉及，之后会补齐</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法</title>
      <link href="/2020/03/03/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/03/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown基础——博客必备"><a href="#markdown基础——博客必备" class="headerlink" title="markdown基础——博客必备"></a>markdown基础——博客必备</h1><h2 id="推荐编辑器"><a href="#推荐编辑器" class="headerlink" title="推荐编辑器"></a>推荐编辑器</h2><ol><li>typora</li><li>vscode</li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><p>markdown的标题一共分为六个级别，从大到小依次是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h3><ul><li><p><strong>加粗</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**这是加粗**</span></span><br></pre></td></tr></table></figure></li><li><p><strong>斜体</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这是斜体*</span></span><br></pre></td></tr></table></figure></li><li><p><strong>斜体并加粗</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*这是斜体并加粗<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>删除线</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~这是删除线~~</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h3><p>可嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line">&gt;&gt; 引用2</span><br><span class="line">&gt;&gt;&gt; 引用3</span><br></pre></td></tr></table></figure><h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h3><p>需要三个或者三个以上的*或-</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">**</span></span><br></pre></td></tr></table></figure><h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5. 图片"></a>5. 图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片下面的文字解释</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure><h3 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6. 超链接"></a>6. 超链接</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">名字</span>](<span class="link">链接地址</span>)</span><br></pre></td></tr></table></figure><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h3><ul><li><strong>无序列表</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 无序列表1</span><br><span class="line"><span class="bullet">+</span> 无序列表2</span><br><span class="line"><span class="bullet">-</span> 无序列表3</span><br></pre></td></tr></table></figure><ul><li><strong>有序列表</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表1</span><br><span class="line"><span class="bullet">2.</span> 有序列表2</span><br><span class="line"><span class="bullet">3.</span> 有序列表3</span><br></pre></td></tr></table></figure><ul><li><strong>嵌套列表</strong></li></ul><p>上级列表和下级列表之间敲三个空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 一级列表</span><br><span class="line"><span class="bullet">   *</span> 二级列表1</span><br><span class="line"><span class="bullet">   *</span> 二级列表2</span><br><span class="line"><span class="bullet">2.</span> 一级列表2</span><br><span class="line"><span class="bullet">   *</span> 二级列表3</span><br><span class="line"><span class="bullet">   *</span> 二级列表4</span><br></pre></td></tr></table></figure><h3 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a|a|a</span><br><span class="line">--|:--:|--:</span><br><span class="line">a|b|c</span><br><span class="line">d|e|f</span><br><span class="line">g|h|i</span><br></pre></td></tr></table></figure><table><thead><tr><th>a</th><th align="center">a</th><th align="right">a</th></tr></thead><tbody><tr><td>a</td><td align="center">b</td><td align="right">c</td></tr><tr><td>d</td><td align="center">e</td><td align="right">f</td></tr><tr><td>g</td><td align="center">h</td><td align="right">i</td></tr></tbody></table><h3 id="9-代码"><a href="#9-代码" class="headerlink" title="9. 代码"></a>9. 代码</h3><ul><li><strong>单行代码</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ 单行代码 ~</span><br></pre></td></tr></table></figure><ul><li><strong>多行代码</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">~~~c++</span></span><br></pre></td></tr></table></figure><h3 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10. 流程图"></a>10. 流程图</h3><p>太复杂，推荐下载typora这个第三方工具，能更加方便</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: ifa&lt;1</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">op1=&gt;operation: 重新</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/20200427094000.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础</title>
      <link href="/2020/03/03/git%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/03/git%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p>​        <a href="https://git-scm.com/">官网下载</a>后，在cmd中输入git验证是否安装完成</p><h2 id="git的基本配置"><a href="#git的基本配置" class="headerlink" title="git的基本配置"></a>git的基本配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><p>​        <strong>需要注意的是可以有三种参数，local、global和system，优先级依次降低。global是全局配置，local可以为本地项目添加单独配置</strong></p><p>​        <strong>查看配置命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l --global(或其他两个)</span><br></pre></td></tr></table></figure><blockquote><p>git配置文件位置</p></blockquote><ol><li><p>本地项目配置文件：<code>当前项目/.git/config</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --local XXX</span><br></pre></td></tr></table></figure></li><li><p>全局配置文件：<code>~/.gitconfig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global XXX</span><br></pre></td></tr></table></figure></li><li><p>系统配置文件：<code>/etc/.gitconfig</code>（需要root权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system XXX</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>三种免密登录方式</p></blockquote><ol><li><p>URL中体现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原来：https://github.com/YangFanJack/DesignPattern.git</span><br><span class="line">免密：https://用户名:密码@github.com/YangFanJack/DesignPattern.git</span><br><span class="line"></span><br><span class="line">git remote add origin https://用户名:密码@github.com/YangFanJack/DesignPattern.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li><li><p>SSH实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成公钥和私钥，在用户的.ssh文件夹里面把公钥添加到远程仓库github里面</span><br><span class="line">ssh-keygen -t rsa      //生成两把钥匙</span><br><span class="line">ssh -T git@github.com  //验证ssh配置是否配置好</span><br><span class="line"></span><br><span class="line">//注意：如果提示找不到ssh-keygen命令的错误，说明你执行这条命令的位置错了，应该在本地的git仓库根目录下执行</span><br></pre></td></tr></table></figure></li><li><p>git自动管理凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//基于操作系统的功能，不同操作系统的实现方式不一样</span><br></pre></td></tr></table></figure></li></ol><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><p><img src="https://img-blog.csdnimg.cn/20200505134620565.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg3MTUxOQ==,size_16,color_FFFFFF,t_70#pic_center"></p><p>​        <strong>第一步</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init //初始化，让git帮助管理文件夹</span><br><span class="line">git status //检测当前目录下文件状态</span><br><span class="line">git add //工作区到暂存区</span><br><span class="line">git commit -m &quot;注释&quot; //暂存区到版本库，生成版本</span><br></pre></td></tr></table></figure><p>​        <strong>从现在回溯到历史，和从历史回溯到将来</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log --pretty=oneline --graph</span><br><span class="line"></span><br><span class="line">git reset --hard 版本号(HEAD^,HEAD^^,HEAD~n) //回滚</span><br><span class="line">git reflog 版本号 //反向回滚</span><br></pre></td></tr></table></figure><p>​        <strong>git reset 三种模式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号：重置位置的同时，直接将 working Tree工作目录、 index 暂存区及 repository 都重置成目标Reset节点的內容,所以效果看起来等同于清空暂存区和工作区。</span><br><span class="line"></span><br><span class="line">git reset --soft 版本号：重置位置的同时，保留working Tree工作目录和index暂存区的内容，只让repository中的内容和 reset 目标节点保持一致，因此原节点和reset节点之间的【差异变更集】会放入index暂存区中(Staged files)。所以效果看起来就是工作目录的内容不变，暂存区原有的内容也不变，只是原节点和Reset节点之间的所有差异都会放到暂存区中。</span><br><span class="line"></span><br><span class="line">git reset --mixed（默认） 版本号：重置位置的同时，只保留Working Tree工作目录的內容，但会将 Index暂存区 和 Repository 中的內容更改和reset目标节点一致，因此原节点和Reset节点之间的【差异变更集】会放入Working Tree工作目录中。所以效果看起来就是原节点和Reset节点之间的所有差异都会放到工作目录中。</span><br></pre></td></tr></table></figure><p>​        <strong>与版本库内容进行比较</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//显示暂存区和工作区的差异</span><br><span class="line">git diff 文件名</span><br><span class="line">//显示暂存区和上一次提交(commit)的差异</span><br><span class="line">git diff --cached 文件名</span><br><span class="line">git diff --staged 文件名</span><br></pre></td></tr></table></figure><p>​        <strong>暂存区文件撤销</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 文件名</span><br><span class="line">git rm --cached 文件名</span><br><span class="line">git restore --staged 文件名</span><br><span class="line"></span><br><span class="line">//如果暂存区有该文件，工作区和暂存区统一，如果没有，工作区和版本库统一</span><br><span class="line">git checkout 文件名</span><br></pre></td></tr></table></figure><p>​        <strong>git的分支操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch //显示本地所有分支</span><br><span class="line">git branch -r //显示远程所有分支</span><br><span class="line">git branch -a //显示本地和远程所有分支</span><br><span class="line">git branch 分支名 //创建分支</span><br><span class="line">git checkout 分支名 //切换分支</span><br><span class="line">git checkout -b 分支名 //创建并切换分支</span><br><span class="line">git branch -d 分支名 //删除分支</span><br><span class="line">git merge 其他分支名 //合并其他分支到当前分支，可能产生冲突，手动修改冲突文件</span><br></pre></td></tr></table></figure><p>​        <strong>git的删除操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//手动删除工作区的文件后可以恢复</span><br><span class="line">//git restore指令使得在工作空间但是不在暂存区的文件撤销更改(内容恢复到没修改之前的状态)</span><br><span class="line">git restore 文件名</span><br><span class="line"></span><br><span class="line">git rm (-r -f) XX</span><br><span class="line">git commit -m &quot;直接同步删除操作到本地仓库&quot;</span><br><span class="line"></span><br><span class="line">rm (-r -f) XX</span><br><span class="line">git add XX</span><br><span class="line">git commit -m &quot;需要先add，再同步删除操作到本地仓库&quot;</span><br></pre></td></tr></table></figure><blockquote><p><strong>问题：</strong><br>远程已经修改，然后你没pull就修改了本地，push时发生了错误<br><strong>解决：</strong><br>错误发生后，先pull，在本地中的冲突文件中按照需求修改文件，最后再push</p></blockquote><p><strong>经过上述步骤已经能实现本地多分支开发，假设目前开发进度如下图所示：</strong></p><p><img src="https://i.loli.net/2021/02/15/usachwRCOLndJli.png" alt="gnome-shell-screenshot-9CZIY0.png"></p><p>​        <strong>远程仓库操作（以github为例）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//查看关联的远程仓库</span><br><span class="line">git remote</span><br><span class="line">git remote -v</span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line">//连接可以是http，也可以是ssh</span><br><span class="line">git remote add origin http://github.com/YangFanJack/xxxxx.git</span><br><span class="line">git remote rm origin</span><br><span class="line">//-u表示以后默认都是origin这个地址</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">//git clone已经包含了remote add origin操作</span><br><span class="line">git clone http://github.com/YangFanJack/xxxxx.git</span><br><span class="line"></span><br><span class="line">//接上图继续开发</span><br><span class="line">git checkout dev //切换到需要拉取并合并的分支</span><br><span class="line">git merge master //将dev更新为最新版本[仅1次]（上次开发结束时最新版本在master主分支上）</span><br><span class="line">（继续开发...）</span><br><span class="line">git add .</span><br><span class="line">git commit -m XXX</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">//异地拉取代码继续开发</span><br><span class="line">git checkout dev</span><br><span class="line">git pull origin dev</span><br><span class="line">（继续开发...）</span><br><span class="line">git add .</span><br><span class="line">git commit -m XXX</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">//某一个阶段代码开发完后，合并dev到master</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line">git merge master</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p>​        <strong>pull=fetch+merge</strong></p><p><img src="https://pic2.zhimg.com/80/v2-af3bf6fee935820d481853e452ed2d55_720w.jpg?source=1940ef5c"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev</span><br><span class="line"></span><br><span class="line">git fetch origin dev</span><br><span class="line">git merge origin/dev</span><br></pre></td></tr></table></figure><h2 id="rebase-变基"><a href="#rebase-变基" class="headerlink" title="rebase(变基)"></a>rebase(变基)</h2><p>​        <strong>应用场景一：多版本记录合并为一个版本记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2 //HEAD和之前的1个合并</span><br><span class="line">git rebase -i 版本号 //HEAD到该版本之前合并</span><br><span class="line"></span><br><span class="line">//注意：合并版本的时候不要包含已经push到远程仓库的版本</span><br></pre></td></tr></table></figure><p>​        <strong>应用场景二：将另一个分支(dev)的版本强插到当前版本(master)中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git rebase master</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>​        <strong>应用场景三：pull后产生冲突（公司上次开发没提交，在家继续开发，去公司pull代码时）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//会产生分支</span><br><span class="line">git pull origin dev = </span><br><span class="line">git fetch origin dev + git merge origin/dev</span><br><span class="line"></span><br><span class="line">//不会产生分支</span><br><span class="line">git fetch</span><br><span class="line">git fetch origin dev + git rebase origin/dev</span><br><span class="line"></span><br><span class="line">//git fetch这个命令会把远程的commits拉取到本地的repo中，但是，它不是直接把commits接在分支的最后面，而是从你最后一次push的那个commit节点，再拉取一个新的分支出来，类似这样：</span><br><span class="line">   * git fetch拉下来的节点，建立在一个新的分支上</span><br><span class="line">* /  你还没push的节点</span><br><span class="line">|/</span><br><span class="line">* 你最后一次push的节点</span><br><span class="line">|</span><br><span class="line">*</span><br></pre></td></tr></table></figure><p><strong>注意：git rebase可能有冲突，解决后 git add，然后 git rebase –continue 就可以</strong></p><h2 id="beyond-compare冲突解决软件"><a href="#beyond-compare冲突解决软件" class="headerlink" title="beyond compare冲突解决软件"></a>beyond compare冲突解决软件</h2><ol><li><p>安装bcompare软件</p></li><li><p>在git中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --local merge.tool bc3</span><br><span class="line">git config --local mergetool.path &#x27;usr/bin/bcompare&#x27;</span><br><span class="line">git config --local mergetool.keepBackup false</span><br></pre></td></tr></table></figure></li><li><p>调用beyond compare解决冲突</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure></li></ol><h2 id="多人协同开发"><a href="#多人协同开发" class="headerlink" title="多人协同开发"></a>多人协同开发</h2><h4 id="gitflow工作流"><a href="#gitflow工作流" class="headerlink" title="gitflow工作流"></a>gitflow工作流</h4><p><img src="https://i.loli.net/2021/02/16/kqFIWSKabYZci9m.png" alt="gnome-shell-screenshot-0W3HY0.png"></p><p>​        <strong>协同开发的两种方式：</strong></p><ol><li>自己账户下创建仓库，然后再setting里邀请其他github用户参与项目</li><li>建立组织，在组织下创建仓库，再邀请其他github用户参与项目</li></ol><p>​        <strong>建立tag标签：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1 -m &quot;第一版&quot; //默认是HEAD处创建tag</span><br><span class="line">git tag -a v1.2 9fceb02 -m &quot;my tag&quot;</span><br><span class="line">git tag -d v1 //删除版本</span><br><span class="line"></span><br><span class="line">git tag //列出本地所有tag</span><br><span class="line"></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h4 id="协同开发第一步：master分支建立"><a href="#协同开发第一步：master分支建立" class="headerlink" title="协同开发第一步：master分支建立"></a>协同开发第一步：master分支建立</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git touch TestClass.java</span><br><span class="line">vim TestClass.java</span><br><span class="line">javac TestClass.java</span><br><span class="line">java TestClass</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Hello,world!&quot;</span><br><span class="line">git remote add origin git@github.com:queer-coder/test.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git tag -a v1 -m &quot;第一版&quot;</span><br><span class="line">git tag</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h4 id="协同开发第二步：dev分支，ddz分支建立"><a href="#协同开发第二步：dev分支，ddz分支建立" class="headerlink" title="协同开发第二步：dev分支，ddz分支建立"></a>协同开发第二步：dev分支，ddz分支建立</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line">//邀请另外用户进组织</span><br><span class="line">//组织中setting可设置成员权限，默认是只读</span><br><span class="line">//项目中setting可以单独设置成员拥有写权限</span><br><span class="line"></span><br><span class="line">//另一个用户clone代码到本地开发斗地主分支</span><br><span class="line">git checkout -b ddz</span><br><span class="line">touch Doudizhu.java</span><br><span class="line">vim Doudizhu.java</span><br><span class="line">javac Doudizhu.java</span><br><span class="line">java Doudizhu</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;斗地主&quot;</span><br><span class="line">git push origin ddz</span><br><span class="line"></span><br><span class="line">vim Doudizhu.java</span><br><span class="line">javac Doudizhu.java</span><br><span class="line">java Doudizhu</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;斗地主开发完毕&quot;</span><br><span class="line">git push origin ddz</span><br></pre></td></tr></table></figure><h4 id="协同开发第三步：dev管理者review-ddz开发者代码"><a href="#协同开发第三步：dev管理者review-ddz开发者代码" class="headerlink" title="协同开发第三步：dev管理者review ddz开发者代码"></a>协同开发第三步：dev管理者review ddz开发者代码</h4><blockquote><p>注意：</p><p>release——》master分支具体是需要线上代码review还是直接本地merge要看项目需求</p><p>开发分支——》dev分支必须要线上代码review，不能本地merge</p></blockquote><p><strong>通过github的pull request来实现代码review</strong></p><p>​    <strong>dev成员(owner)：</strong>打开项目的setting——》branches——》add rule（跟dev合并必须要经过review）——》(开发成员pull request后)在pull request中add your review，然后merge pull request就实现了review后的同意合并，最后可删除ddz开发分支</p><p>​    <strong>斗地主开发成员(member)：</strong>new pull request——》compare to base</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在线上github中同意merge后，线上dev已经最新了</span><br><span class="line">//dev管理者owner本地再pull一下，本地就也就最新了</span><br><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure><h4 id="协同开发第四步：测试"><a href="#协同开发第四步：测试" class="headerlink" title="协同开发第四步：测试"></a>协同开发第四步：测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//代码测试分支由owner创建push到github</span><br><span class="line">git checkout dev</span><br><span class="line">git checkout -b release</span><br><span class="line">git push origin release</span><br><span class="line"></span><br><span class="line">//代码测试人员从github拉取release分支来进行代码测试</span><br><span class="line"></span><br><span class="line">//测试完后，将release版本merge到master分支和dev分支（同样采用review的方式来pull request）</span><br><span class="line">//删除release分支</span><br><span class="line"></span><br><span class="line">//本地的master拉取线上master，打上第二版标签</span><br><span class="line">git pull origin master</span><br><span class="line">git tag -a v2 -m &quot;第二版&quot;</span><br></pre></td></tr></table></figure><h2 id="如何给开源项目贡献代码"><a href="#如何给开源项目贡献代码" class="headerlink" title="如何给开源项目贡献代码"></a>如何给开源项目贡献代码</h2><blockquote><p>fork + pull request</p></blockquote><ol><li>fork源代码</li><li>git clone 自己仓库的源代码到本地</li><li>做二次开发，bug修复</li><li>给开源项目作者提交 修复bug 的申请（pull request），把自己仓库的某个分支提交给原作者</li><li>等待源代码作者审核通过</li></ol><blockquote><p>实际开发中一些约定的分支名：</p></blockquote><ul><li>master: 主分支，主要用来版本发布。</li><li>develop：日常开发分支，该分支正常保存了开发的最新代码。</li><li>feature：具体的功能开发分支，只与 develop 分支交互。</li><li>release：release 分支可以认为是 master 分支的未测试版。比如说某一期的功能全部开发完成，那么就将 develop 分支合并到 release 分支，测试没有问题并且到了发布日期就合并到 master 分支，进行发布。</li><li>hotfix：线上 bug 修复分支</li></ul><p><img src="https://gitee.com/yangfanjack/blogimage/raw/master/img/image-20210323154250824.png" alt="image-20210323154250824"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript类型转换</title>
      <link href="/2019/12/16/JavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/12/16/JavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="强类型定义语言和弱类型定义语言"><a href="#强类型定义语言和弱类型定义语言" class="headerlink" title="强类型定义语言和弱类型定义语言"></a>强类型定义语言和弱类型定义语言</h2><h3 id="1）强类型定义语言："><a href="#1）强类型定义语言：" class="headerlink" title="1）强类型定义语言："></a>1）强类型定义语言：</h3><p>　　强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</p><h3 id="2）弱类型定义语言："><a href="#2）弱类型定义语言：" class="headerlink" title="2）弱类型定义语言："></a>2）弱类型定义语言：</h3><p>　　数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。<br>　　强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！<br>　　例如：Python是动态语言，是强类型定义语言（类型安全的语言）; VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; JAVA是静态语言，是强类型定义语言（类型安全的语言）。</p><h3 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h3><ol><li>基本数据类型：string, number, boolean, undefined, null</li><li>引用数据类型：Object, Array, Function</li></ol><h3 id="转化规律"><a href="#转化规律" class="headerlink" title="转化规律"></a>转化规律</h3><h4 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h4><ol><li>toString()方法：null和undefined没有该方法</li><li>null和undefined有String()函数，该函数适应性更加好</li><li>Number()函数：<ol><li>字符串转数字：只能转纯数字字符串，如果是空串或空格串，转为0，否则NaN</li><li>布尔转数字：true-&gt;`;false-&gt;0</li><li>Null转数字：结果为0</li><li>undefined转数字：结果为NaN</li></ol></li><li>parseInt()函数和parseIntFloat()函数:将字符串中有效的整数部分提出来转化为整数。如果是对非字符串使用该方法，则会先将其转化为string，然后再运算。</li><li>Boolean()函数：<ol><li>number:只有0和NaN是false</li><li>string:只有空串是false,甚至空格串也是true</li><li>undefined:false</li><li>null:false</li><li>对象类型：都是true</li></ol></li></ol><h4 id="JavaScript中的运算符隐式转换"><a href="#JavaScript中的运算符隐式转换" class="headerlink" title="JavaScript中的运算符隐式转换"></a>JavaScript中的运算符隐式转换</h4><ol><li>“+”运算：对非number的值进行算数运算时，会先将这些值转化为number,然后再运算（string和NaN除外）</li><li>任何值和NaN做算数运算结果都是NaN</li><li>如果两个字符串相加，会拼串。</li><li>任何值和字符串做“+”运算，都需要将其转化为字符串，然后拼串</li><li>numbe类型+””(空串)：隐式将number转化为string，和String()和toString()功能相同</li><li>对于其他算数运算(“-“,”*”,”/“)，非number都会转化为number</li><li>根据第6条，可知：string类型-0；string类型*1；string类型/1都可以转化为number类型（加0不可以，0会转为string）</li><li>正号：对于非number,会先转化为number类型，”+string”也可以将string类型转化为number类型。</li><li>!取反符:对非boolean双重取反”!!”，可以将非Boolean类型转化为Boolean类型</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 技术 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序实现演讲比赛成绩打分程序</title>
      <link href="/2019/11/26/C++%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%88%90%E7%BB%A9%E6%89%93%E5%88%86%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/11/26/C++%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%88%90%E7%BB%A9%E6%89%93%E5%88%86%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="程序总体框架"><a href="#程序总体框架" class="headerlink" title="程序总体框架"></a>程序总体框架</h2><h3 id="1-speaker类：演讲选手类"><a href="#1-speaker类：演讲选手类" class="headerlink" title="1.speaker类：演讲选手类"></a>1.speaker类：演讲选手类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speaker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_Name;    <span class="comment">//严格意义上这俩数据成员应该是私有的，用set和get函数来调用</span></span><br><span class="line">    <span class="keyword">double</span> m_Sorce[<span class="number">2</span>];<span class="comment">//此处是为了简便，严格意义上这样是不规范大气的</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Speaker</span>();</span><br><span class="line">    ~<span class="built_in">Speaker</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-speechManager类：演讲比赛类（主体）"><a href="#2-speechManager类：演讲比赛类（主体）" class="headerlink" title="2.speechManager类：演讲比赛类（主体）"></a>2.speechManager类：演讲比赛类（主体）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpeechManager</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SpeechManager</span>();</span><br><span class="line">    ~<span class="built_in">SpeechManager</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_Menu</span><span class="params">()</span></span>;<span class="comment">//打印菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exitSystem</span><span class="params">()</span></span>;<span class="comment">//退出系统</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initSpeech</span><span class="params">()</span></span>;<span class="comment">//初始化speechManager类的各个数据成员</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createSpeaker</span><span class="params">()</span></span>;<span class="comment">//创建参加比赛的12名选手</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startSpeech</span><span class="params">()</span></span>;<span class="comment">//比赛的主函数，包含所有流程，所有分流程又拆分为单独函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speechDraw</span><span class="params">()</span></span>;<span class="comment">//抽签</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speechContest</span><span class="params">()</span></span>;<span class="comment">//比赛（重点）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showScore</span><span class="params">()</span></span>;<span class="comment">//显示晋级选手</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveRecord</span><span class="params">()</span></span>;<span class="comment">//保存每一届冠亚季军到csv文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadRecord</span><span class="params">()</span></span>;<span class="comment">//加载文件中每一届数据到程序中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showRecord</span><span class="params">()</span></span>;<span class="comment">//显示文件中的数据（每一届的冠亚季军）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearRecord</span><span class="params">()</span></span>;<span class="comment">//清除文件记录</span></span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;<span class="comment">//保存每一届的最初12名选手</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v2;<span class="comment">//保存每一届第一轮比赛晋级的6名选手</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vVictory;<span class="comment">//保存每一届冠亚季军</span></span><br><span class="line">    map&lt;<span class="keyword">int</span>,Speaker&gt;m_Speaker;</span><br><span class="line">    map&lt;<span class="keyword">int</span>,vector&lt;string&gt;&gt; m_Record;<span class="comment">//存放往届记录</span></span><br><span class="line">    <span class="keyword">int</span> m_index;<span class="comment">//保存是每一届比赛的第几轮</span></span><br><span class="line">    <span class="keyword">bool</span> fileIsEmpty;<span class="comment">//判断文件是否为空</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-main-cpp-主函数"><a href="#3-main-cpp-主函数" class="headerlink" title="3.main.cpp(主函数)"></a>3.main.cpp(主函数)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">srand</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">        SpeechManager sm;</span><br><span class="line">        sm.<span class="built_in">show_Menu</span>();</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;please give me a choice:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin &gt;&gt;choice;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始演讲比赛</span></span><br><span class="line">            sm.<span class="built_in">startSpeech</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看往届记录</span></span><br><span class="line">            <span class="comment">//sm.loadRecord();</span></span><br><span class="line">            sm.<span class="built_in">showRecord</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空比赛记录</span></span><br><span class="line">            sm.<span class="built_in">clearRecord</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//退出比赛程序</span></span><br><span class="line">            sm.<span class="built_in">exitSystem</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比赛大致流程"><a href="#比赛大致流程" class="headerlink" title="比赛大致流程"></a>比赛大致流程</h2><blockquote><p>每一届的比赛从12名选手中选取得到，12名选手分为6  6两组，然后分别从6中选3，第一轮比赛得到6名晋级选手。</p><p>第二轮比赛中同样是从晋级的6名选手中选3人，按照成绩评选为每一届比赛的最终冠军，亚军和季军。</p></blockquote><h3 id="SpeechManager类中的函数（实现功能的重要函数）"><a href="#SpeechManager类中的函数（实现功能的重要函数）" class="headerlink" title="SpeechManager类中的函数（实现功能的重要函数）"></a>SpeechManager类中的函数（实现功能的重要函数）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SpeechManager::~<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;***************************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;****************Welcome!***************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;************1.开始演讲比赛**************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;************2.查看往届记录**************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;************3.清空比赛记录**************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;************4.退出比赛程序**************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;***************************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::exitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;欢迎下次使用！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_index=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Record.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::createSpeaker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string nameSeed = <span class="string">&quot;ABCDEFGHIJKL&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nameSeed.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string name=<span class="string">&quot;Speaker&quot;</span>;</span><br><span class="line">        name+=nameSeed[i];</span><br><span class="line">        Speaker sp;</span><br><span class="line">        sp.m_Name=name;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sp.m_Sorce[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;v1.<span class="built_in">push_back</span>(i+<span class="number">10001</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(i+<span class="number">10001</span>,sp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一轮比赛</span></span><br><span class="line">    <span class="comment">//抽签</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line">    <span class="comment">//比赛</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line">    <span class="comment">//显示晋级结果</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二轮比赛</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_index++;</span><br><span class="line">    <span class="comment">//抽签</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line">    <span class="comment">//比赛</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line">    <span class="comment">//显示晋级结果</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存分数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">saveRecord</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;本届比赛完毕！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::speechDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_index&lt;&lt;<span class="string">&quot;轮比赛正在抽签。。。&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;___________________________________&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;抽签结果如下：&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_index==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">random_shuffle</span>(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=v1.<span class="built_in">begin</span>();it!=v1.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">random_shuffle</span>(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=v2.<span class="built_in">begin</span>();it!=v2.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;_________________________________&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::speechContest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_index&lt;&lt;<span class="string">&quot;轮比赛正在比赛。。。&quot;</span>&lt;&lt;endl;</span><br><span class="line">    multimap &lt;<span class="keyword">double</span>,<span class="keyword">int</span>,greater&lt;<span class="keyword">double</span>&gt;&gt; groupScore; </span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v_Src;     </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_index==<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        v_Src=v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v_Src=v2;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=v_Src.<span class="built_in">begin</span>();it!=v_Src.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="comment">//评委打分</span></span><br><span class="line">        deque&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> score=(<span class="built_in">rand</span>()%<span class="number">401</span>+<span class="number">600</span>)/<span class="number">10.f</span>;</span><br><span class="line">            cout&lt;&lt;score&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            d.<span class="built_in">push_back</span>(score);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">sort</span>(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>(),greater&lt;<span class="keyword">double</span>&gt;());</span><br><span class="line">        d.<span class="built_in">pop_back</span>();</span><br><span class="line">        d.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">double</span> sum=<span class="built_in">accumulate</span>(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">double</span> avg=sum/(<span class="keyword">double</span>)d.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Sorce[<span class="keyword">this</span>-&gt;m_index<span class="number">-1</span>]=avg;</span><br><span class="line">        groupScore.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(avg,*it));</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">6</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;num/<span class="number">6</span>&lt;&lt;<span class="string">&quot;组名次：&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">for</span>(multimap&lt;<span class="keyword">double</span>,<span class="keyword">int</span>,greater&lt;<span class="keyword">double</span>&gt;&gt;::iterator it=groupScore.<span class="built_in">begin</span>();it!=groupScore.<span class="built_in">end</span>();it++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;编号：&quot;</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="string">&quot;  成绩：&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Sorce[<span class="keyword">this</span>-&gt;m_index<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(multimap&lt;<span class="keyword">double</span>,<span class="keyword">int</span>,greater&lt;<span class="keyword">double</span>&gt;&gt;::iterator it=groupScore.<span class="built_in">begin</span>();it!=groupScore.<span class="built_in">end</span>()&amp;&amp;count&lt;<span class="number">3</span>;it++,count++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_index==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    v2.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    vVictory.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            groupScore.<span class="built_in">clear</span>();  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_index&lt;&lt;<span class="string">&quot;轮比赛完毕。&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::showScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_index&lt;&lt;<span class="string">&quot;轮晋级选手如下：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_index==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v=v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v=vVictory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;选手编号:&quot;</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; 姓名:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name&lt;&lt;<span class="string">&quot; 得分:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Speaker[*it].m_Sorce[<span class="keyword">this</span>-&gt;m_index<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">show_Menu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::saveRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ofstream ofs;</span><br><span class="line">    ofs.<span class="built_in">open</span>(<span class="string">&quot;speech.csv&quot;</span>,ios::out|ios::app);</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=vVictory.<span class="built_in">begin</span>();it!=vVictory.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs&lt;&lt;*it&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Speaker[*it].m_Sorce[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ofs&lt;&lt;endl;</span><br><span class="line">    ofs.<span class="built_in">close</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;文件记录已经保存！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//更新文件不为空的状态</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;fileIsEmpty=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::loadRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>,ios::in)</span></span>;</span><br><span class="line">    <span class="comment">//文件不存在的情况</span></span><br><span class="line">    <span class="keyword">if</span>(!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fileIsEmpty=<span class="literal">true</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;文件不存在！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件空的情况</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ifs&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ifs.<span class="built_in">eof</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;文件为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fileIsEmpty=<span class="literal">true</span>;</span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;fileIsEmpty=<span class="literal">false</span>;</span><br><span class="line">    ifs.<span class="built_in">putback</span>(ch);<span class="comment">//放回上面读取的</span></span><br><span class="line">    string data;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ifs&gt;&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;string&gt; v;<span class="comment">//存放记录中的数据</span></span><br><span class="line">        <span class="comment">//cout&lt;&lt;data&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">-1</span>;<span class="comment">//查到逗号位置</span></span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos=data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>,start);</span><br><span class="line">            <span class="keyword">if</span>(pos==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//没有找到</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                string temp = data.<span class="built_in">substr</span>(start,pos-start);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;temp&lt;&lt;endl;</span></span><br><span class="line">                v.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            start=pos+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Record.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(index++,v));</span><br><span class="line">    &#125;</span><br><span class="line">    ifs.<span class="built_in">close</span>();</span><br><span class="line">    <span class="comment">/*for(map&lt;int,vector&lt;string&gt;&gt;::iterator it=m_Record.begin();it!=m_Record.end();it++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;&quot;第&quot;&lt;&lt;it-&gt;first&lt;&lt;&quot;届: &quot;&lt;&lt;&quot;冠军编号:&quot;&lt;&lt;it-&gt;second[0]&lt;&lt;&quot;分数:&quot;&lt;&lt;it-&gt;second[1]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::showRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;fileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;文件为空或文件不存在！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="keyword">this</span>-&gt;m_Record.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;届: &quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;冠军编号:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>]&lt;&lt;<span class="string">&quot; 分数:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;亚军编号:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>]&lt;&lt;<span class="string">&quot; 分数:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>]&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;季军编号:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>]&lt;&lt;<span class="string">&quot; 分数:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::clearRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;是否确定清空数据文件：(y or n)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string select;</span><br><span class="line">    cin&gt;&gt;select;</span><br><span class="line">    <span class="keyword">if</span>(select==<span class="string">&quot;y&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//确认清空</span></span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>,ios::trunc)</span></span>;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;清空成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="string">&quot;n&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;选项输入错误！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的几种初始化方式</title>
      <link href="/2019/11/04/C++%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/11/04/C++%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h5><blockquote><p>作为C++11新标准的一部分，用花括号来初始化变量得到了全面应用。</p><p>但有局限性：当对内置对象使用列表初始化的时候，若初始值存在丢失的风险时，编译器会报错</p></blockquote><h5 id="拷贝初始化"><a href="#拷贝初始化" class="headerlink" title="拷贝初始化"></a>拷贝初始化</h5><blockquote><p>例子：string s2=s1;</p></blockquote><h5 id="直接初始化"><a href="#直接初始化" class="headerlink" title="直接初始化"></a>直接初始化</h5><blockquote><p>例子：string();    string(“hi”);     string(3,’c’);</p></blockquote><h5 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h5><blockquote><p>非static局部变量、static局部变量、全局变量、类类型</p></blockquote><h5 id="值初始化"><a href="#值初始化" class="headerlink" title="值初始化"></a>值初始化</h5><blockquote><p>例子：vector<int> a(10);</p></blockquote><h5 id="类成员初始化"><a href="#类成员初始化" class="headerlink" title="类成员初始化"></a>类成员初始化</h5><blockquote><p>只允许进行拷贝初始化和列表初始化</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
